(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    502051,      10229]
NotebookOptionsPosition[    489601,       9856]
NotebookOutlinePosition[    490424,       9881]
CellTagsIndexPosition[    490381,       9878]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " - A Fantastic Playground"
}], "Title",
 CellChangeTimes->{{3.6227481848206286`*^9, 3.622748192817086*^9}, {
  3.6231704191514425`*^9, 3.623170419928487*^9}, {3.6231755082215204`*^9, 
  3.6231755083325267`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Advanced Section: ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Power User"
}], "Section",
 CellChangeTimes->{{3.6227475759438534`*^9, 3.6227475784866576`*^9}, {
  3.6228176248582115`*^9, 3.6228176249206114`*^9}, {3.6229134070025225`*^9, 
  3.622913408399925*^9}, {3.622919851249729*^9, 3.6229198710813637`*^9}}],

Cell[CellGroupData[{

Cell["(!!!) Useful Tricks", "Subsection",
 CellChangeTimes->{{3.6230245036146736`*^9, 3.6230245066742787`*^9}, {
  3.623032063828638*^9, 3.623032066512843*^9}, {3.6231703206278067`*^9, 
  3.6231703268901653`*^9}}],

Cell[CellGroupData[{

Cell["Pasting Last Input", "Subsubsection",
 CellChangeTimes->{{3.62303208690548*^9, 3.623032088639083*^9}, 
   3.6231339588365293`*^9, {3.623170320117778*^9, 3.6231703264281387`*^9}}],

Cell["Consider this list", "Text",
 CellChangeTimes->{{3.6230320961602964`*^9, 3.6230321827724547`*^9}, {
  3.6231680785195656`*^9, 3.623168080491678*^9}}],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Prime", "[", "j", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6230321838020563`*^9, 3.6230321910610695`*^9}}],

Cell[TextData[{
 "Suppose we want to take the ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Total", True->
     StyleBox["Total", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Total",
    ButtonNote->"paclet:ref/Total"],
   Annotation[#, "paclet:ref/Total", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623168091827327*^9}],
 " of this list. The shortcut Control+L pastes the input right above your \
cursor"
}], "Text",
 CellChangeTimes->{{3.62316808366786*^9, 3.62316811478864*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Aborting a Long Evaluation", "Subsubsection",
 CellChangeTimes->{
  3.6230320697450495`*^9, {3.6231306798218765`*^9, 3.623130681701984*^9}, {
   3.6231339550925226`*^9, 3.6231339562469244`*^9}, 3.6231703290412884`*^9}],

Cell["\<\
You can stop a long computation using Control + . (Windows) or Command + . \
(Mac)\
\>", "Text",
 CellChangeTimes->{{3.6230245096850843`*^9, 3.62302455221216*^9}, {
  3.623129866986385*^9, 3.6231298672023973`*^9}, {3.623164959906191*^9, 
  3.6231649691317186`*^9}, {3.6231681282894125`*^9, 3.6231681350047965`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Pause", "[", "50", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Pause", "[", "50", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"1", "+", "1"}]}], "Input",
 CellChangeTimes->{{3.623024554287964*^9, 3.623024562246978*^9}, {
  3.6230246696033707`*^9, 3.6230246992260246`*^9}, {3.6231648790575666`*^9, 
  3.623164879742606*^9}, {3.62316817021081*^9, 3.623168171207867*^9}}],

Cell["\<\
Alternatively, you can use F7 (Evaluate in Subsession) which enables you to \
do a (small) calculation on the side while you wait for the (large) main \
evaluation to finish\
\>", "Text",
 CellChangeTimes->{{3.6230246022794495`*^9, 3.6230246550581446`*^9}, {
  3.6231681776252346`*^9, 3.623168189155894*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["(!!!) Functions", "Subsection",
 CellChangeTimes->{{3.6229228041265464`*^9, 3.622922807121752*^9}, {
  3.6229233085821466`*^9, 3.622923310953351*^9}, {3.6229370546629424`*^9, 
  3.6229370553181434`*^9}, {3.6231339784155636`*^9, 3.6231339898659835`*^9}}],

Cell[CellGroupData[{

Cell["Creating your own Function", "Subsubsection",
 CellChangeTimes->{{3.6229370631961575`*^9, 3.62293707046677*^9}}],

Cell[TextData[{
 "This creates a function ",
 Cell[BoxData["func"], "Input",
  CellChangeTimes->{{3.6229371759555564`*^9, 3.622937187704377*^9}}],
 " that will take in an input and square it"
}], "Text",
 CellChangeTimes->{{3.622937145201902*^9, 3.6229371930405865`*^9}, {
  3.623168297677101*^9, 3.623168307787679*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"func", "[", "x_", "]"}], ":=", 
  SuperscriptBox["x", "2"]}]], "Input",
 CellChangeTimes->{{3.6229371759555564`*^9, 3.6229371972993937`*^9}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.623168324886657*^9, 3.6231683252676787`*^9}}],

Cell[TextData[{
 "Once we have evaluated this definition for ",
 Cell[BoxData["func"], "Input",
  CellChangeTimes->{{3.6229371759555564`*^9, 3.622937187704377*^9}}],
 ", we can use it like any other ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function"
}], "Text",
 CellChangeTimes->{{3.6229376116945257`*^9, 3.6229376263197517`*^9}}],

Cell[BoxData[{
 RowBox[{"func", "[", "2", "]"}], "\[IndentingNewLine]", 
 RowBox[{"func", "[", "3", "]"}], "\[IndentingNewLine]", 
 RowBox[{"func", "[", "x", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"func", "[", "k", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", "10"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.622937599166704*^9, 3.6229376361009693`*^9}}],

Cell["\<\
Here we create a function of two variables and the function will return the \
product of these two variables\
\>", "Text",
 CellChangeTimes->{{3.6229378738453913`*^9, 3.622937890633021*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"func2", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"x", "*", "y"}]}], "\[IndentingNewLine]", 
 RowBox[{"func2", "[", 
  RowBox[{"2", ",", "3"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"func2", "[", 
  RowBox[{"a", ",", 
   FractionBox["b", "a"]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"func2", "[", "c", "]"}]}], "Input",
 CellChangeTimes->{{3.622937892600624*^9, 3.6229379210102744`*^9}}],

Cell[TextData[{
 "Notice that in the last case, ",
 Cell[BoxData[
  RowBox[{"func2", "[", "c", "]"}]], "Input",
  CellChangeTimes->{{3.6229379269226847`*^9, 3.622937928342287*^9}}],
 " returns unevaluated because we have not given it a definition (func2 has \
only been defined when it receives ",
 StyleBox["two",
  FontSlant->"Italic"],
 " inputs)."
}], "Text",
 CellChangeTimes->{{3.6229379233502784`*^9, 3.6229379553177347`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Explore: Creating Awesome Functions", "Subsubsection",
 CellChangeTimes->{{3.623167099135548*^9, 3.623167118138635*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Make a function ",
 Cell[BoxData["func1"], "Input",
  CellChangeTimes->{{3.6231652376520777`*^9, 3.6231652376530776`*^9}}],
 " that takes a parameter ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " and returns ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", 
    FractionBox["1", "x"]}], TraditionalForm]]],
 ". What is ",
 Cell[BoxData[
  RowBox[{"func1", "[", 
   RowBox[{"E", "^", 
    RowBox[{"(", 
     RowBox[{"I", " ", "x"}], ")"}]}], "]"}]], "Input",
  CellChangeTimes->{{3.623165260827403*^9, 3.6231652714690113`*^9}}]
}], "Item",
 CellChangeTimes->{{3.6231652180569563`*^9, 3.6231652601353636`*^9}, {
  3.6231652969774704`*^9, 3.6231653015287313`*^9}}],

Cell[TextData[{
 "Make a function ",
 Cell[BoxData["func2"], "Input",
  CellChangeTimes->{{3.6231652376520777`*^9, 3.6231652376530776`*^9}}],
 " that takes a function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "[", "x", "]"}], TraditionalForm]]],
 " and plots ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "[", "x", "]"}], TraditionalForm]]],
 " from ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", "0"}], TraditionalForm]]],
 " to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "=", 
    RowBox[{"4", "\[Pi]"}]}], TraditionalForm]]],
 ". What is ",
 Cell[BoxData[
  RowBox[{"func2", "[", 
   SuperscriptBox["E", 
    RowBox[{"-", 
     RowBox[{"Cos", "[", "x", "]"}]}]], "]"}]], "Input",
  CellChangeTimes->{{3.623165260827403*^9, 3.6231652714690113`*^9}}]
}], "Item",
 CellChangeTimes->{{3.6231652180569563`*^9, 3.6231652532129674`*^9}, {
  3.6231652909401255`*^9, 3.623165310556247*^9}, {3.6231653474743586`*^9, 
  3.623165371570737*^9}, {3.623167140897937*^9, 3.6231671637652445`*^9}, {
  3.623167197378167*^9, 3.623167197378167*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Map", "Subsubsection",
 CellChangeTimes->{{3.622937059935752*^9, 3.6229370601385517`*^9}}],

Cell[TextData[{
 "Define ",
 Cell[BoxData["list"], "Input"],
 " to be 10 elements where the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["j", "th"], TraditionalForm]]],
 " element is a list of the first ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]]],
 " primes (i.e. ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "2", "}"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], "..."}]}], "}"}]], "Input",
  CellChangeTimes->{{3.6229367361499243`*^9, 3.622936743280137*^9}}],
 ")"
}], "Item",
 CellChangeTimes->{{3.622923023856736*^9, 3.62292304855558*^9}, {
  3.622923115396098*^9, 3.6229231248809147`*^9}, {3.622936715932289*^9, 
  3.622936751799752*^9}, {3.622936849769125*^9, 3.622936853809532*^9}}],

Cell[BoxData[
 RowBox[{"list", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Prime", "[", "k", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "1", ",", "j"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6229230548755913`*^9, 3.6229230578551965`*^9}, 
   3.62292312226011*^9, {3.6229367560273595`*^9, 3.6229367690533824`*^9}}],

Cell[TextData[{
 "Take the ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Total", True->
     StyleBox["Total", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Total",
    ButtonNote->"paclet:ref/Total"],
   Annotation[#, "paclet:ref/Total", "Hyperlink"]& ]],
  CellChangeTimes->{3.6229367921834235`*^9}],
 " of each element in ",
 Cell[BoxData["list"], "Input"]
}], "Item",
 CellChangeTimes->{{3.623168348259994*^9, 3.6231683610317245`*^9}}],

Cell[BoxData[{
 RowBox[{"Total", "[", 
  RowBox[{"{", "2", "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Total", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "3"}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Total", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "3", ",", "5"}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6229368262110834`*^9, 3.622936837601104*^9}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.623168386235166*^9, 3.6231683863271713`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Map", True->
     StyleBox["Map", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Map",
    ButtonNote->"paclet:ref/Map"],
   Annotation[#, "paclet:ref/Map", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.6229367921834235`*^9, 3.622936907556187*^9}],
 " the function ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Total", True->
     StyleBox["Total", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Total",
    ButtonNote->"paclet:ref/Total"],
   Annotation[#, "paclet:ref/Total", "Hyperlink"]& ]],
  CellChangeTimes->{3.6229367921834235`*^9}],
 " on in each element in ",
 Cell[BoxData["list"], "Input"],
 "."
}], "Text",
 CellChangeTimes->{
  3.6231683835360117`*^9, {3.623168471672053*^9, 3.6231684955954213`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Using", " ", "Map"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Map", "[", 
   RowBox[{"Total", ",", "list"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6229369229571095`*^9, 3.6229369520249605`*^9}, 
   3.6231655303308177`*^9}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.623168395507696*^9, 3.623168395711708*^9}}],

Cell[TextData[{
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Map", True->
     StyleBox["Map", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Map",
    ButtonNote->"paclet:ref/Map"],
   Annotation[#, "paclet:ref/Map", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.6229367921834235`*^9, 3.622936907556187*^9}],
 " has a handy shorthand notation (/@)"
}], "Text",
 CellChangeTimes->{{3.6231684984215827`*^9, 3.6231685132294292`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Equivalently", ",", " ", 
    RowBox[{"using", " ", "the", " ", 
     RowBox[{"shorthand", " ", "/@"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Total", "/@", "list"}]}]], "Input",
 CellChangeTimes->{{3.6229369229571095`*^9, 3.6229369520249605`*^9}, 
   3.6231655303308177`*^9}],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{3.6231685181027083`*^9}],

Cell[TextData[{
 "You can use any function as the first argument of ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Map", True->
     StyleBox["Map", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Map",
    ButtonNote->"paclet:ref/Map"],
   Annotation[#, "paclet:ref/Map", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.6229367921834235`*^9, 3.622936907556187*^9}],
 ", including your own functions"
}], "Item",
 CellChangeTimes->{{3.6229368644507513`*^9, 3.6229368732823668`*^9}, {
  3.62293690375597*^9, 3.622936944443348*^9}, {3.622937976333972*^9, 
  3.6229379881431923`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"func", "[", "x_", "]"}], ":=", 
  RowBox[{"Total", "[", "x", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"func", "/@", "list"}]}], "Input",
 CellChangeTimes->{{3.622937990732797*^9, 3.622938006159625*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Clearing Values", "Subsubsection",
 CellChangeTimes->{{3.622937675728039*^9, 3.6229376793160453`*^9}}],

Cell[TextData[{
 "Just like we can ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Clear", True->
     StyleBox["Clear", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Clear",
    ButtonNote->"paclet:ref/Clear"],
   Annotation[#, "paclet:ref/Clear", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.6229377717134085`*^9}],
 " variables"
}], "Text",
 CellChangeTimes->{{3.622937720132717*^9, 3.6229377537879767`*^9}, {
  3.6231224704391885`*^9, 3.623122514105665*^9}, {3.6231684361920233`*^9, 
  3.6231684523869495`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"x", "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  SuperscriptBox["x", "2"], "+", "1"}]}], "Input",
 CellChangeTimes->{{3.622937733349941*^9, 3.6229377562995815`*^9}, {
  3.622937834088318*^9, 3.6229378359291215`*^9}}],

Cell[BoxData[{
 RowBox[{"Clear", "[", "x", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  SuperscriptBox["x", "2"], "+", "1"}]}], "Input",
 CellChangeTimes->{{3.6229377780470195`*^9, 3.622937778764621*^9}, {
  3.623122520674277*^9, 3.6231225208302765`*^9}}],

Cell[TextData[{
 "We can ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Clear", True->
     StyleBox["Clear", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Clear",
    ButtonNote->"paclet:ref/Clear"],
   Annotation[#, "paclet:ref/Clear", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.6229377717134085`*^9}],
 " functions"
}], "Text",
 CellChangeTimes->{{3.622937720132717*^9, 3.6229377537879767`*^9}, {
  3.6231224704391885`*^9, 3.623122514105665*^9}, {3.6231684361920233`*^9, 
  3.623168460481413*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"func", "[", "x_", "]"}], ":=", 
  SuperscriptBox["x", "2"]}], "\[IndentingNewLine]", 
 RowBox[{"func", "[", "5", "]"}]}], "Input",
 CellChangeTimes->{{3.6229376658064213`*^9, 3.622937667116824*^9}, {
  3.6229378494437456`*^9, 3.6229378623157682`*^9}}],

Cell[BoxData[{
 RowBox[{"Clear", "[", "func", "]"}], "\[IndentingNewLine]", 
 RowBox[{"func", "[", "5", "]"}]}], "Input",
 CellChangeTimes->{{3.6229376658064213`*^9, 3.622937667116824*^9}, {
  3.6229378494437456`*^9, 3.6229378623157682`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Expert Section: Functional Programming", "Subsubsection",
 CellChangeTimes->{{3.622936991411431*^9, 3.622936991598631*^9}, {
  3.62293802026305*^9, 3.6229380270022616`*^9}, {3.623165590055234*^9, 
  3.623165590806277*^9}}],

Cell[TextData[{
 "Consider ",
 Cell[BoxData["list"], "Input"]
}], "Text",
 CellChangeTimes->{{3.62316854522726*^9, 3.623168546259319*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"list", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"j", ",", 
      RowBox[{"Divisors", "[", "j", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.622938147976875*^9, 3.6229381551684875`*^9}, {
  3.6229382126011887`*^9, 3.622938223614808*^9}, {3.6231685539057565`*^9, 
  3.6231685685675945`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"{", "1", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "5"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "6"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "4", ",", "8"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "9"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "5", ",", "10"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.623168569284636*^9}]
}, Open  ]],

Cell[TextData[{
 "Create a function that can take in an element of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"j", ",", 
     RowBox[{"Divisors", "[", "j", "]"}]}], "}"}], TraditionalForm]]],
 " and transform it into ",
 Cell[BoxData[
  FormBox[
   RowBox[{"j", "+", 
    RowBox[{"Total", "[", 
     RowBox[{"Divisors", "[", "j", "]"}], "]"}]}], TraditionalForm]]]
}], "Item",
 CellChangeTimes->{{3.62316860869989*^9, 3.6231686411317453`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"func", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"x", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "+", 
   RowBox[{"Total", "[", 
    RowBox[{"x", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"func", "/@", "list"}]}], "Input",
 CellChangeTimes->{{3.62293839452951*^9, 3.622938424979164*^9}, {
  3.622938557004597*^9, 3.622938560437603*^9}}],

Cell[TextData[{
 "Equivalently, we could use a ",
 StyleBox["pure function",
  FontSlant->"Italic",
  FontVariations->{"Underline"->True}],
 " (the exact same idea as ",
 Cell[BoxData["func"], "Input"],
 "), but without actually defining any function"
}], "Item",
 CellChangeTimes->{{3.6231686495262256`*^9, 3.6231686764697666`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "+", 
   RowBox[{"Total", "[", 
    RowBox[{"#", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}]], "Input",
 CellChangeTimes->{{3.62293849041568*^9, 3.6229385146923227`*^9}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.623168681638062*^9, 3.623168681847074*^9}}],

Cell[TextData[{
 "Notice that:\n1. ",
 Cell[BoxData["#"], "Input"],
 " has replaced ",
 Cell[BoxData["x"], "Input",
  CellChangeTimes->{3.622938509541313*^9}],
 "\n2. An ampersand (&) goes at the end of the expression (denoting ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Function", True->
     StyleBox["Function", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Function",
    ButtonNote->"paclet:ref/Function"],
   Annotation[#, "paclet:ref/Function", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.6229385451933765`*^9}],
 ")"
}], "Text",
 CellChangeTimes->{{3.622938497139292*^9, 3.6229385825292425`*^9}, {
  3.623000849835845*^9, 3.623000853956081*^9}, {3.6231686965219135`*^9, 
  3.6231687261416073`*^9}}],

Cell[TextData[{
 "We can now apply this function just as we did ",
 Cell[BoxData["func"], "Input"],
 " above, "
}], "Text",
 CellChangeTimes->{{3.622938497139292*^9, 3.6229385825292425`*^9}, {
  3.623000849835845*^9, 3.623000853956081*^9}, {3.6231686965219135`*^9, 
  3.6231687261416073`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"#", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "+", 
    RowBox[{"Total", "[", 
     RowBox[{"#", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], "/@", "list"}]], "Input",
 CellChangeTimes->{{3.62293849041568*^9, 3.6229385146923227`*^9}, {
  3.6229385870396504`*^9, 3.6229385907212567`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["(!!!) Visualization", "Subsection",
 CellChangeTimes->{{3.6227563528320932`*^9, 3.622756354298496*^9}, 
   3.623167077049285*^9}],

Cell[CellGroupData[{

Cell["3D Interactivity", "Subsubsection",
 CellChangeTimes->{{3.6229997380074167`*^9, 3.6229997413770227`*^9}, {
  3.6231670650996017`*^9, 3.6231670764572515`*^9}}],

Cell[TextData[{
 "All 3D plots (",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Plot3D", True->
     StyleBox["Plot3D", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Plot3D",
    ButtonNote->"paclet:ref/Plot3D"],
   Annotation[#, "paclet:ref/Plot3D", "Hyperlink"]& ]],
  CellChangeTimes->{{3.6229922534284487`*^9, 3.6229922866409073`*^9}}],
 ", ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"ListPlot3D", True->
     StyleBox["ListPlot3D", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ListPlot3D",
    ButtonNote->"paclet:ref/ListPlot3D"],
   Annotation[#, "paclet:ref/ListPlot3D", "Hyperlink"]& ]],
  CellChangeTimes->{{3.6229922534284487`*^9, 3.6229922866409073`*^9}}],
 ", ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"ParametricPlot3D", True->
     StyleBox["ParametricPlot3D", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ParametricPlot3D",
    ButtonNote->"paclet:ref/ParametricPlot3D"],
   Annotation[#, "paclet:ref/ParametricPlot3D", "Hyperlink"]& ]],
  CellChangeTimes->{{3.6229922534284487`*^9, 3.6229922866409073`*^9}}],
 ", ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"ContourPlot3D", True->
     StyleBox["ContourPlot3D", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/ContourPlot3D",
    ButtonNote->"paclet:ref/ContourPlot3D"],
   Annotation[#, "paclet:ref/ContourPlot3D", "Hyperlink"]& ]],
  CellChangeTimes->{{3.6229922534284487`*^9, 3.6229922866565075`*^9}}],
 "...) enable you to ",
 Cell[BoxData[
  FormBox[
   TagBox[
    ButtonBox[
     PaneSelectorBox[{False->"\<\"rotate, pan, and zoom\"\>", True->
      StyleBox["\<\"rotate, pan, and zoom\"\>", "HyperlinkActive"]}, Dynamic[
       CurrentValue["MouseOver"]],
      BaseStyle->{"Hyperlink"},
      FrameMargins->0,
      ImageSize->Automatic],
     BaseStyle->"Link",
     ButtonData->"paclet:howto/RotateZoomAndPanGraphics",
     ButtonNote->"paclet:howto/RotateZoomAndPanGraphics"],
    Annotation[#, "paclet:howto/RotateZoomAndPanGraphics", "Hyperlink"]& ], 
   TraditionalForm]]],
 " into a graph."
}], "Text",
 CellChangeTimes->{{3.6229999901228604`*^9, 3.623000038906146*^9}, {
  3.623000091560239*^9, 3.623000098078451*^9}, {3.6230001399051247`*^9, 
  3.623000140232725*^9}}],

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"x", "+", 
     RowBox[{"y", "^", "2"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.622999947780386*^9, 3.6229999489035873`*^9}, 
   3.622999985957653*^9}],

Cell[BoxData[
 RowBox[{"sphericalGraphic", "[", "]"}]], "Input",
 CellChangeTimes->{{3.511787386305312*^9, 3.511787437090899*^9}, {
   3.5117875125288763`*^9, 3.511787561760871*^9}, {3.511787642765586*^9, 
   3.5117876820853987`*^9}, 3.51178786256079*^9, {3.611439736812147*^9, 
   3.611439738790147*^9}, 3.611440423396147*^9, {3.620932105812317*^9, 
   3.620932171996428*^9}, {3.6230002063359084`*^9, 3.6230002079895115`*^9}, {
   3.6230002470823803`*^9, 3.6230002579243994`*^9}}],

Cell[BoxData[
 RowBox[{"RegionPlot3D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"1", "\[LessEqual]", 
     RowBox[{"Norm", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", "1"}], "]"}]}], "&&", 
    RowBox[{
     RowBox[{"Norm", "[", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y", ",", "z"}], "}"}], "]"}], "\[LessEqual]", 
     "1"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"z", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"Directive", "[", 
     RowBox[{
      RowBox[{"Opacity", "[", "0.5", "]"}], ",", "Pink", ",", 
      RowBox[{"Specularity", "[", 
       RowBox[{"White", ",", "20"}], "]"}]}], "]"}]}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "60"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6231300770544*^9, 3.623130095733468*^9}},
 CellID->39481373]
}, Closed]],

Cell[CellGroupData[{

Cell["Exporting Plots", "Subsubsection",
 CellChangeTimes->{{3.623165887683257*^9, 3.6231658901583986`*^9}}],

Cell["\<\
You can export a plot (to PDF, PNG...) by right clicking on it and selecting \
\[OpenCurlyDoubleQuote]Save Graphic As...\[CloseCurlyDoubleQuote]\
\>", "Text",
 CellChangeTimes->{{3.6231669766885443`*^9, 3.623167007814325*^9}}],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6231658934245853`*^9, 3.623165898553879*^9}, 
   3.623166930227887*^9, {3.6231669723472967`*^9, 3.623166972916329*^9}}],

Cell[TextData[{
 "Or using ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Export", True->
     StyleBox["Export", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Export",
    ButtonNote->"paclet:ref/Export"],
   Annotation[#, "paclet:ref/Export", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{{3.6231670274084454`*^9, 3.623167044190406*^9}}]
}], "Text",
 CellChangeTimes->{{3.623167011383529*^9, 3.623167057641175*^9}, {
  3.623168766254902*^9, 3.623168769858108*^9}}],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<My Plot.pdf\>\"", ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", 
       RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6231659112056026`*^9, 3.623165912543679*^9}, {
  3.6231659686028852`*^9, 3.623165972161089*^9}, {3.623166959715574*^9, 
  3.6231669742574053`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Full Scope", "Subsubsection",
 CellChangeTimes->{{3.6229996687528944`*^9, 3.622999669720096*^9}}],

Cell["\<\
I\[CloseCurlyQuote]ll let the plots speak for themselves.  (You must have \
Internet connectivity for this to work)\
\>", "Text",
 CellChangeTimes->{{3.622756357702302*^9, 3.622756361555112*^9}, {
  3.6229996795969133`*^9, 3.6229997012663517`*^9}, {3.6231669083266344`*^9, 
  3.623166920099308*^9}}],

Cell[BoxData[
 RowBox[{"visualizationFunctions", "[", "]"}]], "Input",
 CellChangeTimes->{{3.6229994477861013`*^9, 3.622999450906107*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["(!!!) Pattern Matching", "Subsection",
 CellChangeTimes->{{3.622934626355345*^9, 3.6229346284769487`*^9}, {
  3.623167242171729*^9, 3.6231672430967827`*^9}}],

Cell[CellGroupData[{

Cell["Select", "Subsubsection",
 CellChangeTimes->{{3.6230012504882693`*^9, 3.623001251237071*^9}}],

Cell[TextData[{
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Select", True->
     StyleBox["Select", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Select",
    ButtonNote->"paclet:ref/Select"],
   Annotation[#, "paclet:ref/Select", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623000784592675*^9}],
 " takes a list as its first argument and a criteria (as a pure function) for \
its second argument. It selects the elements in the list that return True \
from the test"
}], "Text",
 CellChangeTimes->{{3.623000786722797*^9, 3.6230008707840433`*^9}, {
  3.623168786763075*^9, 3.6231688902049913`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Find", " ", "the", " ", "members", " ", "greater", " ", "than", " ", "2", 
    " ", "in", " ", "a", " ", "list"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
    RowBox[{
     RowBox[{"#", ">", "2"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6230007836526213`*^9, 3.6230007843816633`*^9}, {
  3.623000875401307*^9, 3.623000885951911*^9}, {3.623001135056205*^9, 
  3.623001141511819*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Find", " ", "the", " ", "even", " ", "members", " ", "in", " ", "a", " ", 
    "list"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
    RowBox[{
     RowBox[{"EvenQ", "[", "#", "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.623000891624235*^9, 3.623000896338505*^9}, {
  3.6230011256083813`*^9, 3.6230011333364*^9}}],

Cell["\<\
Of the first 100 Prime numbers, which ones have their units digit between 0 \
and 5?\
\>", "Item",
 CellChangeTimes->{{3.6230009465843787`*^9, 3.62300095796803*^9}, {
  3.623001018690503*^9, 3.623001028168045*^9}, {3.6230010964335113`*^9, 
  3.6230011073151407`*^9}, {3.623001177741699*^9, 3.623001208257969*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Enumerate", " ", "the", " ", "first", " ", "100", " ", "primes"}],
    " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Prime", "[", "j", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "100"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Select", " ", "the", " ", "primes", " ", "that", " ", "have"}], 
    "  ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Select", "[", 
    RowBox[{"data", ",", 
     RowBox[{
      RowBox[{"0", "\[LessEqual]", 
       RowBox[{
        RowBox[{"IntegerDigits", "[", "#", "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"-", "1"}], "]"}], "]"}], "\[LessEqual]", "5"}], "&"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6230009284473414`*^9, 3.623000931293504*^9}, {
  3.6230010738274593`*^9, 3.623001074735261*^9}, {3.623001157510455*^9, 
  3.62300116458547*^9}, {3.6230012100051727`*^9, 3.6230012286870265`*^9}, {
  3.623001311842595*^9, 3.623001336354661*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Explore: Primes", "Subsubsection",
 CellChangeTimes->{{3.623168918362602*^9, 3.623168925791027*^9}, {
  3.623168966323345*^9, 3.623168984675395*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "How many prime numbers are there between 1000 and 2000? (Hint: Use ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Select", True->
     StyleBox["Select", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Select",
    ButtonNote->"paclet:ref/Select"],
   Annotation[#, "paclet:ref/Select", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.6231690647429743`*^9}],
 " to find the desired primes and then use ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Length", True->
     StyleBox["Length", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Length",
    ButtonNote->"paclet:ref/Length"],
   Annotation[#, "paclet:ref/Length", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623169082251976*^9}],
 ")"
}], "Item",
 CellChangeTimes->{{3.6231689876245637`*^9, 3.623169002738428*^9}, {
  3.6231690556684556`*^9, 3.623169092406557*^9}}],

Cell[TextData[{
 "A perfect number is a positive integer that is equal to half the sum of its \
divisors. For example, the divisors of 6 (i.e. ",
 Cell[BoxData[
  RowBox[{"Divisors", "[", "6", "]"}]], "Input",
  CellChangeTimes->{{3.6231691760113387`*^9, 3.623169177454421*^9}}],
 ") are ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "6"}], "}"}]], "Output",
  CellChangeTimes->{3.6231691776234307`*^9}],
 ", so the sum of its divisors equals 12. What are the perfect numbers less \
than ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", "5"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "?"
}], "Item",
 CellChangeTimes->{{3.6231689876245637`*^9, 3.623169002738428*^9}, {
  3.6231691635056233`*^9, 3.623169232729583*^9}, {3.623169312788162*^9, 
  3.6231693304051695`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Expert Section: Position", "Subsubsection",
 CellChangeTimes->{{3.6231303670559874`*^9, 3.623130370346175*^9}, {
  3.6231689276551332`*^9, 3.6231689582498837`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Position", True->
     StyleBox["Position", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Position",
    ButtonNote->"paclet:ref/Position"],
   Annotation[#, "paclet:ref/Position", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623001552244596*^9}],
 " cannot take a pure function for its second argument like ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Select", True->
     StyleBox["Select", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Select",
    ButtonNote->"paclet:ref/Select"],
   Annotation[#, "paclet:ref/Select", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623001570356435*^9}],
 ". While this may appear to make ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Position", True->
     StyleBox["Position", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Position",
    ButtonNote->"paclet:ref/Position"],
   Annotation[#, "paclet:ref/Position", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.6230015882986774`*^9}],
 " significantly more limited, you can actually specify any pure function as \
a pattern, which means that the capabilities of these two functions is \
identical. Below, we recoup the result that we got above using Select"
}], "Text",
 CellChangeTimes->{{3.623001528564746*^9, 3.6230016233267565`*^9}, {
   3.623001684468286*^9, 3.6230017005729156`*^9}, {3.623001796768525*^9, 
   3.6230017994777317`*^9}, 3.623130371886264*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"data", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Prime", "[", "j", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", "100"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Select", " ", "the", " ", "primes", " ", "that", " ", "have"}], 
   "  ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"Prime", "/@", 
  RowBox[{"Flatten", "[", 
   RowBox[{"Position", "[", 
    RowBox[{"data", ",", 
     RowBox[{"f_", "/;", 
      RowBox[{"0", "\[LessEqual]", 
       RowBox[{
        RowBox[{"IntegerDigits", "[", "f", "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"-", "1"}], "]"}], "]"}], "\[LessEqual]", "5"}]}]}], "]"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.623001623903958*^9, 3.6230016735586643`*^9}}],

Cell[TextData[{
 "The second argument of ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Position", True->
     StyleBox["Position", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Position",
    ButtonNote->"paclet:ref/Position"],
   Annotation[#, "paclet:ref/Position", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623001552244596*^9}],
 " consists of:"
}], "Text",
 CellChangeTimes->{{3.623001702717124*^9, 3.623001745343813*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData["f_"], "Input"],
 " (Specifying that you want to consider every entry in ",
 Cell[BoxData["data"], "Input",
  CellChangeTimes->{{3.6230017662640576`*^9, 3.62300176648626*^9}}],
 " and call it ",
 Cell[BoxData["f"], "Input"],
 " within the pattern)"
}], "Item",
 CellChangeTimes->{{3.62300174873802*^9, 3.6230017815380926`*^9}}],

Cell[TextData[{
 Cell[BoxData["/;"], "Input",
  CellChangeTimes->{{3.623001783050696*^9, 3.623001783050696*^9}}],
 " (This ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Condition", True->
     StyleBox["Condition", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Condition",
    ButtonNote->"paclet:ref/Condition"],
   Annotation[#, "paclet:ref/Condition", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623001838386631*^9}],
 " states that we will only choose ",
 Cell[BoxData["f"], "Input"],
 " if it satisfies a test that will appear on the right of this ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Condition", True->
     StyleBox["Condition", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Condition",
    ButtonNote->"paclet:ref/Condition"],
   Annotation[#, "paclet:ref/Condition", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623001838386631*^9}],
 ")"
}], "Item",
 CellChangeTimes->{{3.62300174873802*^9, 3.6230018605998764`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"0", "\[LessEqual]", 
   RowBox[{
    RowBox[{"IntegerDigits", "[", "f", "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"-", "1"}], "]"}], "]"}], "\[LessEqual]", "5"}]], "Input"],
 " (The test that we require of any ",
 Cell[BoxData["f"], "Input"],
 ")"
}], "Item",
 CellChangeTimes->{{3.62300174873802*^9, 3.623001878673114*^9}}]
}, Closed]],

Cell[TextData[{
 "In general, you would want to use ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Select", True->
     StyleBox["Select", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Select",
    ButtonNote->"paclet:ref/Select"],
   Annotation[#, "paclet:ref/Select", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623000784592675*^9}],
 " when you want the entries satisfying a criteria in a list and ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Position", True->
     StyleBox["Position", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Position",
    ButtonNote->"paclet:ref/Position"],
   Annotation[#, "paclet:ref/Position", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623001552244596*^9}],
 " when you want the ",
 StyleBox["position",
  FontSlant->"Italic"],
 " of entries satisfying a criteria in a list. "
}], "Text",
 CellChangeTimes->{{3.623001883710125*^9, 3.623001977361732*^9}}],

Cell[TextData[{
 "Lastly, there is a function ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Cases", True->
     StyleBox["Cases", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Cases",
    ButtonNote->"paclet:ref/Cases"],
   Annotation[#, "paclet:ref/Cases", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.6230019682643127`*^9}],
 " that is identical to ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Select", True->
     StyleBox["Select", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Select",
    ButtonNote->"paclet:ref/Select"],
   Annotation[#, "paclet:ref/Select", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623000784592675*^9}],
 " except that it takes a pattern in its second argument (like Position does) \
instead of a pure function. This makes ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Cases", True->
     StyleBox["Cases", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Cases",
    ButtonNote->"paclet:ref/Cases"],
   Annotation[#, "paclet:ref/Cases", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.6230019682643127`*^9}],
 " faster than ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Select", True->
     StyleBox["Select", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Select",
    ButtonNote->"paclet:ref/Select"],
   Annotation[#, "paclet:ref/Select", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623000784592675*^9}],
 "."
}], "Text",
 CellChangeTimes->{{3.623001883710125*^9, 3.6230020164314165`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Numerical Integration", "Subsection",
 CellChangeTimes->{{3.6230240819895215`*^9, 3.62302408660913*^9}}],

Cell[CellGroupData[{

Cell["Numerical Integration: List Integration", "Subsubsection",
 CellChangeTimes->{{3.537812240343885*^9, 3.53781224077232*^9}}],

Cell["\<\
For numerical integration of a list of points, interpolate the points, then \
use NIntegrate\
\>", "Text",
 CellChangeTimes->{{3.5230400182490625`*^9, 3.5230400716264*^9}, {
  3.523040143253562*^9, 3.5230401702312593`*^9}, {3.523040482254459*^9, 
  3.523040482694503*^9}, {3.52311590005849*^9, 3.52311591332749*^9}, {
  3.5231162371916127`*^9, 3.5231162390607996`*^9}, {3.5231162821231055`*^9, 
  3.523116282576151*^9}, {3.5238389833968697`*^9, 3.5238389837299027`*^9}, {
  3.5238390537499037`*^9, 3.5238390539529247`*^9}, {3.614294143413864*^9, 
  3.614294145855004*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"y", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1.01"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.2", ",", "1.03"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.4", ",", "0.93"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.6", ",", "0.85"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.8", ",", "0.72"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0.57"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"f", "=", 
   RowBox[{"Interpolation", "[", "y", "]"}]}], ";"}], "\n", 
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{"f", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "1"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.52311600315449*^9, 3.52311608762749*^9}, {
   3.523116183965291*^9, 3.5231162062665205`*^9}, 3.6142941496442204`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Numerical Integration: Path Integration", "Subsubsection",
 CellChangeTimes->{{3.525036253762656*^9, 3.5250362587046556`*^9}, {
  3.537812244060875*^9, 3.537812244307788*^9}}],

Cell["For path (contour) integration, parameterize the path.", "Text",
 CellChangeTimes->{{3.5230400182490625`*^9, 3.5230400716264*^9}, {
  3.523040143253562*^9, 3.5230401702312593`*^9}, {3.523040482254459*^9, 
  3.523040482694503*^9}, {3.523116263404234*^9, 3.523116294516345*^9}, {
  3.523663306257018*^9, 3.5236633070170183`*^9}, {3.523839050193548*^9, 
  3.523839074281957*^9}}],

Cell[BoxData[{
 RowBox[{"Clear", "[", 
  RowBox[{"f", ",", "x", ",", "y", ",", "t", ",", "z"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"path", "[", "t_", "]"}], ":=", 
  RowBox[{"2", "+", 
   RowBox[{"Exp", "[", 
    RowBox[{"\[ImaginaryI]", " ", "t"}], "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{"f", "[", "z_", "]"}], ":=", 
  FractionBox[
   RowBox[{"Sin", "[", "z", "]"}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"z", "-", "2"}], ")"}], "^", "3"}]]}], "\n", 
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{"Norm", "@", 
      RowBox[{"f", "[", 
       RowBox[{"x", "+", 
        RowBox[{"I", "*", "y"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"ColorFunction", "\[Rule]", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
        RowBox[{"Hue", "@", 
         RowBox[{"Norm", "[", 
          RowBox[{"x", "+", 
           RowBox[{"I", " ", "y"}]}], "]"}]}]}], "]"}]}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Re", "[", "z", "]"}], ",", 
        RowBox[{"Im", "[", "z", "]"}], ",", 
        RowBox[{"Abs", "[", "z", "]"}]}], "}"}]}], ",", 
     RowBox[{"LabelStyle", "\[Rule]", "14"}], ",", 
     RowBox[{"PlotLabel", "\[Rule]", 
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"HoldForm", "[", 
         RowBox[{
          RowBox[{"Sin", "[", "z", "]"}], "/", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"z", "-", "2"}], ")"}], "^", "3"}]}], "]"}], ",", "14"}], 
       "]"}]}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0.5", ",", "3.5"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1.5"}], ",", "1.5"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0.", ",", "5"}], "}"}]}], "}"}]}]}], "]"}], ",", 
   RowBox[{"ParametricPlot3D", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "+", 
        RowBox[{"Cos", "[", "\[Theta]", "]"}]}], ",", 
       RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", 
       RowBox[{"Norm", "@", 
        RowBox[{"f", "[", 
         RowBox[{"2", "+", 
          RowBox[{"Cos", "[", "\[Theta]", "]"}], "+", 
          RowBox[{"I", "*", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}], "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", "0", ",", 
       RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Thickness", "[", "0.015", "]"}], ",", "Yellow"}], "}"}]}]}], 
    "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.523120706070339*^9, 3.523120711249857*^9}, 
   3.523120752263958*^9, {3.5231222099247093`*^9, 3.5231222122749443`*^9}, {
   3.612648688445294*^9, 3.6126486922936783`*^9}, {3.6126560794512973`*^9, 
   3.612656079817297*^9}, 3.614294205775431*^9}],

Cell["In this case, you can use NIntegrate or Residue", "Text",
 CellChangeTimes->{{3.6142942116217656`*^9, 3.614294217846122*^9}}],

Cell[BoxData[{
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"path", "[", "t", "]"}], "]"}], " ", 
    RowBox[{
     RowBox[{"path", "'"}], "[", "t", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}], "\n", 
 RowBox[{
  RowBox[{"2", "\[Pi]", " ", "\[ImaginaryI]", " ", 
   RowBox[{"Residue", "[", 
    RowBox[{
     RowBox[{"f", "[", "t", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "2"}], "}"}]}], "]"}]}], "//", "N"}]}], "Input",
 CellChangeTimes->{{3.5231207243291645`*^9, 3.523120775045236*^9}, {
   3.5231222265583725`*^9, 3.5231222312798448`*^9}, 3.523122358396555*^9, 
   3.614294223682455*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Numerical Integration: Vector Calculus", "Subsubsection",
 CellChangeTimes->{{3.525036263129656*^9, 3.525036265952656*^9}, {
  3.537812247564777*^9, 3.537812248467823*^9}}],

Cell["\<\
You can find the surface area and volume of any parameterizable surface or \
volume using vector calculus. For example, consider this surface\
\>", "Text",
 CellChangeTimes->{{3.6142943355198517`*^9, 3.614294353383874*^9}, {
  3.623131428178295*^9, 3.6231314441683235`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"2", "+", 
        RowBox[{"Cos", "[", "v", "]"}]}], ")"}], 
      RowBox[{"Cos", "[", "u", "]"}]}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"2", "+", 
        RowBox[{"Cos", "[", "v", "]"}]}], ")"}], 
      RowBox[{"Sin", "[", "u", "]"}]}], ",", 
     RowBox[{
      RowBox[{"Sin", "[", "v", "]"}], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"5", "/", "4"}], "-", 
        RowBox[{"Cos", "[", "u", "]"}]}], ")"}]}]}], "}"}]}], ";"}], "\n", 
 RowBox[{"ParametricPlot3D", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"u", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"v", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{3.614294333318726*^9},
 CellID->82874235],

Cell["Find it\[CloseCurlyQuote]s surface area", "Text",
 CellChangeTimes->{{3.614294499292219*^9, 3.6142945015003457`*^9}}],

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{"Norm", "[", 
    RowBox[{"Cross", "[", 
     RowBox[{
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", "u"}], "]"}], ",", 
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", "v"}], "]"}]}], "]"}],
     "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"u", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"v", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.523663578221018*^9, 3.5236635876513324`*^9}},
 CellID->309907506],

Cell["\<\
Find the enclosed volume using the divergence theorem \
(Gauss\[CloseCurlyQuote] theorem)\
\>", "Text",
 CellChangeTimes->{{3.614294505261561*^9, 3.614294514740103*^9}}],

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"{", 
      RowBox[{"x", ",", "y", ",", "z"}], "}"}], "3"], ".", 
    RowBox[{"Cross", "[", 
     RowBox[{
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", "u"}], "]"}], ",", 
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", "v"}], "]"}]}], 
     "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"u", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"v", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{3.523663644865053*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Application: Heat Equation/Inverse Function", "Subsection",
 CellChangeTimes->{{3.62302388399037*^9, 3.6230238873523765`*^9}, {
  3.6230323616751814`*^9, 3.6230323751344056`*^9}}],

Cell[CellGroupData[{

Cell["Heat Equation", "Subsubsection",
 CellChangeTimes->{{3.520684341970664*^9, 3.520684342982765*^9}, {
   3.5228691349194393`*^9, 3.5228691378538527`*^9}, 3.522869369670928*^9, 
   3.5228702505969276`*^9, 3.5230419767518935`*^9, {3.5231433198029714`*^9, 
   3.523143324221413*^9}, 3.5236581329288864`*^9, 3.5236589122742004`*^9, 
   3.5236592226690083`*^9, {3.5236710562761393`*^9, 3.523671058246336*^9}, {
   3.5237278624454746`*^9, 3.523727865490779*^9}, 3.5245925093679667`*^9, {
   3.5378125097662153`*^9, 3.537812510133005*^9}, {3.6126577372221527`*^9, 
   3.6126577799114213`*^9}, {3.6230239328394566`*^9, 3.6230239360530624`*^9}, 
   3.623032376663208*^9}],

Cell[TextData[{
 "Solve the Heat Equation for a the source (created below as ",
 Cell[BoxData["source"], "Input"],
 ")"
}], "Item",
 CellChangeTimes->{{3.6231698556952143`*^9, 3.623169884782878*^9}}],

Cell[TextData[{
 StyleBox["Example: Discretization of the steady-state 2D heat equation leads \
to linear equations: \n",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       SuperscriptBox["\[PartialD]", "2"], "u"}], 
      RowBox[{"\[PartialD]", 
       SuperscriptBox["x", "2"]}]], "+", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[PartialD]", "2"], "u"}], 
      RowBox[{"\[PartialD]", 
       SuperscriptBox["y", "2"]}]]}], "=", 
    RowBox[{
     RowBox[{"q", "\[Implies]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["u", 
          RowBox[{
           RowBox[{"i", "-", "1"}], ",", "j"}]], "-", 
         RowBox[{"2", 
          SubscriptBox["u", 
           RowBox[{"i", ",", "j"}]]}], "+", 
         SubscriptBox["u", 
          RowBox[{
           RowBox[{"i", "+", "1"}], ",", "j"}]]}], ")"}], "+", 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["u", 
          RowBox[{"i", ",", 
           RowBox[{"j", "-", "1"}]}]], "-", 
         RowBox[{"2", 
          SubscriptBox["u", 
           RowBox[{"i", ",", "j"}]]}], "+", 
         SubscriptBox["u", 
          RowBox[{"i", ",", 
           RowBox[{"j", "+", "1"}]}]]}], ")"}]}]}], "=", "q"}]}], 
   TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.490702551603752*^9, 3.4907025582194138`*^9}, {
   3.490702849424531*^9, 3.4907028539119797`*^9}, {3.497120594988701*^9, 
   3.49712059933357*^9}, {3.497120890124818*^9, 3.4971208921080165`*^9}, 
   3.4971213931896563`*^9, {3.497812344926695*^9, 3.4978124030913815`*^9}, 
   3.497812481295086*^9, {3.4978135089222484`*^9, 3.4978135452155056`*^9}, {
   3.4978137552348394`*^9, 3.497813808479767*^9}, {3.4978140200144863`*^9, 
   3.4978140205797124`*^9}, {3.5206843725317197`*^9, 3.520684382856752*^9}, {
   3.520684468522318*^9, 3.5206844800724726`*^9}, {3.5228663118868837`*^9, 
   3.5228663124259377`*^9}, {3.523664340083568*^9, 3.523664345785138*^9}, {
   3.52371885589791*^9, 3.523718906807*^9}, {3.5237249096452246`*^9, 
   3.5237249163688965`*^9}, {3.5237271135275908`*^9, 
   3.5237271347107086`*^9}, {3.5237274813053646`*^9, 
   3.5237274835675907`*^9}, {3.523727939615191*^9, 3.523727944175647*^9}, {
   3.523728177718999*^9, 3.52372817952818*^9}, {3.612657784519882*^9, 
   3.6126577867361035`*^9}, {3.614295124532981*^9, 3.614295172979752*^9}, 
   3.6230239247546425`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"grid", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"\"\<\>\"", ",", 
     RowBox[{"{", "6", "}"}], ",", 
     RowBox[{"{", "6", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"grid", "[", 
    RowBox[{"[", 
     RowBox[{"3", ",", "3"}], "]"}], "]"}], "=", 
   RowBox[{"Item", "[", 
    RowBox[{
     RowBox[{"Style", "[", 
      RowBox[{"\"\<\!\(\*Cell[TextData[Cell[BoxData[
FormBox[
RowBox[{\"+\", 
SubscriptBox[\"u\", 
RowBox[{\"i\", \",\", 
RowBox[{\"j\", \"+\", \"1\"}]}]]}], TraditionalForm]]]]]\)\>\"", ",", 
       RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], ",", 
     RowBox[{"Background", "\[Rule]", 
      RowBox[{"Lighter", "[", 
       RowBox[{"Blue", ",", "0.7"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"grid", "[", 
    RowBox[{"[", 
     RowBox[{"4", ",", "2"}], "]"}], "]"}], "=", 
   RowBox[{"Item", "[", 
    RowBox[{
     RowBox[{"Style", "[", 
      RowBox[{"\"\<\!\(\*Cell[TextData[Cell[BoxData[
FormBox[
RowBox[{\"+\", 
SubscriptBox[\"u\", 
RowBox[{
RowBox[{\"i\", \"-\", \"1\"}], \",\", \"j\"}]]}], TraditionalForm]]]]]\)\>\"",
        ",", 
       RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], ",", 
     RowBox[{"Background", "\[Rule]", 
      RowBox[{"Lighter", "[", 
       RowBox[{"Blue", ",", "0.7"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"grid", "[", 
    RowBox[{"[", 
     RowBox[{"4", ",", "3"}], "]"}], "]"}], "=", 
   RowBox[{"Item", "[", 
    RowBox[{
     RowBox[{"Style", "[", 
      RowBox[{"\"\<\!\(\*Cell[TextData[Cell[BoxData[
FormBox[
RowBox[{
RowBox[{\"-\", \"4\"}], 
SubscriptBox[\"u\", 
RowBox[{\"i\", \",\", \"j\"}]]}], TraditionalForm]]]]]\)\>\"", ",", 
       RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], ",", 
     RowBox[{"Background", "\[Rule]", "LightRed"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"grid", "[", 
    RowBox[{"[", 
     RowBox[{"5", ",", "3"}], "]"}], "]"}], "=", 
   RowBox[{"Item", "[", 
    RowBox[{
     RowBox[{"Style", "[", 
      RowBox[{"\"\<\!\(\*Cell[TextData[Cell[BoxData[
FormBox[
RowBox[{\"+\", 
SubscriptBox[\"u\", 
RowBox[{\"i\", \",\", 
RowBox[{\"j\", \"-\", \"1\"}]}]]}], TraditionalForm]]]]]\)\>\"", ",", 
       RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], ",", 
     RowBox[{"Background", "\[Rule]", 
      RowBox[{"Lighter", "[", 
       RowBox[{"Blue", ",", "0.7"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"grid", "[", 
    RowBox[{"[", 
     RowBox[{"4", ",", "4"}], "]"}], "]"}], "=", 
   RowBox[{"Item", "[", 
    RowBox[{
     RowBox[{"Style", "[", 
      RowBox[{"\"\<\!\(\*Cell[TextData[Cell[BoxData[
FormBox[
RowBox[{\"+\", 
SubscriptBox[\"u\", 
RowBox[{
RowBox[{\"i\", \"+\", \"1\"}], \",\", \"j\"}]]}], TraditionalForm]]]]]\)\>\"",
        ",", 
       RowBox[{"FontFamily", "\[Rule]", "\"\<Times\>\""}]}], "]"}], ",", 
     RowBox[{"Background", "\[Rule]", 
      RowBox[{"Lighter", "[", 
       RowBox[{"Blue", ",", "0.7"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", 
  RowBox[{"grid", ",", 
   RowBox[{"Frame", "\[Rule]", "All"}], ",", 
   RowBox[{"Alignment", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Center", ",", "Center"}], "}"}]}], ",", 
   RowBox[{"ItemSize", "\[Rule]", 
    RowBox[{"2.7", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"N", "@", "GoldenRatio"}]}], "}"}]}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.61429524147867*^9, 3.614295242052703*^9}, {
  3.6142952818049765`*^9, 3.614295311538677*^9}, {3.61429535686327*^9, 
  3.614295752675909*^9}, {3.614295787906924*^9, 3.6142958138554077`*^9}}],

Cell[TextData[StyleBox["Linear equations as a sparse array (linear solve has \
special methods for numerical arrays, which makes it extremely fast).", "Text",
 FontWeight->"Plain"]], "Text",
 CellChangeTimes->{{3.490702551603752*^9, 3.4907025582194138`*^9}, {
   3.490702849424531*^9, 3.4907028539119797`*^9}, {3.497120594988701*^9, 
   3.49712059933357*^9}, {3.497120890124818*^9, 3.4971208921080165`*^9}, 
   3.4971213931896563`*^9, {3.497812344926695*^9, 3.4978124030913815`*^9}, 
   3.497812481295086*^9, {3.4978135089222484`*^9, 3.4978135452155056`*^9}, {
   3.4978137552348394`*^9, 3.497813808479767*^9}, {3.4978140200144863`*^9, 
   3.4978140205797124`*^9}, {3.5206843725317197`*^9, 3.520684382856752*^9}, {
   3.520684468522318*^9, 3.5206844800724726`*^9}, {3.5228663118868837`*^9, 
   3.5228663124259377`*^9}, {3.523664340083568*^9, 3.523664345785138*^9}, {
   3.52371885589791*^9, 3.523718906807*^9}, {3.5237249096452246`*^9, 
   3.5237249163688965`*^9}, {3.5237271135275908`*^9, 3.523727226153852*^9}, {
   3.523727329603196*^9, 3.523727347087944*^9}, 3.5237274870749416`*^9, {
   3.5237276001972523`*^9, 3.523727600510284*^9}, {3.5237279912663555`*^9, 
   3.5237280052147503`*^9}, {3.612657575647997*^9, 3.612657619842416*^9}, {
   3.6126577140698376`*^9, 3.6126577322696576`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "30"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"eqns", "=", 
   RowBox[{"N", "[", 
    RowBox[{"SparseArray", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i_", ",", "j_", ",", "i_", ",", "j_"}], "}"}], "\[Rule]", 
         RowBox[{"-", "4"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i_", ",", "j1_", ",", "i_", ",", "j2_"}], "}"}], "/;", 
          RowBox[{
           RowBox[{"Abs", "[", 
            RowBox[{"j1", "-", "j2"}], "]"}], "\[Equal]", "1"}]}], "\[Rule]", 
         "1"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i1_", ",", "j_", ",", "i2_", ",", "j_"}], "}"}], "/;", 
          RowBox[{
           RowBox[{"Abs", "[", 
            RowBox[{"i1", "-", "i2"}], "]"}], "\[Equal]", "1"}]}], "\[Rule]", 
         "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "n", ",", "n", ",", "n"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"eqns", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"eqns", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.5236657053740835`*^9, 3.5236657139379396`*^9}, 
   3.5236657949730425`*^9, {3.523666292983839*^9, 3.5236662930338435`*^9}, {
   3.523666575050042*^9, 3.5236665750990477`*^9}, {3.523666715827119*^9, 
   3.5236667159961357`*^9}, {3.52366678404994*^9, 3.5236667982283583`*^9}, {
   3.5236671238146315`*^9, 3.5236671239336076`*^9}, {3.523667494518157*^9, 
   3.5236674948181567`*^9}, {3.523667725742119*^9, 3.5236677259111357`*^9}, {
   3.523668096064148*^9, 3.523668096195161*^9}, {3.523668348762415*^9, 
   3.5236683488714256`*^9}, {3.523669180157546*^9, 3.523669180256556*^9}, {
   3.523670905744087*^9, 3.523670941755688*^9}, {3.5237167468940306`*^9, 
   3.5237167574130826`*^9}, {3.523718730245346*^9, 3.5237187303153534`*^9}, 
   3.6126550931942973`*^9, {3.612655763631297*^9, 3.612655775093297*^9}, 
   3.612655849261297*^9, 3.6126559106462975`*^9, {3.612655955645297*^9, 
   3.612655980090297*^9}, {3.612656025697297*^9, 3.612656025775297*^9}, {
   3.6142950603643107`*^9, 3.614295066966688*^9}}],

Cell[TextData[{
 "View the overall structure of ",
 Cell[BoxData["eqns"], "Input"]
}], "Text",
 CellChangeTimes->{{3.614295073028035*^9, 3.6142950818635406`*^9}, 
   3.623131471483971*^9}],

Cell[BoxData[
 RowBox[{"MatrixPlot", "[", "eqns", "]"}]], "Input",
 CellChangeTimes->{{3.523716701153457*^9, 3.5237167300083427`*^9}, {
  3.523727250703307*^9, 3.5237272510393405`*^9}}],

Cell["Generate a heat source", "Text",
 CellChangeTimes->{{3.6142950860917826`*^9, 3.6142950897599916`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"source", "=", 
   RowBox[{
    RowBox[{"ImageData", "[", 
     RowBox[{"ColorConvert", "[", 
      RowBox[{
       RowBox[{"ImageResize", "[", 
        RowBox[{
         RowBox[{"ImageCrop", "[", 
          RowBox[{"Rasterize", "[", 
           RowBox[{"\"\<8\>\"", ",", 
            RowBox[{"ImageSize", "\[Rule]", "n"}]}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "n"}], "}"}]}], "]"}], ",", "\"\<Grayscale\>\""}],
       "]"}], "]"}], "-", "1"}]}], ";"}], "\n", 
 RowBox[{"ArrayPlot", "[", 
  RowBox[{"source", ",", 
   RowBox[{"ImageSize", "\[Rule]", "Small"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.523727272019438*^9, 3.523727279498186*^9}, {
   3.52372804021425*^9, 3.5237280432435527`*^9}, 3.6126576561000414`*^9, {
   3.6142950942392483`*^9, 3.6142950954643183`*^9}}],

Cell[TextData[StyleBox["Solve the discretized heat equations",
 FontWeight->"Plain"]], "Text",
 CellChangeTimes->{{3.490702551603752*^9, 3.4907025582194138`*^9}, {
   3.490702849424531*^9, 3.4907028539119797`*^9}, {3.497120594988701*^9, 
   3.49712059933357*^9}, {3.497120890124818*^9, 3.4971208921080165`*^9}, 
   3.4971213931896563`*^9, {3.497812344926695*^9, 3.4978124030913815`*^9}, 
   3.497812481295086*^9, {3.4978135089222484`*^9, 3.4978135452155056`*^9}, {
   3.4978137552348394`*^9, 3.497813808479767*^9}, {3.4978140200144863`*^9, 
   3.4978140205797124`*^9}, {3.5206843725317197`*^9, 3.520684382856752*^9}, {
   3.520684468522318*^9, 3.5206844800724726`*^9}, {3.5228663118868837`*^9, 
   3.5228663124259377`*^9}, {3.523664340083568*^9, 3.523664345785138*^9}, {
   3.52371885589791*^9, 3.523718906807*^9}, {3.5237249096452246`*^9, 
   3.5237249163688965`*^9}, {3.5237271135275908`*^9, 3.523727226153852*^9}, {
   3.523727329603196*^9, 3.523727347087944*^9}, 3.5237274870749416`*^9, {
   3.5237276001972523`*^9, 3.5237276370099335`*^9}, {3.5237277282980614`*^9, 
   3.523727733874619*^9}, 3.614295103656787*^9, {3.623131479800786*^9, 
   3.6231314800815864`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sol", "=", 
   RowBox[{"LinearSolve", "[", 
    RowBox[{"eqns", ",", 
     RowBox[{"Flatten", "[", "source", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"ListPlot3D", "[", 
  RowBox[{"Partition", "[", 
   RowBox[{"sol", ",", "n"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.5237273032435603`*^9, 3.523727306500886*^9}, {
   3.523727659070139*^9, 3.523727660937326*^9}, {3.523728104030631*^9, 
   3.5237281063938675`*^9}, 3.614295110134157*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Inverse Function", "Subsubsection",
 CellChangeTimes->{{3.6230238890683794`*^9, 3.623023890458782*^9}, {
   3.623023936756064*^9, 3.623023939127268*^9}, 3.623032378727412*^9}],

Cell[TextData[{
 "Given ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "(", "x", ")"}], TraditionalForm]]],
 ", find the inverse function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"inv", "(", "t", ")"}], TraditionalForm]]]
}], "Item",
 CellChangeTimes->{{3.614294867409274*^9, 3.6142948738226414`*^9}, {
  3.623169847028719*^9, 3.623169848482802*^9}}],

Cell[BoxData[{
 RowBox[{"Clear", "[", 
  RowBox[{"x", ",", "y", ",", "t"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"y", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"x", "^", "x"}], "+", "x"}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Inverse", " ", "function"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"inv", "[", "t_", "]"}], "/;", 
    RowBox[{"NumericQ", "[", "t", "]"}]}], ":=", 
   RowBox[{"x", "/.", 
    RowBox[{"FindRoot", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"y", "[", "x", "]"}], "\[Equal]", "t"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "1"}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Plot", " ", "the", " ", "funciton", " ", "and", " ", "inverse", " ", 
     "function"}], ",", " ", 
    RowBox[{
     RowBox[{
     "showing", " ", "how", " ", "they", " ", "mirror", " ", "along", " ", 
      "y"}], "=", "x"}]}], " ", "*)"}]}], "\n", 
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"inv", "[", "t", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0.894262523461635`", ",", "10"}], "}"}], ",", 
     RowBox[{"AxesOrigin", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}]}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "10"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "10"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "1"}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0.10381844430088655`", ",", "3"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{
       RowBox[{"ColorData", "[", "1", "]"}], "[", "2", "]"}]}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{"x", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Black", ",", "Dashed"}], "}"}]}]}], "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.523040039359174*^9, 3.523040043599598*^9}, {
  3.52304023394263*^9, 3.5230402593351693`*^9}, {3.5230402953117666`*^9, 
  3.523040295706806*^9}, {3.523040416152849*^9, 3.5230404195871925`*^9}, {
  3.614294876491794*^9, 3.6142949039133625`*^9}, {3.6231302756407585`*^9, 
  3.623130282186133*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Expert Section: Speed Demons - Making Code Run Faster", "Subsection",
 CellChangeTimes->{{3.623023738447511*^9, 3.623023744722722*^9}, {
  3.623023992122962*^9, 3.6230240245352197`*^9}}],

Cell[CellGroupData[{

Cell["Use Floating-Point Numbers Often and Early", "Subsubsection",
 CellChangeTimes->{{3.6043477971895027`*^9, 3.604347805388322*^9}}],

Cell[TextData[{
 "Compile forces numerical numbers (or integers), and by explicitly removing \
symbolics you can get a significant speedup. The basic hierarchy is:\n",
 StyleBox["Symbolics",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" ",
  FontWeight->"Bold"],
 StyleBox["is slower than ",
  FontSlant->"Italic"],
 StyleBox["Integers and Reals",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" ",
  FontWeight->"Bold"],
 StyleBox["is slower than",
  FontSlant->"Italic"],
 StyleBox[" ",
  FontWeight->"Bold"],
 StyleBox["Reals",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}]
}], "Text",
 CellChangeTimes->{{3.60435823318904*^9, 3.604358242276949*^9}, {
  3.604358293756921*^9, 3.604358329658739*^9}, {3.6043596635637083`*^9, 
  3.6043596937817087`*^9}, {3.6044238357438445`*^9, 3.604423859017172*^9}, {
  3.6044244489244547`*^9, 3.6044245675234547`*^9}, {3.623131493476571*^9, 
  3.6231314953369746`*^9}}],

Cell["\<\
As a general rule, do not be more accurate than you need to be (i.e. use \
reals).\
\>", "Text",
 CellChangeTimes->{{3.604360306645398*^9, 3.6043603193736706`*^9}}],

Cell[TextData[{
 "By default, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " keeps around 16 digits of Precision (don\[CloseCurlyQuote]t be fooled \
because we only show 6!) Don\[CloseCurlyQuote]t put too many digits behind \
the decimal point. If you want to use more than 16, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will assume that you want more precision and will treat the computation \
essentially like it does for Integers."
}], "Text",
 CellChangeTimes->{{3.604152737581317*^9, 3.604152765413909*^9}, {
  3.6043479895873623`*^9, 3.604347996667362*^9}, {3.604348033343362*^9, 
  3.604348041974362*^9}, {3.6043597038547087`*^9, 3.6043597090617085`*^9}}],

Cell[BoxData[{
 RowBox[{"ClearSystemCache", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"N", "[", 
   RowBox[{"Det", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"1", "/", 
       RowBox[{"(", 
        RowBox[{"1.", "+", 
         RowBox[{"Abs", "[", 
          RowBox[{"i", "-", "j"}], "]"}]}], ")"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1.", ",", "150."}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1.", ",", "150."}], "}"}]}], "]"}], "]"}], "]"}], "//",
   "Timing"}], "\[IndentingNewLine]", 
 RowBox[{"ClearSystemCache", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"N", "[", 
   RowBox[{"Det", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"1", "/", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"Abs", "[", 
          RowBox[{"i", "-", "j"}], "]"}]}], ")"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "150"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", "150"}], "}"}]}], "]"}], "]"}], "]"}], "//",
   "Timing"}]}], "Input",
 CellChangeTimes->{{3.604347814377221*^9, 3.6043478347352567`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"N", "@", 
     RowBox[{"Nest", "[", 
      RowBox[{
       RowBox[{
        SqrtBox[
         RowBox[{"1", "+", "#"}]], "&"}], ",", "2.", ",", "1000"}], "]"}]}], 
    ",", 
    RowBox[{"{", "100", "}"}]}], "]"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"N", "@", 
     RowBox[{"Nest", "[", 
      RowBox[{
       RowBox[{
        SqrtBox[
         RowBox[{"1", "+", "#"}]], "&"}], ",", "2", ",", "1000"}], "]"}]}], 
    ",", 
    RowBox[{"{", "100", "}"}]}], "]"}], "//", "Timing"}]}], "Input",
 CellChangeTimes->{{3.604347864981281*^9, 3.6043478900067835`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Speedup Computation using Interpolation", "Subsubsection",
 CellChangeTimes->{{3.520684341970664*^9, 3.520684342982765*^9}, {
   3.5228691349194393`*^9, 3.5228691378538527`*^9}, 3.522869369670928*^9, 
   3.522869406036928*^9, 3.522870253650928*^9, {3.522870388741562*^9, 
   3.5228703934930367`*^9}, {3.5244164923103533`*^9, 
   3.5244164970963535`*^9}, {3.52443637028642*^9, 3.5244363831107016`*^9}, 
   3.5245940853956747`*^9, {3.5250944815526485`*^9, 3.525094486796173*^9}, {
   3.6142964515778837`*^9, 3.614296456222149*^9}}],

Cell["\<\
Often times, especially when you have functions built up on each other, you \
can get very costly functions that are expensive to compute. Often, it pays \
off to create fast, pre-computed functions.\
\>", "Text",
 CellChangeTimes->{{3.522751422276389*^9, 3.5227514349348793`*^9}, {
   3.522753668237856*^9, 3.522753668780615*^9}, {3.5227548539099083`*^9, 
   3.522754880449562*^9}, 3.5244165016463537`*^9, {3.5244364203514256`*^9, 
   3.524436438650255*^9}, 3.524576992005046*^9, {3.6142964600313673`*^9, 
   3.614296481817613*^9}}],

Cell[TextData[{
 "A common problem in astronomy is that you get a 2D picture and you want to \
try and original 3D picture from it. Here we have the original image and its \
smoothed out 2D surface density ",
 Cell[BoxData[
  FormBox[
   RowBox[{"s", "(", "r", ")"}], TraditionalForm]]],
 " (the contour plot). One easy way to re-create the 3D picture is to assume \
a spherically-symmetric picture and to calculate its density ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Rho]", "(", "r", ")"}], TraditionalForm]]],
 " based on ",
 Cell[BoxData[
  FormBox[
   RowBox[{"s", "(", "r", ")"}], TraditionalForm]]],
 ". There is a well known formula for this. Let\[CloseCurlyQuote]s take this \
example ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"s", "(", "r", ")"}], "=", 
    SuperscriptBox["10", 
     RowBox[{"-", 
      SuperscriptBox["r", "0.3"]}]]}], TraditionalForm]]],
 ":"
}], "Text",
 CellChangeTimes->{{3.524569919311824*^9, 3.524569981534045*^9}, {
  3.5245722187177505`*^9, 3.52457222041392*^9}, {3.6126613461770353`*^9, 
  3.6126614614695635`*^9}, {3.612662069363347*^9, 3.6126620817885895`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"s", "[", "r_", "]"}], ":=", 
  RowBox[{"10", "^", 
   RowBox[{"-", 
    SuperscriptBox["r", "0.3"]}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Rho]", "[", "r_", "]"}], "/;", 
   RowBox[{"r", ">", "0"}]}], ":=", 
  RowBox[{
   RowBox[{"-", 
    FractionBox["1", "\[Pi]"]}], 
   RowBox[{"NIntegrate", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"s", "[", "t", "]"}], ",", "t"}], "]"}], 
      SqrtBox[
       RowBox[{
        SuperscriptBox["t", "2"], "-", 
        SuperscriptBox["r", "2"]}]]], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "r", ",", "\[Infinity]"}], "}"}]}], 
    "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.524570162180108*^9, 3.5245702510209913`*^9}, {
   3.5245703134022284`*^9, 3.5245703291107993`*^9}, {3.52457036141803*^9, 
   3.524570363212209*^9}, {3.5245704049553833`*^9, 3.5245704069075785`*^9}, 
   3.6142964895270543`*^9}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Rho]", "(", "r", ")"}], TraditionalForm]]],
 " is relatively expensive function. It takes a few seconds just to plot it; \
using \[Rho](r) would really slow down calculations:"
}], "Text",
 CellChangeTimes->{{3.524572109528833*^9, 3.52457211789767*^9}, {
  3.5245763492407756`*^9, 3.5245763552933807`*^9}, {3.612661536033019*^9, 
  3.6126615630447206`*^9}}],

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"\[Rho]", "[", "r", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"r", ",", "1", ",", "100"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.524570969895876*^9, 3.524571026703556*^9}, 
   3.52457106944483*^9}],

Cell[TextData[{
 "Pre-interpolate ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Rho]", "(", "r", ")"}], TraditionalForm]]],
 " over a range of values:"
}], "Text",
 CellChangeTimes->{{3.524569919311824*^9, 3.524569981534045*^9}, {
  3.524570943183205*^9, 3.5245709578026667`*^9}}],

Cell[BoxData[
 RowBox[{"\[Rho]func", "=", 
  RowBox[{"FunctionInterpolation", "[", 
   RowBox[{
    RowBox[{"\[Rho]", "[", "r", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"r", ",", "1", ",", "100"}], "}"}], ",", 
    RowBox[{"MaxRecursion", "\[Rule]", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.524570610824082*^9, 3.524570632123082*^9}, {
  3.524570681435082*^9, 3.524570730324082*^9}}],

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"\[Rho]func", "[", "r", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"r", ",", "1", ",", "100"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{3.52457107224111*^9}],

Cell["The interpolation is fast enough to use in other functions:", "Text",
 CellChangeTimes->{{3.524576364807332*^9, 3.5245763705109024`*^9}, {
  3.5245772475896015`*^9, 3.5245772717340155`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"mass", "[", "r_", "]"}], "/;", 
   RowBox[{"r", ">", "0"}]}], ":=", 
  RowBox[{"NIntegrate", "[", 
   RowBox[{
    RowBox[{"4", "\[Pi]", " ", 
     SuperscriptBox["t", "2"], 
     RowBox[{"\[Rho]func", "[", "t", "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "r"}], "}"}]}], "]"}]}], "\n", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"mass", "[", "r", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"r", ",", "0", ",", "100"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.5245721546523447`*^9, 3.5245721845153303`*^9}, {
   3.524577141545998*^9, 3.524577183480191*^9}, {3.524577218851728*^9, 
   3.5245772192097635`*^9}, 3.6142965320094843`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Replace + Level Spec trumps ReplaceAll", "Subsubsection",
 CellChangeTimes->{{3.6049442996858497`*^9, 3.6049443172716084`*^9}}],

Cell["\<\
Even when there are barely any other levels to check, Replace is much faster \
than ReplaceAll. Because of this, it is a real shame that the \
\[OpenCurlyDoubleQuote]/.\[CloseCurlyDoubleQuote] notation makes it so easy \
to use ReplaceAll\
\>", "Text",
 CellChangeTimes->{{3.604945623213009*^9, 3.6049456586544647`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Replace", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"10", ",", 
       RowBox[{"{", 
        SuperscriptBox["10", "7"], "}"}]}], "]"}], ",", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"-", "1"}]}], ",", 
     RowBox[{"{", "1", "}"}]}], "]"}], ";"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ReplaceAll", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{"10", ",", 
       RowBox[{"{", 
        SuperscriptBox["10", "7"], "}"}]}], "]"}], ",", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"-", "1"}]}]}], "]"}], ";"}], "//", "Timing"}]}], "Input",
 CellChangeTimes->{{3.604945549972334*^9, 3.604945604741856*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Thread trumps Map", "Subsubsection",
 CellChangeTimes->{{3.6038288597778344`*^9, 3.6038288617056417`*^9}, {
  3.6038291924124355`*^9, 3.6038291931084356`*^9}}],

Cell["Thread is a superior form of Map", "Text",
 CellChangeTimes->{{3.6038288646493473`*^9, 3.6038288789589157`*^9}, {
  3.603828944892322*^9, 3.6038289450043106`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"list", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "n"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "2", ",", "1000000"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ClearSystemCache", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Thread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], "\[DirectedEdge]", "list"}], ",", 
     "List", ",", 
     RowBox[{"-", "1"}]}], "]"}], ";"}], "//", "Timing"}], "\n", 
 RowBox[{"ClearSystemCache", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], "\[DirectedEdge]", "#"}], "&"}], "/@", 
    "list"}], ";"}], "//", "Timing"}]}], "Input",
 CellChangeTimes->{{3.603828904596352*^9, 3.6038289375030613`*^9}, {
  3.603830170913154*^9, 3.603830207360799*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Cases trumps Select", "Subsubsection",
 CellChangeTimes->{{3.6038288899978123`*^9, 3.6038288917966323`*^9}, 
   3.6038291962924356`*^9}],

Cell["Cases is superior to Select", "Text",
 CellChangeTimes->{{3.6038288928525267`*^9, 3.6038288977720346`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"list", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{"10", ",", 
     RowBox[{"{", 
      RowBox[{"1000000", ",", "2"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ClearSystemCache", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Cases", "[", 
    RowBox[{"list", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "_"}], "}"}]}], "]"}], ";"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{"ClearSystemCache", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Select", "[", 
    RowBox[{"list", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "0"}], "&"}]}], "]"}], 
   ";"}], "//", "Timing"}]}], "Input",
 CellChangeTimes->{{3.603829221477435*^9, 3.603829255293435*^9}, {
  3.6038293466444354`*^9, 3.6038293517554355`*^9}, {3.6038294678494353`*^9, 
  3.6038294700734353`*^9}, {3.6038295574764357`*^9, 3.6038295700284357`*^9}, {
  3.603829671055435*^9, 3.6038296726224356`*^9}, {3.603830161284191*^9, 
  3.6038301623642993`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Sow/Reap trumps AppendTo", "Subsubsection",
 CellChangeTimes->{{3.6043599180735445`*^9, 3.6043599253512726`*^9}}],

Cell["\<\
You should build a large list using Sow and Reap because AppendTo has to \
rebuild the entire list every time.\
\>", "Text",
 CellChangeTimes->{{3.6043599288486223`*^9, 3.6043599458803253`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"data", "=", 
    RowBox[{
     RowBox[{"Reap", "[", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"Sow", "[", 
         RowBox[{"RandomReal", "[", "x", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", "40000"}], "}"}]}], "]"}], "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "//", 
  "Timing"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"data", "=", 
    RowBox[{"{", "}"}]}], ";", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{"data", ",", 
       RowBox[{"RandomReal", "[", "x", "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "40000"}], "}"}]}], "]"}], ";"}], "//", 
  "Timing"}]}], "Input",
 CellChangeTimes->{{3.524373834570425*^9, 3.524373855006461*^9}, {
  3.5243739066581516`*^9, 3.5243739529434333`*^9}, {3.52777982410183*^9, 
  3.5277798557854853`*^9}, {3.5303607149984503`*^9, 3.530360719912459*^9}, {
  3.6043599512828655`*^9, 3.6043599574644833`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Graphics - Multi-Object Syntax", "Subsubsection",
 CellChangeTimes->{3.6182435575689898`*^9, 3.61824363739433*^9, 
  3.6182441717888684`*^9}],

Cell["\<\
Whenever possible, it always pays to let primitives support multiple objects. \
This is also helpful with Graphics objects such as Point, Line, Polygon, \
Sphere, Tube...\
\>", "Text",
 CellChangeTimes->{{3.6182435601273937`*^9, 3.6182435641990013`*^9}, {
  3.618243601545467*^9, 3.618243633275923*^9}, {3.6182436802008047`*^9, 
  3.618243695582432*^9}}],

Cell[BoxData[{
 RowBox[{"bad", "=", 
  RowBox[{"Graphics3D", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Point", "[", 
      RowBox[{"{", 
       RowBox[{"i", ",", "0", ",", "0"}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1000"}], "}"}]}], "]"}], "]"}]}], "\n", 
 RowBox[{"good", "=", 
  RowBox[{"Graphics3D", "[", 
   RowBox[{"Point", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1000"}], "}"}]}], "]"}], "]"}], "]"}]}], "\n", 
 RowBox[{"ByteCount", "[", "bad", "]"}], "\n", 
 RowBox[{"ByteCount", "[", "good", "]"}]}], "Input",
 CellChangeTimes->{{3.525532226393148*^9, 3.525532257999943*^9}, {
  3.5255322993632927`*^9, 3.5255323300520353`*^9}, {3.618243576117422*^9, 
  3.6182435897674465`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Graphics - Numericize", "Subsubsection",
 CellChangeTimes->{{3.6182442352965803`*^9, 3.6182442414585905`*^9}}],

Cell["\<\
The visualization functions only handle machine-precision numbers. If you \
plug in exact values, the Front end will transform them into Machine \
precision, but it will also keep the original exact numbers so that if you \
hit your command with InputForm you can recover it completely accurately. You \
can see this play out using ToBoxes.\
\>", "Text",
 CellChangeTimes->{{3.537814494125386*^9, 3.537814494355901*^9}, {
  3.6125829621140547`*^9, 3.612583041725015*^9}}],

Cell[BoxData[
 RowBox[{"ToBoxes", "[", 
  RowBox[{"Graphics3D", "[", 
   RowBox[{"Line", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        FractionBox["1", "2"], ",", 
        FractionBox["1", "3"], ",", 
        FractionBox[
         SqrtBox["5"], "2"]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["10", "3"], ",", "1.5", ",", "\[Pi]"}], "}"}]}], "}"}], 
    "]"}], "]"}], "]"}]], "Input"],

Cell["\<\
If you don\[CloseCurlyQuote]t need to recover your original input, you can \
numericize your input beforehand, preventing this caching of your exact input\
\>", "Text",
 CellChangeTimes->{{3.612583053612204*^9, 3.612583077669609*^9}}],

Cell[BoxData[
 RowBox[{"ToBoxes", "[", 
  RowBox[{"Graphics3D", "[", 
   RowBox[{"Line", "[", 
    RowBox[{"N", "@", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         FractionBox["1", "2"], ",", 
         FractionBox["1", "3"], ",", 
         FractionBox[
          SqrtBox["5"], "2"]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         FractionBox["10", "3"], ",", "1.5", ",", "\[Pi]"}], "}"}]}], "}"}]}],
     "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6125829516890125`*^9, 3.61258295186303*^9}}],

Cell["\<\
Therefore, numericizing can make a big difference, so use N freely with \
Graphics.\
\>", "Text",
 CellChangeTimes->{{3.6182442163425465`*^9, 3.6182442285105677`*^9}}],

Cell[BoxData[{
 RowBox[{"bad", "=", 
  RowBox[{"Graphics3D", "[", 
   RowBox[{"BSplineCurve", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
        RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", 
        FractionBox["\[Theta]", "4"]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Theta]", ",", "0", ",", 
        RowBox[{"2", " ", "\[Pi]"}], ",", 
        FractionBox[
         RowBox[{"2", " ", "\[Pi]"}], "20"]}], "}"}]}], "]"}], "]"}], 
   "]"}]}], "\n", 
 RowBox[{"good", "=", 
  RowBox[{"Graphics3D", "[", 
   RowBox[{"BSplineCurve", "[", 
    RowBox[{"N", "@", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
         RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", 
         FractionBox["\[Theta]", "4"]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\[Theta]", ",", "0", ",", 
         RowBox[{"2", " ", "\[Pi]"}], ",", 
         FractionBox[
          RowBox[{"4", " ", "\[Pi]"}], "20"]}], "}"}]}], "]"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ByteCount", "[", "bad", "]"}], "\n", 
 RowBox[{"ByteCount", "[", "good", "]"}]}], "Input",
 CellChangeTimes->{{3.525513868828619*^9, 3.5255139215891685`*^9}, {
  3.525514025059859*^9, 3.5255140404509363`*^9}, {3.5255140927223883`*^9, 
  3.5255140931314707`*^9}, {3.5255141688427725`*^9, 3.525514169039792*^9}, {
  3.6182443319387493`*^9, 3.6182443602059994`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["(!!!) Image Processing", "Subsection",
 CellChangeTimes->{{3.6229340603857474`*^9, 3.6229340620237503`*^9}, {
  3.6231672791148424`*^9, 3.62316727994989*^9}}],

Cell[CellGroupData[{

Cell["Overview", "Subsubsection",
 CellChangeTimes->{{3.6230026336209984`*^9, 3.6230026344321995`*^9}}],

Cell[TextData[{
 "In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", ",
 StyleBox["everything",
  FontVariations->{"Underline"->True}],
 " is an object!"
}], "Text",
 CellChangeTimes->{{3.6230026308119936`*^9, 3.623002672947068*^9}, {
  3.623169902099869*^9, 3.623169902681902*^9}}],

Cell[BoxData[
 RowBox[{"Expand", "[", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"1", "+", "x"}], ")"}], "3"], "]"}]], "Input",
 CellChangeTimes->{{3.62300267382067*^9, 3.623002678770879*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"plot", "=", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", 
       RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Expand", "[", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"1", "+", "plot"}], ")"}], "3"], "]"}]}], "Input",
 CellChangeTimes->{{3.6230026879446945`*^9, 3.623002701303319*^9}}],

Cell["\<\
Crazy, useless, a deficiency in the system...? Perhaps these were all true, \
until Image Processing came along and fit perfectly into the system.\
\>", "Text",
 CellChangeTimes->{{3.623002742229286*^9, 3.623002768614933*^9}, {
  3.6231699180257797`*^9, 3.623169927055296*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Applications - Automate Everything", "Subsubsection",
 CellChangeTimes->{{3.6230026376790056`*^9, 3.6230026386150074`*^9}, 
   3.6230029039962816`*^9, {3.623002998999853*^9, 3.623003005680665*^9}, 
   3.6231672815629826`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Find", " ", "the", " ", "cells", " ", "within", " ", "an", " ", "image"}],
    " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"i", " ", "=", " ", 
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1:eJxMvNd2VFu2rrnLXNQj1G09StUjnHqCc1qrutk7c4F8eB8zpvczvPdW3gsB
AkkgPAgQAoRASIA8bq2VufO0Vn+fQWad1vqKNhULUMScY3zj/3vvY/wf/+23
//L//s//9m//Nvi/4eW//NfR/3Ng4L86/u//FT/8X46h/+e//S+4+N//p3/7
twr+o2tPI+ysBsfKdtQC7k7YNxX1z0T9c0xgIRZcZIMLbGCe9c+y3mnWMxlz
92KuTszVZZ1dztUVXOOya0bzLFmB9Uxsu6R8qKufW8ppR73sqT8otJ899fu4
+g2v+HFc+97Vv7X0ry39omkd16wPZe1lTnyQiN0yIte10KISmJV8U4J3kveM
s25Ej3V1Y45ObLQTG+lyY11htCeOTcrOWdWzbATWEsyDjLhT0A4qxpeqcVaz
zqrWeSV+Vkoc5Y0XCWFdjSyIgSnO04t5ugjG04v6pmKB2VhwPoYvGFpmQ6tc
+AYXuc5FVmORFfv7zsR8k/iazGiTGa7HhhrsUI0drnEjDWGkLY1NqO7lePhe
lt8tywc15UtDPcVXbivnXeWiY0dXOeuq5x31rKWetbXTtnrWUS+62lkH1/pp
Sztvq+dt/byln7WM04Z+WtfOGgbipGEc18zPVf1jRced2S/Jb4rSbkHayUkv
c9JOHtd4R3lb1PaL2oei/rGsHpa1TxXjqKJ9LKkfi9pRSfuEqOiHZfVjSTmk
N/XDonlUNo7K+qeK9rli2GEel/WTKsI8rZlnNeO8btLdq8RPyonPJfNNTtqK
R5cU/6Tg6XLOFuts0+N2T4q+OSl0Q4vdsYQnKfllWtvL6gcF87BoHSEK5oes
9S5pvLa0F7r0SGbW+cByzD3FDDejV0uRv+TD/54L/0cu8h/FyF9xY6d5/6bC
vbCUvYx+kDc/FeOfEQXrS9E4KVpf8olP+eRhPnmQs/Yyxpu0vpNSnifFxwl+
y+I2LGbdZG7FmVuJ2O0kczseW0+wd5L8/YzwKCs+y6kvc/p2Vr6X5G6akSU9
MKt6J2QXHl9TGqsJoxVxpMyPVNnRGudo8I4G52wLro7oxHieVN0TindS8Uyr
7hnFg5E2q7pnNe+M4ZkxvbOWd8ai17mEfzEdvJaJ3s6z90rSy5r2vmV86ein
Hf2io30d17+Oa9+6CONrz/zaMy47xkXbuGxrFy39c117VxWeFKK30oHFuHtS
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
qBu1QTfWjji6EWcv7JkIeyYjCO9UxD0RdvUAvZCjGRypBkZgt4vhK4WIzbrY
QI0baktjc5p/MxnbKYjvy/JRFbrO3tYBUdeUz+3evwt7B8clZao1ykvb8b2n
f7dff3R1Wqrw4JpYoeL2CmW+zcFRxm5aQag7qskKpOhAOeIYgnJHlIepE98g
/LAcU6GwygzBq1ZieIXbGgLlqvxQXRxpiaPjimveCG+kuOc5lRR4xS6/VhIX
5cSXkgkPvpmIrmh+eLoJ6u5ztgVHS3B2RPeE7JtTQ7Cu6xb/MCE/T+mvM8ab
jL6b1l+m1CcJ6b7F2xYmvEJFCpKF05pnVvctWP4VmJGMtFOCqaQiwilA1zQv
sRDbLb7nLeusiVfabnBctaNifqlYX8qmnYSPfyzG93PUP7Cd5h4ko+sWJYWg
x2YU75TqnlSd44pjXHVAWSHGVeek7gb0Fkz/tXj4VoK5k+QepvlHaf5Birsb
Zzas6G0rumZGbxrhG0C3Fu1Pt02dvatz9zThgSY+1PEq3Af3ZG5dYm4I4WXe
P0vcgAUYJdbF7KZi7kqBv1ISrlTlYbBuIRG+l5fe1rRPYJ3dDPzVlnN9K/rd
3gEBiH23k3Lwqr/blVYIuZ+4nsI7xLrfJ+zyq114vSRBaMvCzq+2mZMabguw
rz5Lg9JjHXGgzF2x3etvOQqwbhiKrsm4xyn9HpiDIuUgSjFhA3MctVXQ9itS
/k5M/0nBvyBF1jThiaXvJRMfkonXlrKlhmYFiEAow6ESFSkg8EaqZGPdk5x/
kawfFgL5qaHtmMZry9i19B1LIxurk7TDGLhB+Vv4kX+xzr0gkZ7/RJ29xrui
/rqovsqrL3Pqi6z6PKO+yND1Tp6E/dsyEKcc1Ekbn7b6qR4SA3CsPzu2kCNF
p+KahAHVYamt7ltT/9o0L8C6snVQwBLM3taDSxKMJBVbqV+O9cA7LxDools6
v21JrxLK66T6Nq3uZbS9tL6XMd8mIVP1HVN9rsmPFPGuzK6J0RVK2fmm7dIt
darAN4meWQWmgNlKim8KtE/KznhrF1X9vGKeVfAZ4p+K5n4OPlp8GI9tGrjD
gF5wSfbNi945yT0neiC0romh2wpzX+efmeIrS3mdUN7ElbfAXVLeTUqIV7hI
ya9TypusvJdT9vOQkbRz4RDEq9hwg8ajor8O/fCFeks0fJLjsvUZ2iBv7qWV
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
n8WUO+Tz3Rnv67rNe6iZBWcGuLHVpaZKnLSy8hbze/anSfXT9RwYdUVBQPg6
UUGBPaifuIlM+1llWGd8LugvcsJ1LXpS8q/y3knKM0oC7/UvoXU9ciyZOJVI
nk6kTiUSAHqH4pGDidByIrgUd4+DuKV9MeRu+50Nr7PutVcA6FxI5IpOaxku
K6ib7HN5+yzAXcE5V4SfswsN2Z2lHiL1S9zWg2JW8BzTwleLqUd14UNH/E6i
u02mf0CzEkdAx+yrPMtPoysO2QWbwzJ/GZZLWDFJ5vXCjJDEN7CMYonii/SI
3+Fpp32R7abEPBl0OWEvFLfbI9ZhfJb2rapD1f8oK1yQwswg1g7bagFAjFkK
Upiv+WytgLMXdI/DvrVo6GwqcZXj/+ale6JyX5QA5W4JwhUufTYdB6BbTQbG
CSR1PYqo7aQcuFaPdx9Uguez6QdFVCp+rqHvdR3vSsjrqIY1vuRxldsNMboa
83aCNiDPRddszjZjzAOpQ6BTD/ylHZjJHJjLHphfmLEV5xzleSecisVRsdkr
dnvZYcMbENyJvEBKLbWIrZVwDDj3YTV8Lc+9quPGbbxrk6YXY//RhS3/Hsr0
rsq/pyXtb3NdlymRQujDfhdKOOC3ESMi0IAnI4YVrO8n7o2mdm92l2F9ueH+
7ENh6/OmC0PV3b6220M7KiXx6usN/VNDe1NTHpaFvwvJ89noCT0EN8pVKbgs
+seCF8W9vBsTSHjXgHP2eBewFEChgegayt6JAnAXOL4Qu1xO36/L7zrKek/Z
7KMZgfQnrFMnwSsHgodnrJjsDkAPgG6oQxm7hfoTfbNtfGtmXtW1WyWAu+gh
Hbt2QM47nLOZstcSgDYAdFZAmxJgXdQyxbp5nHVS9QqkripaG7K9q1IBW0r+
05Te9tTvQDgHCpODbpt2NnaXIcUjJsPDC0ai+7OnrXcyHxrGg7JwcSF8WPcO
RaB2KCquAnuMzZfgRC3FyHwxMgePhfAc4dtsPnxggbgcO8X4fCVhAULY4V1D
0b+mxi9mxftF9XVF+1zTvteVDcQNCnIkrPtJO2o32T2RoIlND2kgSwoHHEaY
Nl6WrrBNGuMthocEgDvMtWcipMxCh8zwItrLyVbDUKuWbX6RmMfqF/Pksq0c
1McjpkfzRLLqbLLUjjZK8raa6lZD+wWMpYoyhnd55UEmeV4JrgmeSdpJ+VrO
Ptoqfcvx0FoifjKZPJfiL6ali5x0Ls2fTqeOpxJHUsG1qHcx5OoEHA2fveq2
EdBZS875omO+YLMW7ZaCzYKP8Eu7JW+nfhHQPNdcESpcgrtaGNidtRO3DtKO
Fcl3Ohu9VeZetoQvHVZJoWqRrT/4za4FqmGpeqKfsLaAKX1n9wJSMoymRld2
cY1ZO51Vr2Z3fZd+Yqavs0sYbSkS2/W801W3O+oWkHY0ddJ4omI8z8vXtOga
hxKpbtTeCMG/AuGu5MfOZAPhztELukYh72o0eDweO5NIXkqlL6eTF9OJs6nY
iUT0CNr/AxPqV/cTjk4K9Z9tTOR2QgF7RItdzwvPKuqHOhvCYrD5T1TWZb5X
jG/FzKdc9qkmXeLDy1F3O2gre+fzzlkqYM3qVZuZ0WfmMgcsQOrys3bAusqc
qzrvrs+76lZn3eGoOR1Vl63isVd8uLqrEbZ34o5FznMY57+odflSx6gBuEXu
9ADlEOuwkBwqv4eEWuZ4QjRHFWPSoVE4z+8JHZbVM1HwJyjbULHNNaQYmUXz
4yDuxxx5rMkjm0FMi/s2NPxLtwcKJkWjzBg9C5ttbaNhfK7pL6vyvSKmppzL
RI+roUNy4KAQXOb9Ew7tWov/cwZpmhdwri7nYqC3KHomqm81GzxRiF0p84+a
8ke4coEjAYItqkDbdkYaw7ediboz1oDXTdmdRuMJbRfhTkW46xobrczXVvZV
Tf+nzJ9biBzWAsDuBgLAnaOZtNUTNkS8hKUct+BjwgIVYjlpwb2KgHK8pSZa
m7Kto7mGGd/hhdilCv+shXOTnwPl16LC7BLbI3NTBok0WCgfxUGTgeJnX9vo
6N9bxuu69k85dSYXPKh6BqKzw+FAtoJ/L0DrXDGKh7G4PDxGCe5ic/nYbDE2
B1SzmrQ1MRHaA4xuTYlfyGDe3cuy/qGif6lqeM9FNYL6AytZapa2qZ7toKGP
SSW3qBBATwcOU8hfg2uJzBgZlJoQptGhgAVm8mW+46HZxJiGvBHQ4SQCDgps
troMvlB5vo2woDDRuynU7O8/SlsAd115pyPtdOSdLsbf7ba1nSaGGwPWfSnr
LwriTSNyXPYtw60QSqqEDbhWO+boxTzjeGA1Hj2WSJ5NCZfSyjXOuM7p13nt
Ci+d52Kno+5uwNn0Oapee9kN9ZGt5AAuZy0inbMWAejw2Ip2K0AfwF3RaUFq
B1jnmS/5LBWAiKAFRxVRKzCcMe85qoUv59NP6sLHDspEaSWiyLY/mEO9MQ0E
x1RPDacN8OlEnokWTKO36ZVGJPw9ZSCsWWdqHkzLv8TqX7OwNQ1BEsmJVZrG
AuDo2LKrZt4UtXuZ5CkxuJxy92OOVgRtp1DGln2YDVjzQiVrB3bXDbqGYe9y
JHAoEjoSCx+Lh47gDqPgwWhgGePsgBZif7gTt7eSNrZbqs/jtqzTmdTdovy6
pn2sQwGLUgrEOvyYMt/Lme+F7Kds5pEinkuHxlF3K2hlWJexzeoW4nWzQOoO
6AfmMn9ZFg7YijOO8qyzMuOuzXma89621dO2O5sOZ93pqHucNZ+jEXK0wg54
JcOU57AYuZrlX1RwfTxiXQ/vreToJ08E8jqFJpJYkP427yBEeGjA+tvsdxF5
ZtA3YjxQYVTNHEAMmUBXoTadZH5Y2JGTzcS5RQX/UtTdKehKHqhYvXbR/rnR
0r80jNcVBYDuSi5+JhOBQuAQ0jkAusAS75twvlE6ME77R5xvmPYP0/DoHcAn
lXb30q4uYd1A9Ixk75LuX8uFT5dSt7CSVdb7VMkCegwB7nAMsYcQp+6MEOLg
cQehj4YUI8Q6KGO3kdoZv9r6RjvzrZmFj+xuSbiQix/VcCw7FD0AsJ0U1bMp
Wz1JJ2Wtp6BItNR5a0OwNkV7W3b0FNfQ8K0uRM+VuDsN6X0XXgzK/7aGbBua
9KdjP2aTa7xT7C/p/jXQNrr6j47+GSrZunyjmDiZCayo8M+0dxi7SwLGYuEM
BK8IyAYoB7gXmy3E5oo4H8ENj/WkvZ0CDuxbFiPHldQlQ7qT054X9XdQ8ZX1
rxUoarDE+A6PKAzAs16nPAq4NDrqz66KwaFYSOIKXabTZhusSM5q+u/2a9sd
9stF8z9t0ye+j29bRNh+sSXOFF21wYwwVJyaw5EOtumoaJVpMxRb0Q6QCFjH
9mjjAcTbbSs7bW27qW3VsRf0saI+zKcu6IFDonuUxrXa7bi1Gbe1Yo4Orov1
L0XDazGgdvz5lHSV02/wmb+F7E1Bu8alLkVcLR9cOI6qx44Vqx25XBEfrSWb
rWSzlqzWosVWttrxl3Zr2WGBqhYQrwQM0IvzWZxThCxI7RLALtyrcuBcNnG/
yr9ri9/NhUrSvkOT6laicyYxMGnwdETIFvdMhYhDVisJLG2STSV+MzRjK7HM
xTEm6O3sh3WQzn/b7NrhDeJXS/vRwNbZx7L+NC9cVqJo/4+7u1EHuieCOG0B
3K5g484KxWzdbyeC5x6GPOOQexLxjGnfxGLEPYg4u1FnBwdkeJpJezONddZI
8h8z4tcLwtOK8r6uUnobiv/JIJb5Uc2ul7Lf8tmPWeOhwp9Jh0YRd8NvK7nn
F5yzhm1Gmz+gzv6lHDig/TWr/2XJ/WUr/OUo/eWq/uWuHXDVZ93NOU/b4m5b
nU27s+FyNDyOhheXUHfCrn7cNUr61oToZQPnv58btMwCY0/kfcUvzVjl/XkQ
NQpkhLKxQi4Dc5y9x+rcab/uN/JAhZE0Zl3fZciGvk55h+l8+kjeTAqHX3uV
Dj6B0nW3p+4gu9aB3GKEUVV9AECXjZ9GqTwwuuAKMroAYZ1/mQsspwMrXHCF
D8HjMh9c4vxjQLyUt5/yIOJxUMx6FyXvWPEfNMLH8kCluAdN5WNX/dFDrNse
4sEpwJgeqfreZQGeU3a3g+MJeNTRSdHVNjv6z07mWyP7pmY8LMvXCqkz2eia
GlqWsKAGwgxVLbDKDudq805c1SrYO6KjJzv7qnuoe5eMwNpC9GyZ+6chve7K
aPnvkZ1taKKcuddsguYOVu4BKdqe4PsJyPxzUflBlewGwp3+rC7dKMZPZv0r
mmtRcnVFe5Oz1XCfo7WWBPI2D8QSmB6ccgJgEBDY0U45+5x3zIcOS/GzqnAj
oz1YMF6ieVb/VDQ+l3RUa5T1z1DMltUPtMX4XUXGXcY15WNd/tSUv7S0ry3t
G2Zl05JuQqrNKdYhbsPHSvIhoHy/zIkDTVcXzaCGbYZa5PGnXZAkKcGl87hQ
41sLFfVfm9qXJjxRvtFPvneUH13lR4e6cx2FxDC0Lasv7vUlqgWU3a6828El
szstfasBhMF4V5Jv56KnFM8SZ++lra2kpRG34LqTqL0Vc/ai3lE0uBqLHE0k
T6f5C7xyVdRvSMZN0fibE27EXE2fs+ZxVl2EdcDooHS12crYGsIGURkgzmot
W20Vu62MWIcH4K7sspQ9UPdZan5LPWhphqGMxUjqZcF30ojdLvOvm+JXpHYI
70wXR7kH4nR+Ku3vLd1jMXRjcyzI4gJ2WZE72hdsm3q838z9umhGdO6aYSky
gRvej9hPtqfhkxgODzeLNmYTAdx9qxpvi+qdDHdODq/CRRR3dSMAdzSQDVgB
7so+3AxY8VvrfluDEK8TsnfDzm7YBY/tsINCluytKIWQJxxA6tqca4DLkcPn
c/yDsvIGd2HjWpwfTXWjqf2o4y7gn9XsBvG6zznjsSacTYeGYQ8gKmKdY5Zk
ddMC9sCc8dd87gBgnbP8l7sCcHfAWZ111uYcNYujZnVU7faK01Z122pee9MP
L8w9iLnHSf+aGLtoCI9LyscahmTiPbTPhD2yuc/OxDrqeY4Y0LFcWWV3OoD4
TaUuE+Lu0uwS1Ro4XwCg05Ck0R6B3YG63VeYvAf7on0Gbohv9HMFp+F9ZQ+w
DmNpsU230ch8rGuPysKNfPKsET2mhQ7LwYPA6ITgEmId4FvwIB9a5cKH+cga
H13jIof4yCqAXjowSfsXU75BCrgWII+nL3qGsm9JDx7ORYDa/V2XgNp962k/
FwHuVKhkd4iImiOJiczgbtdEdWUP7bE6Ih489vXtnkGKu8zXRvZDI/usot8p
Sldy6TNa/DhGMYdXleCKFFiWfFDejmUfVNATxbesBVYz4SNw3RWSlyvCnYb8
qiN/wcAWlNZsDhRMSDZXNxLoQQ2LHnkmRaODm84U8rvhnWKTYpM/N/VnNelm
MX46FzykeyeKG+tZAFjO3uJsgHuUbgflKlasuOAj7RnzgVUxdkJOX9Lk2xn9
yULmdT7zYcH4lM98LBrvi9rbkvq6pL5Ey4D0qMDfL3B3C+m7RXjk7hf5R2Xx
SU1+UVPhe/sRJce4vW6jaw4WybJEK0pNW5O8yQJR2RoFeP1UfmJN2kHI+omx
nMp6U8WY1ibaXt435dcN6SX+FcrTmvy8Jr2Az6shv23JHzFm6v/S9R5cUWxb
tPBPvveo0DnnVF05d845kTOCCCoK5pxzFkGyvrV2NZ77vje+Mfao0bacgw1V
c8+511pzwneU9sj48yHeS8RHsc2dtsnsIaZpS79RwyqgYXcK2lsMBQgtCs4B
bWni/KypHDWXIpZKeIh1/WhgKhqai8WWk8k1jtng+WuCdIOXbrLMrbir4XNW
XHbEOjsIWEA5BLqCFYGuZPnfRd6BBw2+xm4pOc0ll7mEuo/AQtDaiNjaCcc4
41mSwzdzyVcV7huOUbBHhvNGj1jO9oYmFWd6dlh0+BuI8Gc4PjactvhtFG2H
dVuCfr2/DSrc/7bxE8sUMsNORvDIrLFgnBIcomknyQSsY/vHt6L2Oivd0ahL
/F+4Qzf7csBIdjYX/Ka8j1BWRHJrBcdmbdWQDa6VEIalYmZW1FqPE/VK2zsY
JhVYURN3cvxrcsPsoNc6moHso/u0ul/VDsoaYl0u9S2lP1PYy0ygF3bC/zx3
hnXq31YTPKyzpM9ZM+dt2fO23DlrDq4jtvyoJTdqzmLziZkcJliAWhc91mrA
3gw7enHPDBtal+nHWeFTSYKbDU1IWkh0//SMdmLhDN8IWyPHdJgXYFQfxrDV
9ndPhL8CpodXA/fwKv3uygBuaHdJoIwYtkuGu8IRXFvyUVs2NMhxG//2d1v6
3RJ/t6TfTfm0gWnIB3V1p6q+KQm3s8kNPbosh+ZE/zTvm8Sqq3+KDQLKzbLh
BS6yxMaWufhFXLFlNrbIReaZ0DTtH6d8g6S3C4v2dBhPj/OOSd4pLbicjW0W
mefw1GD/CdAk+WgAMtagcKTbZFwY1iYmxNNxnI0ltq7yMXxlVz1pK8dI7dT9
hrpbU39W9e/l1Mei/iqnPk6L99L8zRR3I8VuasxVjVrXAKXjl/XEup7YSCU3
M+ytHPeoJL6uSZ+a0o+WwegQEI6GZ/uEyxlBGOM4bvCbDJMeT+AMKQ4sGPVr
YisKP9vDlrzXUL7WlLcV4WEheT0TvagH52TfpOQZF1wDwdXnXV0eN9Y+fHwW
fnqBWT6yIlJXFf6OJj/B6R79U0r7kkZnCYC792n5ZVp4nGbu6NQNNX5Nja4r
oTU1sKoEVuTgqhK8pIUup8Ib6ei1DAXP7P0i+7zMf6ii99EeDiCflU27xG9h
KGzPpv865ClrG5UOkYR6o9/Xjyq2870vcy9L7KMifSef2M7FbmRjN3Lx69n4
DXidj9/MU/eAkJcYQIn3Ff4r5q/Je00JAPOIhJyetPnfTSB1IAqU07p8UpEP
S+pOQX2VZq4rgXnO0UNSB0A3WgyPFjDbzl7DPjpPNxKYiIZmYtEFKrHCJC6x
1GWWucKzmzx1LemqeZxlA+scBOtsWOxDWLPaK5b/WWZn2eqogICy2ysOW9lp
KbssFZL7U/ZZhlgXd4xha3HoeoZ6UWG/ol8WexbNM2yi/v2vu6whrPjfPfZ/
se6vsDXaWf8MoxOM0U4yC9AzzHyGM4ZEow2njA0Tb+MXcWici2KXnXDU4MlE
uUwO7jRQsi+zwi2VWuVxoLUXxbTcWshG5kpQlQO1y/ssSPD8GA5YCmK5H67l
kLUSsVTJEUGNssBu22ad44If1OuNDPuMzIWRXiZsIcOz37p8WFMPqypg3V5B
28mlvqRSzxV+gw32I86KoWHtOAJGsO4cYB2pwBpYZ02ft6Tw4M4CK3PBnB4x
pUdxhiJlhf/KlHWZsm5gobjRNKPOCSZwSaYeZsSPZ1h32EB/5jOsM+ZDScXh
rCQxLEYYWEdKD4aqJewO/8O/WIfg1gFMw+RBgm9YayAj+RhEeNCEhe+gF3QL
pIdkLMQ62JFrGpC6T2X5SYG5lo6tqJEFIEvAlDj/BOcDDQsoDUC3yMVW+Pgl
LrnO0xsCrORlLnEJGAsbnqfh1xQYJyd4XdrbZbw91tvHUzv/Qjq6kWce1YQv
bSIGAcH6BOsGBtaJZw3G0qmBdQOZnC4iTT2BzzXEOvmgof6qAflUd8v6Tin1
rZD6lEu9z6XeZPXXOe1FVnueU59kZViP88rjgvy0KL0khqWfKygAd+GngUde
Q6w7HvylczzSuQkOR6smjTl6AD2OYCBp0B0MB0yOicnePoG7HZyTlYHg3c3T
m5n4Wip2UQsvqqEFJTgHSw4tyOElKbYqJ68q3G1dBNH6OqN9SGufU/qXlPaZ
mKK80sTHGnNTiW5IoWXBP8/5ZjnvNOee4l0TvHucc0/wrknBPSV5pmXvrOxb
0IKX0pHrucSDEvuGeBfsgswkoZwkzpszvGuOjeuwQY70yCGdA60qw53/tcK/
K7NPS8m7+QRg9XoqtKIFllT/ku5b0gOL8Fr3L6cCF1OhtVT4Sia6nY/fK9DP
Sty7qviZBCIbLTHoOtsysA72SjysOyhpBOvoa3Jg1nCCSphK0ZECwbrS/xfr
IvPx2DIF7C52kU6ssonLbGQt4ai6HWUnKe05gLDZynZEs6rdUbM5G1b3cFlg
eRpWT9PmbjlcTaez7rLXXbYayigbDpEF0US3Fbf18cgucCVFPS2znxvszxb7
i8xQnBhddgNuOK3fPzvoHipT1kj/HHYynPU2GJ0Swyb/wdC46cyCe9hTd2Y4
iUBnUG4SwcmR6pKEvK6BI3hwxTSxmrRrHNwVlRcZ4ZYCcBeeSfoGcXc76qhj
gzGGPpeDliLQvKAVg1DxJ2kqhkylsKUctVZiRvg7MDpHl3VNiAh01zPMk4L4
oYKbGubdkCxa4vAmHcLDXlUOyuqvog687ms6/UqRrrGR8ai7HrDn3ea0Y1Sz
jqimC/LoBWV0VLtgSl8AcDMDyun/mLR/TPo5k37elEKsM6dGTTpiHbbkpR0j
mDTnIxZPUWs36VkQY3fSAjyAWJ6oI609NcoEZCxxSO1Qt7Kk7sAPQW+c4JuB
hAMJixG94QI6dwr6tI2dYAgIaDwi7Takn3U8fvlWk77iIQw2//+soS0Jhswi
iyZkr6WcNtRT4LQVfaesvi7yt7OJNS26KIZnuCBAHFn+aS44x4eXhPiqmFwX
6E2R2xL4LVHYErhNgb7Cx9eA6THROTo8RQfGkt4eLNrdZdw93jMu++f08KVs
8l6Ff98UdtrCPrCjPsIdObIThqQOT+rQ9Ok3maE46ct4nN4n54okh8KIyQby
uV/Tdisq7IY7Jf17Qf+W179m9a85/Us29Tmrf85pn/Pax6L2saR+KSvfKsr3
KvngDRkw/wDUa4cUMfHA8Cy5m1C7IdxNIuIhyk0IpxPwvmDo2dMxo28Hn4gj
YoGy35R368qPuvK5JoNSeFQU7uaEW1luO8NupRngmcA276TE+2n5SVoDlPtI
/NiBy8H6lFLfaNJjmb0lxteF4AKIDsY1YNCHp0M6o1pJW5vGF010BLW3GEcb
oANDtJ0TkmdODVzKxLcL7LOy8Bl+y3V0lt43TiDJiZCR6I1cAhUTDl8fYrgA
zvJ/KPHPCsnb+ejVTGhVDy6qvlnJMyW6J0TXhOSalNzj8FpyT8keWNOSd1bx
LWr+VT10JR29mU8+LnEfKsJOXQKKeICFCcxbxDpsXT7GJ0j7UVBfZJJXJP80
a+8kzWjyGR3JR0bzYUsxBE+uoxl2d8P+sUhwKhqeBWqXiC0kootUdImOrtD+
i1FHzW2vOG0lB4hTewk4G0Cczd20u1t2T9fm61n9fXLt2vw9WHZf1+HrODxt
l7vlcjbdzqbX3vRjemMrYm/H7IOkc0bwb+iJxyX2Y43babF7OHzHDk3ayZTr
yXCMiDcyv8hpOTc0whqmEQ2nwIzi4LC3hER/EvsmAxLxqJyU9XkycUkCZIdA
N+R1Rmn7YKhk+QN0ksfD0l14Qsvqh4L8Iivc1JKXpcg865+gPN24sxnDYepa
GHtpymGyItZK1GKsahzoHFZd27QLZNSUGFzR4ltZ9klRfF+RvhOgw3pE3chr
wO6+g5p8UFWGpdh86ls6/VqRt7jYVNTdCNiKHrPRc6JhHRYQz6QDoF0AoDMR
oBtV/xnVzgHTG02NmBDoTGQ21oZ2KCnHSMo1kvGO5oOjpYi5STkn+dB1nX1V
wMSHPWICcDJ0pRORs5GqBME6zuhUJFgnnnWboHTF4YKehBDXlX6jb7l81ERv
EPL0ocv6p6r4viq8rvDPSxyuMv+ihEcx7yvC5yqeOQMYHgCbxaUe17STqg5Y
97WkPC2wm+n4RTUyL4SMYzqy/EDq5oXYqkhdkZkbMn9Hke7J8j1JvitJNwHu
eArY3QoTW2BCMwyWaBHrAOhYV09ArJvVQqsZ6naZf9NEK+D9nghYB+sEByhI
ix1BPKPXzugoPkWsk46R10nEMlc6IBWKwwbwT4Bl7QcAXVH/UkBkA3z7lEUw
+ZRVDaz7UlRho/xeVn5UFAD8XfKRDfcVPKbrGy3EZHZ4nBiGjCOy4QDCJItT
8wh6AqyTCRErFOPDyRSsnmBlFicLADP3gOD9i3jK+6r6tqy8KaqvS8oruBbU
t3n1PQBvDtBY+5bDIeuvae1TWnmp8vel5CYfXYF9hHb1k7YWRfyTKUs1gZKk
EkMvZbiTh4vCY8A6xvFYScyikYkW28qDnsWMJKNmQdQlf0yitQ7JAdFBg/T9
wseHp6kqvSlxD3LUjUxkTQ8sKL4Z2QOkcUIg8dwc9oRjWzjvIssJuNonqnwc
iaV7TvFd1ENXs9SDIvcOCEMDN83junhUw+txXTmuqPtF7XtefZFNbsigBexn
hsbI6/JhcwEoStDewERF3yDsn4gEp2OR2UR0HhYVXUxGl5K+xbCj7nZUXY6K
01G2O6t2F5C3NoCb3Tew+8dsgXFc/oHN37f7+nbAOkA8+Ftvz+XpOt1dNyxX
x+fqhpydiKMbdY5h80PgihZ/WGA+DMsTSO2OhvNi3N/mkGF9wUjG6Q+nVEhR
lR3255/NUBha9WRom8D/jYM57Q9bsnERLymSqzgseSPHJrPG+0YHI/qkceRg
ARHpZxUTsr6W1Fd56T6GPseXueA04xtQ7k6c2GvHbPU4jgvhNQF3ix0bhmFz
ZODXhyi3qABFT97Jci+K0scK0Btk4HhK1sBGMuQ2Tbwe1mR0c6qov0raLlCF
TPqdpt4VqIWErx1ylL3YGJy2IVsDoFMBzUZM2gUzEDkEunMj6vlRDUndKKF2
CHcpE7oBaJZR3TaachIDz8CFfMhUBVLN+C4p8Uc5/msFEyJAvBMjTRyaIFVX
ftgyR5rofv/7jmjUXrFxEfvxJPSja0snLey23a8roKqAwgGaPS/xDwvsnUJy
CxRKNr6ZjV+Da4a6kaVv5+iHRe5lWcAfRVXZxVNK5aAC+l3/VdY/FuX7OXoj
FVtSyXAE75/gAxMc8LrQHBdZEhLrEnNd5e9o0kNdfaxpT1TtoaLclYUbIrPB
JVaZ2CIbniVl2QFinadLqrEGr1vJJm6WudcN8XtLAhl7gEd2MnaYTMineEwn
/DHKEyBpx4yyMlk9iZwxkjosCNi68qum7VS1L7AJlhTgxq/ysBVKLzLy84zy
LCU/T8MfYamvcsrrvPwO1GsZOe3PmrJXV/abOP5GWpoFw6oOi61GGQIo3CTw
OuJ7aShZtArhEfEmyCKck+hZsneja5Z40CH4iUdhAHrKTxS2yg6gK9y3FfVH
WQWq/B0ff/1HFodxvqKHp/xMY29KsTWgyuhP5WwDxGGZ0lxGVxZzCY/xTTiC
Ae9EcQYN34mbSwlziTITd2VLg7V1kOD5lvXoVo55VhI/V+WdmkQ6No0WEXTm
P25gPN8v+Cv0GZZfFdm72cRGKrys+edkz4TgHhOcA8Q3R4+xd1hnh3Z1sGXI
Aa/bgFSM3bh2GDtQyoGAlHJeC61nEvcK3Fss7QFDkA6r0lFNPqqChpX3S+p3
0LBZ+oriB6zrUOZaDLEuHx7NhUyFoLWMLp2OVtDTw7w/PyjZqVhkJh6dTcQA
7hYo33zI2XQ56qBJYYE4tXs6AGs2/7jDPwFwZwPE8/Zs7o7V1ba42zZXy+6C
a8fu7LhcHZe75yHL7x4E3YOwaxB1TVKeBS54VU88KrDvq/y3Bh7Z7Z9lv/5r
gND/65PGGiP8J4YJwHB+83/sMozsbGR6xsST0bU4bNg7PmvJNnzgDWT7G7lI
3hH2SZgIvgY23hRICLUIKmwHjTSVb2X1fUF5nOG31cRlMbLAB6aw0cvdS7q6
2OTgBArXZZxdBvYm9zjOaQaXlMhlPXEzyz7GrGfxC5rUicMjsrp0VAf6DUAh
GxNq8Cvbh1sFeZ36s6B9z6Q/aqknMreWDI9F3HW/vei2Zh2WjNWcMllSQOpG
TPoF5HLqOZN63oxNxefNIGO18/i3eF5nHtXR6GlEt48Qv+Lzae9IDqmdpU25
5sTwdpp9VxJBWx00DHMnnmDdGaCR8zpSiv3bLTyMm/yD9vVkngtP3uSjhvKr
ruHZUVV+XmLv5qnrcD+nY2upyIoWXlZCS0poUYUVXtIiq3p0Ix3fyqGrxquS
/KkMSlCBT71fUXfL2ruieDtDXdajC0p4hgyCTXH+STY4w4XnheiKmLgis9ua
+ECXn6S0Zyn9ma4/hh1BEbck9gpHXeKii0x4hg5OJAHrfNhjzHixFCtjKXYl
l9gucS/r0jdABsQ68Qhb7JTTcfUERCvQuQnBKL78IVdi3Yle6GSyRjloIlih
e2RFe1tSnhXERznuXoa5lWK2U/S2Tm9pzJbK4FVntgFMNOZ2mr2f458UxDdl
GWQmntc15N2mTFyIh+7ZJ2SAFFTq0QR/PEHyaADuJgnW4eJOp0DbAvfDZpjj
McLxSN8d6c4Vh56oHcMRBVUtsOX9GrZOkcq+sjccstZ/5HR0zklJD7XkphRe
5ryTSfTeacRAj5iLEVMhMlqIDmfNSsY1SgZ7cfwNJ+BIxzK2SRcB8WhznbF2
OeeECHAXu5nnXpUksnWik8YB2cpxN8cbGyt9X0vya9j+svF1PbSo+GckTGdD
2ga6mMEJcbwC0NGuNoML3kEFTYM4sjUoayNpbTL2FmAgIJ7omdOC6xnqXoF/
V8FN5FcVH5/DCjmvQw2rAdZtKr5pzt4mWFeMjOI4SXC0EDCXMC/b0Qi522Fv
H5RsNDgeC0zGglPxyAwFHM83G3K1QIeCIHV6OnZcXQQ3WJ4ewJrV2bI6G1Zn
zeysmZw1i6Nqtddg2ex1J66myw7/ecfnxj60iGci5p1J+pf5yHUt+bjAfagh
1v1sEULVHsLdsCZr1EwNNycMpzirzA4Tcwy/O2OW88wPrWdECfNGYWKYgk0m
l40AMkLnSEZSC0c2frVhCYaf7Vl8kkCib5GTY0iQ4Z+GKb3qp6L8Oic+SnM3
dWpDia1I4UUhOMv7p3n/jBCYE4Pz8GirkUtafDNFA5d7nBdel6TPFelHDQBT
NMLC4E44Ilh3ioUkMrVBbolf5K6AZ/9HSd3BUmz6tapssdRc1N8OOCtee95p
y9msWYs1M2pNj5r1C4TOXTDp5y2wQNLq58xYsMDzOjPhdQh3uu2C5rigOS+k
3CPZwGgxbG7EHUCWLmvUswL/rYZtTsdkTOz0LDyXoJzRUSwOz+j6w9l8ZHQA
dC3ltKmAasAukZr6tSK9Lgn38/T1TGxNDy+roQU1MCcH4GcyxfsmYQm4pkTf
jOSfl4MXtehGKnkzyz3JS++L8g7OAms7Re1tXryZoi6pkTkxNCVgSYKUXwOz
XHhRjK1KiasKfVMTHqSwN+xpWn2sKw9U6bbMXxeT61x8lYsssOEZNjjO+Ps0
DumTjmKCdcjrkttF4WVN/IGG7dhzgidmAGhjAHcE68YA5eTfAxkAEK4nQPxg
dZSDlvqroe7UlU816VVJeFTgbsGjlKauaLE1JboiRy9KkYsi0E64GSJLIvxT
4UUIXlyUo2t67GqGuplnHpX51zXhExrryXttCX1EsQlNIEncWKQ4GOcOjdor
kjoCfeNDvndinNqNE6CbIOwOXQKwRZAMkRnNikAXSUkI2xQB8ZT9qvqrio21
uwVtJ699BZ6ZBu0fvywEZhnPgLK349Za1FLGWVoAOlMermFLEU1RbOWIrYzW
AXayyB/R0wD4nrkYNeXj2L9XpgDubEDAJkX/qp64l+PflaQdbIzHcCXYuA9A
qmCYJk6fvS3w97Kxy1pwQQax48Z6MY9Y12MxYbxHYqeMnvA+DsXACzcJH3e2
KEcT5ZKtTtmGCY9I8EDPhq6kqYcFFAg76P0oH1Skw7J8AM9OXnuTZW+owVnO
0aYstaipFL6A7gfBCxhMANSOWDk1g+52yNuN+HpR7yDuG0sExxOAeO4peN/t
7ri8XSdRpnY3wF3L5mrictYtjprZUTU7yrBMTriWsD6LnSdlp63itFSc1qrL
1vDiGGkfsc43RwVXuOgNLfmkwCGvqxMDz2EahZF2TdK0ca6BH+bOG3HMf23o
zkIozubWjcScIdYNe4/PTvxOjHyQM6zbN7AOx9OIT1rbKJ0L+A/AArqBdWgj
s1cnZjINDL6B3xo8lSANPpWUNwXxSY6/m2FvppLX9cQ1jbqq05spZivD3M7x
jwrCy6L0viR9QTUho796DedudkgL+hGeLUjHdRGPVds42TfEOtSw6GKHWAei
I53+qOoPOX4tERkLuxt+R9ltLzrsBZs1Zwass+ojo9h58i/WWfRzltT/H9Y5
/sW6WtzeZ71LcvxulvtQEX828MQSu3z7fzvrULFie0lf/t0/w7ouwTrC6H4D
0DWUw5q6V9M+V+RnReZmNrGuR4HFzUuwa/sB1oDcgorH+C3WM+A8fWyB8Izx
7gkgvSjtI2satZUGuJM/FJVvINsL+pu8sJ2KryqROcHAOu8kA7tzYJb/F+u2
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
PWaZRNSOB9JiGuJ15KM9FGwDIdz9p8VTSX8ryY+y0WXFO8m5umgYRRo2Cuzd
0Y97Z1KhFSF5T5FfGdpHDOQyQMAC0H3PgoxFv6wPavqFIj+Uk1eF8LmUfzpO
QV0YRGtpJi1oKCf6FrXozQz/qiSvVeVNNpVUVZmS3a4g0G0X0BzgZ05fy+ir
hv5N0z5o8nNFeCwl7wix63zoEuc/n/IspjwLnHued83x7kXRfV7xXzEi93Kp
F0BRamiejHbxQLo6Q0dcNpzQH04wmu8s/AguHfdZ5LrICnpI8+AlPQq3RXkL
iGdqTyrHDQHNLJUDS+EYY2GyC89wwpal0lBXgsdyOk6YCIctRDl4b27V5O9V
/kUpdicfupQOLKm+eck9I7oxbJ33THI+uFSmUs6pSGQh6Ol5bFXbaH7kTOb0
6fSpM5lTo3CyJ0azJ0ezp8ZyJy0AeoXTGCJWGbFUAegsI8XRM/mx07nR02jD
bjuVtwPcnSq4Tle8o+2QYz7uvybFHhncK4A73KGQ1tBoWkLHTqR2iHV0SxWG
FsHCEOtE5kTHsI4NkOwfEbx/N8JEalUILO7wD8M6yiBjWIdDpCToDs0xFfyl
wBfHV545DBDWoZ27KVeZHQEVrrt05XewK3RAWLdXh5fUxLrNirZeTH/KaY8N
7ooYmku6B1E7Klm0HLTUApayD0/FawXQq/kB2cZqaDcBzy0VfELL1wHEulrY
1oo6+wnPPBe+qnLPcvKnEtysZcS6qrRVlbZx8kRGMYtYpyDWdXC8ZBfvmzLa
17QphIVFUKH5lTgcuWHQZ47UsmKmiXXUkz1kHQp2GNa1aGsMm/XAYIHg6atV
/X1Je15UHuXFuzn+ZiZ5PZu4mo1dycavIr4l7xQR4p5VpNc1s6L1vUVxtPjS
sXFTrAcS1mW+V/R/itzVdHhR9jGs6ycdtDjgnUz557jQkhC/Kgv3NPVZ2niV
Sb/Npj9ksu+z2XeZ7Ot05rlhPNLlmwp3CZQsH57nA9OAdZxvXPQNJM8kqJV0
cKUQu1/jP7TEdSBpPYS7bdCqjMgNpP0h1pFd2JGUoDEADCgRWceW3pu0RXv0
vqb7wm9mfYNj2KY/PyJAz3RA/YMLd/pONY28Lhu7oHqneFc3ScuhEdyNagHW
YURR6KKQuKtIL0BCprGShsW6LGrY1XT6u575pKZfKsoQ63xT/8W6FJpnDkTU
sDczwuuy8qOmbFblbVzGx97Z3hDrtgrGr1z6Zy79PaN/MKTnSvK+FLnCB5ZT
nvmEcypmG0StvailE7O042Ot+Fg7buklLQPeDgT+vBa+lUu+KomrdWmzKcFt
a7ctmdso/wfr2ByjKRYOEOsYbaCNJ4Q7GSt4PXZEykRjWMebu119bmg5zrCO
5cv8i3V//rXkxSETs17XI+Nx3I/gMcCUdoVWq9KrUuJePnwlG1zWA4uSd1Zw
TwvuKd47jS2e4CzacLlmIsHpgKvlspatmJWTPnNaP3XGOEHn+EiG4C53gp2R
/MmRwumR4siZAkDcyKnMyKk0PI6eylhOZq0ncvaTgHhF1xl4g/fDzsVEEODu
YTr1Ek0AGNzhmtsGillKE+uaEbHsSjsCPfbqMUX2m3mwmxMjNAZvTqQILGRz
aFls3hSoMUFu7WbhVDbvPoSNB3TXpqgLtn4rDt2lhmSb4I7pGnjDovcpaFhA
uboMcLfLhnurKpklGu9z6iMttSIEZ5Pu8ZgL4S5sa4SQ2lUA1gDlkOaNoaEE
OkuMlQPMbmKsSgZftbC1GXH2457ZVOiSmHyUlt4XlG/A69CpDG1sNyryBkZh
wjdl1V1G8LDuwVrze236Y5t+eLyBSvusVsyazmjmJv8eENaZ3qTYjR2+RIwz
y6adQpdGC0wzHKRkew2VZS6vgvys6B/RWU59U5FflqUX8FgFfJPf17Fcv9ZQ
1lvyZhvbmttUTjyglQ3mqfIb2x/6TiP9o6a/Kgk3stFzamAa46dp9CvhIawL
zFNO2Q1FBOn6MgtAl/mYzXzKZT5lsx+zuQ/Z3Jt0+qku31G4y2LsvIl13gHm
urr7onOgeGf0wHIuerfCv2tKP7rSRl/e6klbONSEDS+4/YEoQIJHUUr7VLXb
J2q3azbCkPvtD9jLIg1vtWz+HLMm6dWT2ZjTHyoFYMcH40hkSvGQD9H1y1gr
q09zicu6f1YEsY8DJ9SYAFRBs+6ZRGCZi96U+Geq+i6tf85gP/R7WgeNCWcV
sE7Tn4OEJw27mEIvHSSH6Axga6Zsbc45QNPj2O2c8Kak/kT3Tjy7gHVVwDoN
BWxR38xnfmYy3zPGO118pEQvc97FpHMiZusC5EZG6+GRamikEjzNsmzK8MfI
SD02Qq5KjmnJe16P3suiR+gPxu6a+F74zSYTkNAyxJMJzYYDrlQf/s3i/Lp4
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
/taFgrdkYx0QWmc1BJ+qt8sE55Pslbz4TNE+mMY6hh3rD+T8uTw7m4oO4TZn
fO24t0HmT5pRXzeKiSeT8egsE5tn4ouJ+BLDLCfYFZZd5nBgaZ7F+cwRix3Y
PsW6bGAIUg5InRI/RaIB3jfRjf8HGZn7NSCitf9frPvVMw87xvem+bmmvyqJ
t8zUKZlZ5MMkzwVRrpXE1TNyE7mrCTfcR0Ah6jiNAKDn6WW8pGcaXlVYeGY9
LarrVWOnamJVDWtr1nrJeGBkT4vhSdCVILuA0SHQwcHJhDZcSEyon8Bx0yk2
hi4uLBoaDNhAl8zVNwAe02TrLRuc4xPnFf6JpW+Uzc9lvGfXi8oDI3malOnQ
8QnjU320UgdYN52LLeWT50Xhjqo9Naw3BeuDBaKssG4WP5jFF7p6S86e5ZlF
3ARHVB/irJ1vUg4t6vELpezjlrjZw/V/6uaEzmAj4b9YR0KIaHb24VHuGMU6
EsVI7CYmBRq8aJv7/R+sIyvtOJco7wPcDeU9HGjHJuy3lrZb1z5Uxfsl7pwW
ngcEzru7WWLDDnCXgl+Ht8PRlIrwFPL58IgLD7lgn/V3OfKhAdYlnFgBSMMv
KDCTj5wSU7cN6VUJZ48p3O2V8Ni4VzG3y9Z2qbCDu/xomr1LsO6TYWwaxkdd
e6eqr2T1qag8Fvjb+dTZdHSODQwYTzsGVynIEE8DsQ7V6yAcnkSsi81HmMUI
sxTFsxxLLEUTi1FmPhKbjUSnwqFhxA8A0o4CJ3RVMZp2rJQYKyb+YJ1nKIWW
9eTtsvgRexMkOWVIQ4fJdpgtzY6wbooG4Sn/Ho1R/UsGRzG9kWAdAN3XprlR
Vx6Xs9eLyXMWs2YElgU/qNd2FJSsq8k4uwnfQjJ+lc8/gR9W11/p6mNZuJbj
VrjwVNzfiXgaIVct4KoEAM1QtVX87rIP3/xBOQS6gIOoVwS6ehTUnLud8PSS
gZlM/KyQvmeIL8sk7bQm79Tk7ar8uYYB95/RzEH53FR3GsoWnKZixwIi2SPh
rWRXDuPp7WAO+c+W3D9/PgFqFYsalmZAUySU/rXLm7ag+z3A3sTPrnbYMr7V
Crvl4jtDuy1mT2USc4noMApYF2j6fTUf6FM34FjZBbzOV3XYQFef8NXgOP11
V6DmClRdflDx+J0+pHYln6MESh+xztNlArMccyHPP1LV95axaZobpgW4elNK
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
rGPqFoKUNfuBcPYGoGcd8X23yCEErMRqczLDOmtciHUJwuwCvXbfm9phXT8k
dlc1vpb0l3nhqh45LXr6JGaTjnrCVon/DhEDxI1WOHsj6WgnPRPp0GmRu6SK
D011rYDKwh7C4BRruzxuWgtbw9HvSToL39hRp3zYloF1wC4Y8Q0oXBMOpQcD
uz/G4lriYcvCRnm/o+y1gY1AyJZs5doTTuJOruOe3MJZtP6lqK/l1adZ4aaR
OC+HFgTfDO+aSNrHOXuHs7UTNmKtHc7eTTl6afc0H1iSY2iYz8gvctr7Ijx8
NkqIt9suEjMB4tEt9zmjstBt7yR0MSniP03/fzXff1XfH7rvT9P3dw5x6jCZ
nwwGFsKRc1GkaVzkoue58ArHGB3nmeCQgDlO30na0RPdM2rgrMndL0kfa9Ju
gwVpseMRhAYSWBFPA9z91rCWjD0t/ppLkIbd7Ig7tIGC1/EnloBFSxKJXyJ1
zKKzhzv2BFFK9BvRdivGpyJtAbGzQmAqQQiD+d8agA6ldtKwzaBjPOyeiQZW
uBgB3QNFeq5rr0zjtWG+0oznKsGddFdMX0snLnKxFQZ09NDNxf2zcfrR/HOp
wCIfvihx9zPCWknerMjsOEI9RKYqEiL2WfPGh5xyW4sv8/Q9eLsRN7pTIk6C
u17MN5MMnuGjV+T0Y1NZy7NBV5zy4aAPbMownivKfSF9NRlfSYRmIl74DYYJ
HMaI4BHWdeMkY4NX1eTzvLhOvK4qb9al7QZz/mS1e6YCSLdqzJ4InI2w7sA6
M6kxpcD0AgmNXRYavgsnPWjenRJ6qDYhY/UvOf2jabyQZchYZptZs+yV0F83
CsuRMVuBxZPBBJ7lGLKYG0dp1M6iHzCxhc+xIZQ274D+zTlHsoi8GSVq1wg6
exHfUjJxV1HWMnA22C2ahHUH+exOLv/ZzD1X5MupxOm4fzzsqgcdZf8YsbuM
e8h0D2nOU6rzbwzvYA0ZzmHTPZz1DmNiMYgOsUpkrJFwdtKeCSm4pHE3stLL
skqkjjjGEUK+lJOW/OM3r6M/fsOpEeTGAd4TmeWny19pAe6w6MWXmvi5In6q
Cl8a/EZT2Grx221+p81bDVEYYOyhHe4HG/Zn7cTqoO0EdkzqD9b0+72jIXan
A1eBbyQ2kUOB4wXrLGsPvuvqQRMWdocsseKYOXx+YxO4DOss9apYGpb117GC
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
UzW+VLRXeflBjr+R4S7p3EWdO68mLqjJS1r6ui7dNbRnJCuyxjrdigVmPFJC
SuYBDmesg18N1K5h1U9lxtbkQ4uCDmBK2gdGKSRL98fl/XHlYIBprGuxg6bE
YxaWcdQFygH9eqyBp4Pc2wPWzMNafaR9qzZEWNdkWzMpF9rTq4xvV+BA+Kmk
fSzpHximvSupb4vK26L8rqh8KCvr2Du0r4SNNXmLVhVoSZi5y4IP4OXFKMEO
O675XFBfZ9M3VP9seqwWHypGTuVJzEZYMReFj+FScKQGVeUax3J26RFGmBRT
zYlBzFyXd00hGz26mk0/KkrIXaKvT/9pU6If4YD1Lx122bnuhGANUP+aYud1
pF4J6BbpmiCsQ+kfvevC9x7/A7yOsI4tYJ3wCy7E8o9x5lDBNOx2hTA/fVUO
zye9vSjy3Kts/qUaGGVY5+yGPSRgLyS5e7L0ytQI6D5k1I8Z/UMGNsVrGeOV
rj6UhZsCdzEVW+YI6wLTMfS89S2s4zzTKf8ZKXYrw7CuJlsHCwc1nWGdbmHd
h5x0S4uf4QO/M2j+xbqJmPc0FzjLR28o6WcZ5QP6gYF1tMt8zePU7oNhvMbh
oXRH5FZT0TNcYDbmmUBdw9FLOCaSzjnef0GNP/w/sG6HYR0B3S6ATkZyEAb5
sSyqtolKsfqlqHwuwRX5U0n8VBY/lWTS+/QaPsklnD1ulNR/sS5jvNfMN7L2
KC1ejsfmQv5xn7vmdpSdFtaN/ot1mEulq22AdSMM6wjlBkd2jqLDVkIGBFto
C7HXg+5uxD+bCK+kuRuK+DxL/y+9b8ZexTgsm8iKLWR38rlPmQwR7xtKclmI
zCT8xIpbUYyoV+HJNlaG4y6yLarE3mOOFufspDz9tH9OiqzoyWs58VEB03C0
re+jRV+DLaeFdU2YW36rad/q2KFIv9Pu/6HMvyDYyXF3M/GbZvQ6LSN8Q4/c
NmL0kfvZxOMc9yKfJtBbKwkfyiIxva8M63basFiE2xiGFlE4wBkLwV1f+dWF
k8/PjvYDnrQ6gmLrRDKlV6X0wwJ3Oxe7YoYv6sHzmv+s7j9rBM4aofNGaNWM
XMvF7xRTTyoIavlUB8fbR7CFanXIsFYrYN1PYJ38jbWmMA8NBUc6wDprkkJl
8pwRPLTpGpsVg/Qs4cPzvPo0pz7JqY/RcK6/zhkfcjCDpd2WJMY2YV0ek/gE
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
dfAC/yu+8LAOR7HkX2PKkZ0IyTL43MTZ4d2q9tTlrhiZVSk2LIZ6BX+LwrbD
CoUpRW7mZImEOVbIo9TIhTp54B7JSSYFmmuaj08LsSkxOqXEhlpsSo/O2rHF
UnKtljnbzG404hulESd6Ehd5b90EwN2Javpk3cuaAT1bRLi75DCPatIuGlUp
xPoeq3ZfiXnLVy9st219aFl7TfNFTbtfka65gDAsMKs1g17FGZDcskKtqPSq
WlhT2bNq8aIuXDOV+472tGQAi9up2Dsl+7VrPLPVe4ZwRWXPSPkVIbvIZ+aF
1EwxNc2nporw6ySm+MS0kJwRk3MY05ZdV+nLBnA85UVF3z2q48FPYh82MRp4
u269qpvP6sbDmnqvqt6pqndh1dQHNeVJXXvZ0Lbb+n7XfNc13yOdM7/8wbpP
LftT3T2oWs9d8ZKWXwSUPsI6zK6doDEfbZrNLRbptSJ7ThCuyMotVb+nGfD4
3FeN27JyVRDPEbgDdjeZA10ZaWVDpN3aD2KWVO3Cg0L2DC/eBaxTnU0Fse6J
qF9h2flcspcM16IBNzxiHWHdMW3kOGAdEDwTCV6wEgaRG67Hws1YpBGLNOPE
5CQRquGkHrLHas4PWNfAg4noQMys6sWbeOiDCv0L2kIimhHzJYJ1fewwwTEK
jAciDkVdEt7XAQaIih4dPLrWZy/Rr4Mmw570+E568Eiultdch1h30/4v1nX/
B9aN4zwgYF1hhePO8MJFQb4mardk445s3JW126JyQxSvCtw5jlpj04tMYoaO
TRKsm8Cp3jT6jmrqM9d6iyb8pQOCddcNZulfrGMQ6Lp0fJRJDrjcLE+viNyG
JF3R9LuG/cR0X1nutu3uOOVtq7xpuk81666iXpH50yK9JGRnuPSkh3V8fFxM
DNEZsnCxLD1vouPTt772g7TcIKlDh3m46njtE18XHDyxPzedD5iqaW2Xtbsm
3MNALOFJJHnEgHVYWyDEOxVDlEsk+zHsJiLNk8leLN6NxTp48g6fLFI7xLr4
MSvxl5X+j5P9q0KdAJYOnOGsyt53xZdVBaldHc2c9zuK513vWZsejkqHfaJh
Aes6sEDqyu8A6zxbEuKwjeHFaNqjv2voew1tp6psVqTnVfFphX9c4R6W2QcV
9kGZe1wpPqsJL2rSVkPebSn7XhsbcVLy5sKwoQWn6bEi97+xDqXrT8Q38RdB
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
6zjpamFRsRGLTtLMFEOALi5d4aQLbGqJ4meiTC9Mt4PRRiBUGQ+UfBPFsXEX
GZ3PPTHuHp/IA74d87nHxhHuTvjyx5Hs2cj6xqxRnzk2ao2P2YFRNzxWpP01
PtAB0STxlwz5RQETQNArr45Yd9DARAZ4PKwTSVt3t2ru12r+U815U7VfVOxn
VeNJVX9aMZ/XjLcNfaNpfG9hy3W7BUBnoukWsd4CuPtLsmwIyg0R76ChA5bu
ol0ViGX3d9EFPrbpuN8dF0jvBlp05j86+feu89Zx3zj2K9cC7vcWFGvJ/lKx
f1StX1XrN2jturlXM/erxkHN2geuWHZ/FwDr9Lta8jRiHRZb6tx4dfhewz0O
RFNkMk5PsexCInlWTF9J525L2qOs9VS2nyr2E8VeV8xHOeNhVnuQVm+n5Oui
dE2ULifTq0nhVIIHojWdYPoJuHviAvhcJnkml72mGeuAcnnnW97ZKuB+8S/X
2bKdb6b9TlfuyfwKXMtJf50bLWP08DGXPmbTxx3qmB097sROuBTpKsbGijGS
Sk8mJ0sIUxONeHiSpU5y/DIvYr8VmBtgWhK0auZSIn0lmb4KjwkRpOs5PrHC
sgToYlNMuMtMtIDU0WMlsjBbZMfKiVHAulY6MAAQMJO3C/LbKgY4bjVlkq+q
YHsCSF0NLU1+oY2b/rWovXBSV1TawzoQsEDq0FMCe2fBNs4zUNM0M0MxUzFm
CoAuRs9EANwA7gjiBXEYmABdpBMMt4OoXpvRAOZ3IKkDoAu2k8GOGOllqBkt
fsoRr5aV5yAKgEJ0cweN/6jH/kc9/h9j9B/HN1Ke8NVC/mp4rBwerUR9dWa8
y0YWEuylTPK2nHoIvE4VHyrCHYW9kqXgBZ9PBWeEwJQQnMbwsjDoOwJ38dMy
d1bhV3VyNO6cljivJS8Z4nUr+9BVXxUxCucrthuc5458SUmA/Owm4dYWbMS9
ql2oRYZde2xkmqPmkswpgV0RE6vpxDk4Gf5Mhj9N+kqLIj0vUidTAHTR6Uxs
SorOyNQ8BhkLt8rZ1w3lR4eYpvbI0gqZLTnoe5tiZNR5SvYKd3+nVTKFov85
CgBF66dJbMhi4a5FQu1rzueK87Ko37Wyl1RhWYrPpdCjjNSrPaDGH56ke5OR
iRQ2E2cA5RSA/dSak3tU0t5WMa3sVxOjCdHRFDOmCcB2iXb29nPJru5+T93r
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
93vZeppPr2rUQAo0RIBQXz4+5oJepnxFlGYkGw7dpVCunozH51h2gQWUY+fY
OAnxZGZYapqnpjlmLsGviNmbkvE0Z75WjLea/sbQ3+jGK01/oanPdOWJpjzS
co+13LqRXTez61b2mSW/ctUPRbz6vKDtTYxHRKyDs0kGTrY6JAibVOp+Y3I0
HELq4HoZyAeD7GE/ezjI4WoMSJKWut9U9hvqXl0HHQccBljNm6L+LK/ct6Q1
IwWqZFXhT+fYUxK7lOWWctwSfKkmzmnpK4Z8x9ae5K13Rftb0fpVBr5tH1St
A/I2HaIll+nVAYALbbbkt/X04xJ9RwOuGOgIkTmJu2JIT4o4HLjZ0EBUklQI
86mTvSxz8ym4m+MYQ5uNeNSuH6fhxSSGXcJlUbgiJC8lEqscu0jsmifRssBX
jY6VoySjJ3Y8T8M5AXK7I4QWJf6GKT0tKB/KcKPXMJ28ghTuPRBRR3lkSbf0
1JqWvKIlLqmJS0risgrPhWuGeMNM33OkJ4Xsu4r81ZvJh1espf7/YZ3+L9Yd
ThIuNDnEOgS6lo5hH7jBZGw29B8N7XtDAbLxo443rB8N+aeXaNkCYQvyFtUW
mdnD+ipWHnqAdQRwvMieoak7cDBvUJmg37TniXeEdZ5zFIEyRLyZf7FOOcI6
+e+0/H9hnfL/xTqP4CHWDZenDr0d+d5wjx44HmDdQdPerTu/qvkvRfd1wXzo
KDcs6ZKeOiMnT+W8kUXuZIafk/iFbGIpyy/nkmdl8YKSuaLmbujqXdN4bNlP
bWvdNB7q+j1Du6dr9zT9vgZfmsDinpv2KxLXCMj20TQ/WRac94b1zsAhpee6
8sjI3NGF62riqsJeVuIXlfh5JX5BZS/p7FWDu+Ek7+bTT8vSm1ruc1PZbGMR
j7BovK145dZhE3by6ABxBf5Tcz6WtDs2YB09DRwpGWgnAOtCgHVdHusqpwTh
IrplGutZ50XOfZl1nkvWw4x6PZ1aFbh5nh6AhsUpu7EiC9RoiHUNIdzPsGdV
CUjCR7jn1tC38xfWUtDnYZt0yrarxPe4bP8uulv54dl089/dwoadf2s767px
S5UvKqnlHIfzfpgWFOtnSKoFpgWx82piBVEud7ugP4cPfN382cRx9P2mjrKr
Q3ZDukdY1z3COlyIs/Yb8G7a74vydZObz0UmU4F6EkuOWAxEQ2wP60LteLQX
R6ybjcdPsoBy3Dw+xk/iChg9hS0JgDuaYF1mTZLvZuUHsnxfzt5TpDty5mY2
dSMnXMslr2STlyX+cpa/lOPh8r8s89dU4ZaZfuxkXxVluE99xhFiLNbBxeLB
HcjYn/8X1u2Q3h/yuv9inexh3WFbPSBYd9BQd0HZVfTNkvGtZHwtWR/zyHae
Odq6oz401fuGctdU71rqPVt96OpPXeNt3twoWN+LcN+x90rEIaFiHRKsA+K9
U4MbvblZ1+Fm+qEmPa2Kd0uJ6/nYVW2ig80CeKPT9135XQWv91+AA3V1G12D
HKBSazom4EwJmJzewiCDSCsem2RB+DNzXHyRiy9z3GmOXYIvmdiACk9SgUbU
V4mMFCMn8gh0xxwKT545Dtx+IMbOycJ9Owvf+SPqGuNTWX9TVJ+62Xtm5rom
XlKSq1n+dIY9lYkvSUA2mEVc2WaWcsyyzJ5TuSsm6N/Mi7L8qab9QLjD/s7B
pHL438vEAyLvuTpcXiCGSDhVMqwV4KDLj6rxtWZs1LT3FeVdWX5Xzn2owvuo
4G0LdRa8m+pPQLyOQup4MmmdK2SEDwt3nnP7UDIPlCM3vH9Te/7FOvXv1BGv
AxybVf6eVPHRg7tZ+Y/H64a45/FA5cg+dDj5fGQdT1oYR47Kw5lkr4wPOH9k
juRZsuzW7V9V50fV+VJx3pft50XjkaPftrTrlnxVz13RcvB4zVBumMotS7tr
q48c45lrvYTbZcHaKNpfCs6Xgr2Rx/PJJU9cZ8N2PjvOZ9fBmFrb+uyYny3z
k2l+MMy3hvlSVR8p0i1FuCKzqxJ9KkMtpCPz6chcJjybCc1kgjNS6GQ2sqDE
Tuv0eZtbywsPypmXdXkDGDW+wkd6tksWTHrmIe5KwF1MO2xh1NHvuv2xpNw0
E8ugBNMgYIPNBNn8wmTnyICn5xP8WTF9LS3fk/THGeNxWruXkm+IqfNJ/lSC
meGiIGCbGEruI70Jf4mfqAI5TMdmpcRFVV53rY0Stj9QZZQw0WOrbH0vWV9A
JZUxk30DA6atb3nM6t3MO1uugwbIbmHTLX61Cx/t/CvbemQZJOois6qKp9Xk
iiae1TMXDPm6o90vWi/K9qeqvQnUsTk0JDxoDz1evC3pP13jcGj8QlxJ8RUg
N6+a/b1irucz53VmJhvupMZrCZTJuG7GjlfihNex0S5LDVhmmo3PcsxJjHal
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
ahyOchqY4bSSmVWpBY1bgeemqz7NmW9L1nbVPqqZJ6SWfe5XsdHiwOd1xJS+
q/7y8Q1dndHhucfueiOlPkTouIPn+1j24E4nNQs/iFAlxpi40L5+2PDDGn4j
u7N/Irtzj+vedsV5W9If5cRV1LPpCZC0MiIeoHQLtDkTbXPxIT4zKXDXJPmO
ZrywnQ/YWZ3bdr1dz933HHjWHBUxrwoz2sqYTQmXxynBcDR8GOz5Tv8mCZg9
+B0lvSJ/9+jGUH768xG/Jy7bTnxw641UaP/tuJtSevt1Uz6pw39yMaaBbv05
pJwNqQB0x4PycUc6bUunHUyCOGhg1Nc+CK6aclBVDyrqftnADdi8s4/Nky6e
SM7by3l4dL0ty/2oW29k7bUsrcvia1V6Y0nvPflLUdmrgnAjIt1PRkOsw9/a
b995poUmb0BrT+sWyNgPBem2nZ1XE5NidIyLjmCiXxzga4JJT2P8AbXAMMsM
dx1HVOTbLBzRRnIZo+gy83x6lk+Djp4T6UWRW5GE6wq/prArCr2oZOHZOiUl
x8TEqBgfluJwew5J8WE5MawnRq30pJOd95hrucyqFRnOxsco4tDLZ5ZFak3G
oI27IGl14aEpgmh9aPD3Df6Oxt6QKbSsF1PTYmIc3U5iQ0K0K0VG1OiUmVrL
sc/K0ueGvN+WjjrycVshhvPKfg14nfqton4uqZtFbTOvf/C0N7b6UgcZBSfo
OzXh5tggDkfEsc85mxymkmM0cDZAM8A0ADf5rqw+UGAp92XxFiZSMUt8FtTr
BGb4wgMiMkShYdEoG5sV09dV/qmlvnUMwLpNx37vmC8M8TooWSx6DtRSJJ4j
jvNilUQ/MT8JttKhjh8ilsaF6JQhyc5UsMkEmug3G+oIIfgwp3XqpgP0xtiq
YLM0xrsT296TorOTM9/YEgDdHE7cRwZpdNjDXgvE8xD2DiUA6CIA7OVIoBCC
FSwGA/kBXAVcwUJ/oNAfKgTCxYFQsR+O4VIgDF/mA6F8KJgPB/IIdwPFWLCC
5eloO5sY57Kr8My1rC8eXq5HcInCQ9m2HqniNZGaYlMj2fggthvFsT82kwKl
AA/QFZa/C9RO1F9I5rpsv1KsF7L2UJTRaJel51nQsCm4FIeZxAiXBF43BjJc
o1Zs8WlO+1I2Dqt4F/sNzGQh9O2X7a2yDYi3njOeefpjR7lnS7ct6ZYl34aP
xZbv2cojV4U/Wi9YH0voG7xfteBeINs+pN7qJ9v6W1vEkf68S7bpRvwmE6U3
O0925C4ue9V8xw9i7Kb7s6I9gkes3pAmjfjR4fCl0ZuqIAIZR8k6FlC7n01k
d2cN96jmfinbwF3vu/J1G3exZrTUJCJ2ZkKiZmVuWVbuatYLw3lv4fzIruvu
u+6u6+24zraL1hNfcsZmTvuUJz2fmIit72P1Sv/eG4VW/SLL78sgYD8hkeCz
r8F7Q/2XrSZ+beJ/rSmtV43F3bnLI8G635cW7oB1Z13le0cBlDscFOF+PGrL
hy1pty7t4ZJ3a8p+FZ3298vaflHfy5v7OevAs/Y9e8+1D+BCwuXuOe627Xwy
zbeqtqEC1gmvZH7DEN+58ueCulOGG9yPSCOjyv4vjrjQEFst1LYY2Yky1tkq
aY9ddsXMzKnJKTE5yeOa4kCsZWYA6GhmmWWvc8JNTr7DS7c5/ibHrWGAY3YB
czHQK35Vku6o+hPdeqnbr0yg0/pjENqmfNMQVw12UadntcyUlp7Q0pNGesrK
zDjUvMeuFOS7Ff15FW5YTNTqZsIj2dgkkwCahPv8PPZyrEn0DZm+LlPXZbiV
sisStShk5sXkjJCYhCsfRAoAHfA6KTpOBOy9grBRU76hayV+sLgaykFdgU91
p6p8KyvwIPhUUOEagCvhnauum/IjhV3jMnNUajpLiinoZ5KdoqgZmp5lmEXs
6uduSNJ9hWRR6XCa2mNVfSBLt0VuVaAX+ewsJiwD1kW62fAgeg+GuwxoxviC
TN8zpFdI7axPrg1w99bSH2nsopAcZ0AUY/pbLTlQRV87dHkirfJh7BZOhwYz
IdKcQ8YNqFAbiBkRX0NibExOzerMTVt6kTe+lC24T09AqlRwgw7U3F7Beu9I
97TsPGg0NFAidrspLLCWY4EqzixHmrFYIxapRILFEEhUWCHQqvmBYL4fFoBb
qNgXhGOpP1weCJf7I6X+aHkgWhyIFAD6gOmBsEW4CwK7K8WD1WSkmYmPMulF
UXhsGh89Zy9vH+bdg1zuq+O+0NTrEjPDpUepJNDjQXSJSQylk2OZDMjYRQYv
rbu88kjQn4rGE1F7LCp3BfEGPkypWQbNq0f8DCbsokyMA9ap2WVbeJxXP1eM
AyS0IN5NYvxLRjaq1lHVOqhaexXc4/1atr4UrY8F813BeFc0cRXM9wXzUxG3
+3Yq5gHxxDitm6RLB7Sk7ttVXXR7npN+N925PytBwolQmuEL3W+uI1jn25Jj
5wmpzOoXvsvlmK9etUuFS0oYWMXwCxbmryHD97En1M46x0EqAD0cHzuuubsV
d7PkvC6YTz3tvoNwfdNUbpvqQ9N8adrvbe+r7W3b7i4ub9d1vsE1ZhtvbeWV
LT2zgCSwDyzmoc0+c4WNorJZUbdr2nFTJU2Y2rlfUx7yg+HUnhcTeed/p716
WOdLV6Rwf6uxhMJNE0Y3cwl0pMf4gtQjfo1q5yPajyEZGV1HPmiLsI7a0n5L
3mmK23XxW1X+VlW2KvJ2WdkpKTtFfTuHY5W7nr0DWO0YXxzzi218dsxPjrVp
mR9MbcOQX+rSC51/qtJPZPqZzr5yxPd5ZausgQo+qatnLcV3GyP+Wr0BcF/Y
+lk/ZzVnv2JsFMS7Nr2MPmOY8jArZGZ4IDPZeTKFt8rxN3jhJhqDszc4epWj
rvGZeS41x6bmeeqaIN5VjHXD/WLldu3cruPtON5XzwNe/dZzXnnWE0+/58o3
HHHN4dc8/npevFlQ7pX05zV7s+nsNbWDMt7yzdRAK0WiWqnoOB2bYpLAl+Y4
YHokXo1PzfKpGR518RQfm+Cj2D8sYlvdkBQZU+IzZnrN455X5A8NZaeFGYKw
jlrKUUP1sW4bsK6iAtZ9Lqqfi9rHgv4OpLEjPQGuKGQXmcw8BYiXnaeoBYrM
HnL8KieAyLotItA9wWwj47mO66mqPVKkOzJO5S9xcEumSa0ZmzcGs8E2zuZH
hpnYlJBeVbmnlvbWw/3GL54NiLdhafcB7kSMBgBsbKf9BIpwh8w/DpKdz24G
+eEQ8TvCHTYmOoyzIQmQYDNo9Cfcd7SNvAXs5YD0Bn+vOmdo/OiCev3iaY8N
elFKYG8wTkAE4bMtxwMlkJzomY/Gg2TKDw1XEbUQu8IFWP3hfB/Bur5QCRZg
XV+k1BctXo0W+6IVgLv+CMIggTtASCB4hUioGAtVgCumo0N0clZgQca+de2d
PNZhjzy8Et6Yxm2Zn+ezY1Qa1CvQ5k4q3kklhlLJcYQ7+OSZVVa4xUp3OOUu
Pk8B6PhVdLyHxw1GMgHWjXLJUT45Cs8IOTmjZlcQ67TPFXO/jsE9Z1h9Jjl9
xNriBBeGa2NGHsmf3fNXFd1+/NdwzR/XMKcMXc7qZLenhT4tPYfh7l+sI35N
JJXjYri3WYcCdkQ79zfrfLgjFAju8Qs/tWFM/wVr1Fevl51mPf/eHvrh8NSI
dTFiwPqFYtYky7poW79baGj8s4EB06c4ROZ9K3lfCs5m3v2Qcz/mvM9ebst1
91z3wHH3bHcHrfkA5fQNS3qic3c0ek3NLKHXfXxGjs4qsQU9uWpRD/Lcekn8
WpfRid034uuqvQQxLBOTsvLIfzsDiURV/k9Pnc/lpv7WW/E7v6f8DTqkcwB0
v4DOjao/R7SzYeV0SD7uKgdtebcp7zUB6CQAuq2G8KUqfSnLX0rK54LytaBu
5bWvOf2za3y2jU1Hf2sqLw3xqcE/1vhHIOsM4YHBPdDYuwp1S8neVDJrchLW
dS19x6KfeMK7oryFc3wqZl5ja5B+aa6Ik+C/O/qfzmUEUt0+qQKN117kxDsW
t6Yx1yRQo9SCkF3ggblllzh6hWdWeSA/cMwuc+lFLDsCECUAi+Y5apnn74n6
hu5sO96J65057g845nInsAq540J+v5jbKnqbJfdd0Xlbst9VnI9Vb6vhHbad
H9jkLJ+XrpaTfVWSM1vPBFqZICDGMBX2QW8CVxSQYZyNjeFoZBTdnITIMB8Z
FmFFR5XYtJFedtmHReltXf3SVHbbZLOuqR6RbpODuopYV1PgM/laVrdglTCT
9F1O3XDExxqzJqQXmBSGFWZx6nAeAyDoZThlnr/Ji3dECUTrE019rukAdM8M
g1A7+Z4s3hC5ZZ6aZ9NTNKnRIDoR/xMK5xpGufiCRN/XlQ3X+pw3v+asrZyD
cGfrDwxhVaLnOCSEY3RslIqPUolR3PRLjKA3u/9lcoxNTXLpaTEzp1BLKnfd
kO85+nPPfJe3t0vO4d+gFgA6OGJ4gfXGFm/I6QkcEcXtviqOPyDQFTElJFgO
h6qhSC0YqwfClYFgCXfkgiBRC/2RQl+0cDUCq3g1Ur4KKBep9EXLsK7GKn2x
an+kMgAELwJ/Gf5JPhjIgfgFZhgFrAvX05EOHZ/gqTUFZeyW5xzglh2qqg/o
RiKA0p+g0sOZJAAd2S1EuBtOp8Yz6WkQsxRzjeHWaP46zZGtYGaJpucpYNdp
/EBoX8CmRqXkhAKclr7uSM8K+teqeVC3ThtYhvvRIsmk6EKgnjYQvs6A8lWN
46p+WNGOKug4iuPVVaSCRzhHQP5ODb1Jz1rG+d8N7Q5xJulqvYwYPzcNu030
czLRjybPcBzRz4k9yK8RfwGTUc+Rz+iX2YKkSjtGpqXG9Z6Rr78ItUN4GTV/
jVwu4Hhd85w0osA7OW+ZxL/d+llzTivuMTzFyt5RyTsseMCWD7zcvuscuA4c
t2170zRe6/Jjnb2lZq5J8MSJIxPgw8N8cJAPDAqBISk0pkRnzeSam31S4j5U
VbQeRcWnYGUZJzuMHsRd1o5x6uGvn8nkX6D7u0Gn/p5Ufk+RuYlJrGhcTCiw
fo0rv8aUn6Pq6bByMiQfdeXDQXkfsU7abYpw3GqIn6vCZlncLIof8soHT/2Y
U0FhfXS1t5b6Wpee6hxg2pqcWhITIN8WRD9JEF4k5zFaKzEtxKf46LQQncWh
7OR1K/vQ4zbK8JNByiHW/epZ4hO46/Wf+L09xq+G9QMnsKzPJf1VTnloi7c0
blWmrokZ0KfzyN+yi9hCBqCXWeBSsyTVEReL6T+LPAAFOms9VYFn2juOfeTY
p577w/N+5NxfBedXwftVyP0seGcl96Tintbcs7r7o+n8atm/O/afjvmnKf4q
YhpgKfVvGaPt+6qZ/kZmoJ0NtNMAeqEhKjREh4aY8BATukwlCHexzwQdjUbk
2KSWXLLZ+wV5o6p8aarbWJUA9ar6tZ7DprLfUC6xDmSs+q2kbRFq9yGvbXjS
IwM0OKL3JJ2cyCYnqdQUnQbEWyBdJasCd1MS7iniQ0UC6frE0J9Z+lMTpKh6
T5ZuifyqSOLq6NQYqUcPoo9HqI3JYqEuF5sWsjc1kLHI677hZJO97TlfPOe9
Y7009EeqfEvm1wT2Gu7Do8XHDJudolOTuLLTLDUvMMuScENV7pnaE9t4nbM/
FJ2vRWyrPqg4oNe+V+2zivO97H4veic576urP9KZOT4BqNtMh2uJUCUeKMZJ
y1wYHQhLoVA1GGsEE/UAULVwyd+O64OF5A1YXOlKrPxvtHo1UrkaJSvmr2pf
tDaAcFcOAAkM5ZDXBfBngoxNoIxtZWIjbPaahDL2U84+KLhHBW8/l/viOM8M
eU1iprnMaDY1mAK4i7USsVYy0cHumsRoJjmZzsxkKWTUWRqdUWnMFJ7KpjBn
kwjYET41IqTHpfSUmlkwuFuesl4ydurGcQPHyb+jE7Jva4OGDzjShV4ExF25
ASinArgd1RHfjjCGQDtq6CfwFxpobIXtCrhB19vTvvCBzneVHzII77p0cu4t
7SfBvfMRZG6//NEJAn3nY37QDOkr9re8/k7W+50nfsfamN/sQYJWyeq9QD1r
kPQKg9ybpNm44fyoOWdV+weh7qcl7yTvHec8YHS7jg1CD1jQY5W7KWeAyU/x
kRE21GVCbSrQQuuGvhqLq873NYWBQTk4rkcXndTdAvemKu+gU4T2fVD9QXKX
cMuOxOX86Rlvknqrr1hJk8lvgmm9RjvAPV+0TioXpJBxjhAn/xhVzsbk0xHp
aFg6GpKOBqWDjrjXApQTdhrCt6bwqSZ+KAsfCvy7HP/Wld66Mhw3HOmVyT/R
6NtSZhlbMuITXGQE7ne42VlQNNFh+JKLYEAJOQ5zIYDxESE8Lkem9cSSlbmT
Y19UxE8YpaefYUCA1usUIi12hNdh8tF50zyvW2dV4phdst7nzWeWfAfgjuyM
zfFpEGizbBrkKqDBNHZWwEpOMWm4KxdwL0u4KaLKuyepoOxeG/p7S/9smzue
dZi3vhes86JzAavkXFSci5p90bD/NC1cLetPx/rThXci/CpdqWQA6P4ppTEC
uJy5Ws301TMDDTIm0Mpi0jSmDmEeATyqgh0+NMiHBwUAuuiEllwwqds56WVZ
26yp2011r4Xl15O2fNKSj1uSX/TZAxlblUHGwgJSB+tLWd8s6hue/NAAKpue
YhNjVHwE+BVWSTCZGgTUPAMIz6yK3C1JvCfLDzUNsO6paQDcPda1+7J6WxQB
qRbZLLbf0IlhtNuFux4Ht1sUvOHIOMhYXXjuGp/I1NhO3t7NwXK2PfczOrA5
rw0bpPF9WbkpCqsCv8xzS+huxCww7BLHrYriLUV5oOvPbOutZ38puttle79k
H5WRjZ/5q+L+KLtnRe8wBxAq31AyE0wM0xNSAHTBMsnzLUSxmaQQDJZCYSB1
zWC8AVg3ELkEOtSqJULnKleiFcA6OMIiiAevq1djNaR2KGNLyOtC+WAwh613
QO0GihioFG6kY8NMZl7m75vGh5yzX/SOirmDXP6bl3tt6bcVDp6b41Sqm04O
puPtJGBdrEkIXjcVH0klxrFakZlCW9Q0fPgT2dQoxsokhmGxiWHQsAIWUmc0
bBG5n1ffVfR9nGswzprmD9Izf97Sf+J8nIqts039O5mYO26qx9izinNSx4By
OIMDX2og4s78VEdgg+1ehDcSuS5x2hzyXUpMOILARKAbRpTzs9h+DhMu589N
jBj+0CuA3s8Rvwjbk7SEHSm95MERf6rCL86SyakRtTct6+fU/Nfn0yDjVNh6
d0GyaS4wr8E6r9s/q/hQOy14x3l3F/dDtJemcE+llsXkNA8PmnCHCSLEURjQ
U81iQhCZIe2r8sSPXehvy4FRPTJnA9zxb+rqTls/7ujfu9pPX8wOX0rsv211
k72pf78UixUHvy8FeN2U/BtN2mXgcudj8tmofDYinQ7Lx8PSwZC4PygCyh11
xP02YJ2w3eK3GvznOve+zL/Jc29cdsOGxb9xhNcW/8JkHqjpFTE2y0bH6Mgw
HRqkA2izwww0aTijcAsDvkNAHtp4juEOh+4oHT7QlcIjCiBAfMFO38hjUfIT
iDjivoWNkR2/kq719iWIee9FA6PczsrWSdnZLbjvgBsY0g2ZWxbpRSE7x2Zm
EdlSUwxhPuismJml6QWWXeH464J4ixdvoHeucFsS7irCA118YoCQkd+42qan
7xSM46L1vWyfV+3fdfs3Ap35p2Uio4PV1f8M8r/K/XUag7Ew3DaDC/NPs311
ChstGhiKhH7jbfhVssGOEOiIwa4UGVXQn3PJpu/kRQC6T3X9W0Pba/qtJtjA
c9xUDrG0Le83Ffj+Xk3ercvbdYA79VsZu5S/lI13efmhSS+BOGJjIzTZH8vG
hkkD2AT2RQDcoZi9Lgq3FfG+Ij/StKe68dw0nhoYQ3xHFG8I3DWOnmcyKGOx
VxZHZRHrsqE2HRnlk9c07omrfyoauyVzr2Dt5UHfodskELyvjvvRdNY1/ZEi
44/ihTWOX+G4FZ4cOQ44800Zrmf5kaEBOfxQsLdK9l7ZPq5gKvSPqg0aB574
P8ve90Juz7PXLX5JTIH2b6WCqF5jyOiKAHTYUhLID2APSTUYbQTi9f4oYBcI
VcA6OJZhAX/7N1b7N1b9F19Ur0TKVyIAdLUrMVj1vlhtAOAxVgSEBKwLBLE1
JTSQAxkbC1SS4UYm1oXHosTdNfR3nrNXcFFwwbsq5EG2P9alZYGGK2c4mxzM
JNrpeCsVrSejDTRVQBsZQLwhNPuCBSo+PoJjs7EumrTHhtj4MJ8YEVMTSmbO
YK478nN4VKEbfC8B8LwX1IimwWdttHkBxPveUk9bymkTGxJwTrAOoIedlsd1
ELloO//DX7jDg6nfv3EiXvcXAg7yOqwdnA+b50MGAt2wv0dHRsBGyOgB7tTp
F2NE0o5o5yO9YQS/C/f35bpMZ/irZMnAgl+cHe0ZQCFykq2ziyHfXqDniPK7
3UM8wLozIHhl77Tg7mHTpvLEYq7DB4KhbBHC5YKN7ECNIv7kZDYERy2yfUXq
apm5UmL7KnxfTehvyYERPTLvZO4VpQ/wsfjUrktaaHysG/trTdyrt/6e1P2+
u4tx5WJMxuO4ej6u/ByTfgDKjSgnwwpA3DEQua50MCjtduTdtgR0bq8t7LSF
rRYHKPexyr4r028KzLpLr1v0a4t5bbHrFvtcp+4pyUUhPMYEulQAJw6ygTrm
IZLxPSpQp4J1Gk6tN1sKCNBigk2AAi7Y4skEgRyZIKYf13Pc05L0saruY+MQ
zt6SkTGCdThAof9uGL/qxllVJ2k7znbO3rC1RzrQCX5NYlcEdpmnl0BMsdlp
JjMDi6XmWOyMWmZ5uDFvwIIXLGY3L/PUsgBPmeyKmF2T6Zsad9cUntjSa1f7
WDC3y9i6/LNhAzP/00ET/j9d88+Q8WdQ+FUODfEDLbavwVyt0ZjyXKGuVrPw
uq9OwzcHmmygxQ602UCHC3TF0LAcHVcTs2Z21eEe5KX1CjA6fbuh7zbRmBdb
iFvqIbwA3GvKIGD3cIZCxjJ3Q96pKzugZysAd8ZWGdBDeWjRi2JinIkOw52F
vf3YADaaQV4xjoNg1CJRsrcAcxTpoaY+0c1nuvkUAUq5J0k3BW6Zwy07nPml
ot0sDq76XSLwPIKbdFFln7jap5KxV8bk8X3SarsPYjZnf3KsDV1/LEt3BP4G
z61y+DFeg8XDh8le4+DDB1bJwC/ipsLdM6RnjvY2b3wtWftl67Ri/qjh/gMK
nJJ7ms9te9Yzk5sXUiClG0DqEgPFaD/wLtIejK1xOcC6gVAtEAOsa/RHa/2R
Sh9uwQHQVfqJYv03XoP1T7T6L/I6ELPI8XDFqlfjhNdFSz7WgYwNYtdxPgIa
OVhJhRvZaJdNzUjcHVN/n7P3is5RycGNpmJuJ+e+tjS4orBCQcPbS7bTsRZ2
MkfqqXA9AS9iTWB6qXgnHQeFO4i+T7AiaPlFR4fY2DCfHEUBm12yuDs55U1F
223qJ/AE7/ksaSQ+A52szrA5H+EOjieAdS31pIFE7qimHNfl45oCL04aKgrY
OshY4ADaz8FewDdejYRcXZAoIsyRRKwzfg2ZP8nQhL9l53Mw38Mct+xGex3F
GMg1ZvweMy7+ThyQYas/vZErf0OMNJz0xse0XkWAtOQRGyjineIrWd/9qdOz
JyJ7Tc73knuQtzZd+bHFrKqpaTE2yqGTIfCfehZND9BxNDNQThP3A3T6Rbgr
0VeLTF+JA7jrr4sDbSU4ZsSWXPpZRd5u6acd4HUItliQ9Ttn/sboXKpXADeA
uN/j0sW4RHbkiFYdk05H5KMh5QCXvN+V9wbF3ba40wKBLG83AeX4Ly32U4N5
X2Hflpk3Beq1R6071CuTWodlMC+M7AM1eU0Mj9ID7UxfA0cgA9UMIaVZOJdg
lQrX0QMhVM+GG1S4yeAgSYuMX+GcKRtq86GOFB4GdqfH54Hd5dhnJfkzMPke
1SfhRwTrfgPW1fWfNcxV3y+Z3/LWO1d7aop3cQcAyAzyCkxk5phFgDsGFu5i
LTI03I8r+H0WUG6VwV67JSY7z2bmcFQqOQVql0vMiKk5Kb2kUmsGc9fmn3nK
h6KxX7N+NjEtHUndoEk0rPirlF3U4lNyZAwIGweY1o9pgGwAm2YB4pCvBrtC
aFiMjKFJXXLOoFYc9k5OfFpQN8r6p5q2U8fYF2xNbKhHTe0S6HDtE16H7A6x
rtfVs1NRd8r6TtnYLKqPbXpJTsDDcYgOD2ZJ5zDOMSGvGMWkUdDvFGDOdYw1
BGqnPNb0p6r+RNEey9oD9CDiVnl6gQNel8QWMnQeG6jBby0baJLReMC6x676
qWzsVnCm6bBoH6D9mrXpGeuWfF8Rrgs4a3YNPmQO2DI1h58kBZ8zceulFzlq
gc8uSdSKjF3WDy1lI6d/KVqHFQs7JTBo2PlRdE4K3pZnPTbYWT4JZ1FLhsqI
dcDo+r3AgDsw4A0QXtcfqfXHWgPx1kC03h+p9sXK/bESFiAQ1sr/AKmLkxeA
dRHEuisxgnux8tW4/zdLpBqbH8BGO5Sx4YFCLFBKwr0WHmRSsxJ/z9Q/5K09
ENrYBuOclnP7hfxHz35kKisyO81mRil4h7FWBvAtWk9FaqlwLRmuIeJFW2lg
pHAkzTZUtINRO/EhLjGMAjY9Y9CrnvS4BL9x/ahlng0asH4iLJAMbkxGw3Bb
wK6/vA7g7sSfia6TCRoyRHPcUE9A5DZxCB0HwQZJQq7vMtfFGsEvv+EW8A0b
TkjVAP4jxD29Nww7hOGqFz2YUi6Ge6adIEgvfKzrtW38N22QqNqeP4A/okXK
AT4G9tKle64gI8gqe3a+JF8bs2UboGHdk5L9Na89d5llLTUlwSMAdSsJHwxU
s8EaFapmSd5iJlyHlQWICNXQsaq/RPWXmYEK118V+htSf0cNTVjJWwXuXQ1E
n46JsX5IOsl4xfKxD9djRIaTGuuvUeV8VPo5hptyAHGwToDLDcsHCHHK7qAM
a6cjbbdBsYpbTfFzg9tssB/q9Psq9bZEbQDQ5bLrTvaVBShHv9KpFxr9WE2v
SdFJDuhcfy1FbBJTOKBaIVhHgC7aoKJNKtyiIm061oIFmoWONpkIwh0O+qF/
yCDCXWTCSCy42VsFfr2q7JBaM3E+Id2SbZyeuMDBIqzLbxXVt0CMbeGOxl6X
GVhrIrsmcNd5YBrUApOZw9xAsoEMR4ZeYOCb2UXsNKbgj7CISYPIjY/ScZKQ
Eh1hInjk4+NSYkZNLRnUbUd8VdS+1fWzFsAdwTrkdeKvsvzQ5W+b9KqWWpDj
03D6UnQMnlliFNa4HJ9UEtNqal7LLpvUDYe758nPi+qbsr5Z1r9W0djzAB7c
2DOMhdcjAnSHLX/JB00J2N0B0bAAdPvYV6zuofMJLPNrSX/usctqYhyEAJZQ
iXFuKkrawHqTmzN0ZhGL0dwtQbwrqw8V/YmqPVXUR7J6XyJddqBh2ewkBVQw
jm0k2QCoCUwNAK4opJZU7omjbZawmwuwbh+N44xNT3lmCbdVBpjwPLb3ZGZZ
4MwZEruQnWGycxzwZxpgFgsWXHoG/gKfWZCyqzr3wJFf57GF+KBmnwK1qwDW
Ia/bQqnI+VhXT4YqKGAHcqEBN4BAlxsIFbCfJOxjXbM/ViPbcaW+WOlKtPRv
jKx4GdY/McS6fyMAdxWkdkjqKn1E8GJ9NoxYF8A6LPzwXBgdUUpJIBWRDjwX
ZPGBZWySFNfjsk26/tzjUn67kHvtmHd0aVFkJtn0CJ3oZOOAbI10FLCumgxV
k2HAvUY6jEwvE0GbSjo6yAJXjA3x8TE5NaWlFyz2dl5drxrbDeO0bf5AoAMU
Mv2RdsA6jBNCQ2aFiFmMGSJ7tkDkCMo1cSz6sE5GpIkh+VnThEsRZWxvN9tE
Z7mu4aeEA4r+wEkx/C8I1mGF4hdpKvZbi/3CBBkZUy78UYgR1KoXPetLrZer
NfI3MJoMZPnTsiN/Z1H9iobR87vzcY/sFmIWErqXAz2wfzSw2g66YCMn3LLS
Myq6XHY4uN8DdQZNDGqAbFQYtR5mecS7dHyQjsHDok1HGvCn9ECFxr07oHY1
hLtAV4suutknZflrQz/uaETGokL/TU6BlI8v8Xlc+QWidVT7MaKejahkUw7o
nHQ4LMICLkcgDtcWoFyL+9oGLsd+qNHvqvTbCr1RpDby1IZHvXapdRtIHb1u
Mq905plG3VUTc1JoiBloZPsqPXNOgnVIUBHoWgy8fzyRLh0bYhJDbALPi4l1
mCicVwsILXwCPJpxdeXIsB6fstLLHvuoJH9saIfwIMOYPB3U60VTu2gYP6vW
CXZdGu/y4iObu6XTK3L2mphdFukVAcnbMm5GoS8uWlhn0rBmKLgfcQ95mvit
TWXT2IILig8zhXG+u+sLEGwzC7eZCHbAAnap8Rkje93jn5fVrSZcYBayO782
UTXeFbXXOeW5C++Bv2dzd2z2lsXeNOkbFnPTZm877F2Xf+CJT/Py66L6Hv08
jS245gHoagh0hzXsLTnEVjoVCN4eLpUsELCE2tWlg7p8UAeCh5bFh34vShWU
tfkqL6wZ6UkBPsxoJxsDeYW2LThIBYgXHyGVWQBzoLLXBf6OKN+XtEeq/ljR
HkrqXVEEDbsCoERnJrI4GtDF8gRGjDXpUJuNjgmZFQ1rE59L5l7ZAqDbzpsf
PfmZxV5XswtCeprDIbtx3AhNjeMocWYatwswhWGGzc7yAHQZnCwma0pIzcmZ
FZ25Z0sbBX2rYh3VcDzqrOR8L+S2Xeepxs9xKXgP9WS4Eg8WI8FCiAx2BRDr
8v2hAsrVWKM/2exL1LHACijnLwS64j+x4n+iJcQ6hDvgdWRFgPWRDb1Isa/X
X5cPDnik7SQfDRQTwXI6WAf9zmYWFOmRY3wqWgcljBI7reJw7knFOyrlv+a9
F7Z+SxUWJWqST4+wSbgl4cnSTMca6UgdUC4dwpWJ1KlIAx46THSQA6BLjMqp
CTU9B49CTwRS97FmYvYf7tRdRtx2ekm15yQ6DXldW4F1QpLBSUUejTWOyfTl
EQlMP8SgGQObkBukhusbgJDq5zkZ+cfVgavU/IktvhjKBtD6o2v4YZSkToEF
CwwZHya7baTKcPGXEZHqJOmjw2nTy2gt/Q+ZEftrCPBn2Gd3ZJdvmLig+E1u
wz61I3DXBqxzvtfc47Lztag8dOhFPTkmRbtCuMUFG2yoRoeA0dXR+RZocGIE
p+oyk1x2gk2Ps6kRFrAigiKXHqgyVyscLLJxp4QmzeSNgvCuoe6D6h/8699C
9hJ9Lkoc7S5IG8lPxDrt+zDBui72kxx0xd2usN0RvrUB4sSvTeFzQwDF+qFB
v6tRbyvZjVIWgG49n33lUq8d6rVN4U6dzaxb3EuDfaJnb6jRCT7QpvqJuzLa
0RRwpzGIQAf8jY132eQQkxpFr5v0JJeZ4NMTfGqcg+8A7qHzFaBci+8p2a4S
G9OTczZ9C/e19G1SiP/Z1H81gdGZ5+RO2ccterhE6TUtsyilsWsXh7+oJQEF
1BzcgOj8HMeUmRQ6qo2n4cvkWDo5hhW0OO4npxIj6fgQmXbskECBVgae0XDd
opNYA6gmnJEYHlLjU2ZmJc89q6nf4HmK1E7/3RbOqwbQsy8lLIy+L+qAexsF
7U1Rf1NQAdleF5W3JeVdSXlfVj9V9G9Vfadm7MCxou9id6i+X9X3qtoufl/b
qqhfKsqXKhxBNiqfK/KXmvKtLu/8JXUId8j9jhr6YdXcrVhvi/JtOzsjJUa4
WIeKtzLRRipMrOpwbpR4vKSmsxmQ8MsciyUYQb4nKfdl5Z4o3eK5NY44rdHp
SSpJsC6G5BBZd2iQiU8J9E1NeeVZX0hNAZTdZ9AgNndDy8xKxFSZTYwhGU6M
MjiPNsFkphDlqFlcWT9oZpLY844BJPKJCT45I2Wu6ewDV35XNHC4yZeKxdyO
573QpQUuDeobTqESCwHW5cO4WQe8zusP5PqDhb5wuS9W72FdvHIVIC5aBF53
JYKI90+0+E+k+A++KP0n0oNB+CNYV8MAdGRwLJiHn0awDn54IRYsAStDW8Lo
MJdZUqUnDprLHZat0yqmxJI+Z1Cy3mEp/znvPnf024awpFBTQnqUTQ7TcfjM
21nQKShVmlQEdQo6RUQ7wOiE+IicnNDSMya17Ar3itrbmrHbsk6A1PmilThA
EumKViQ/B3V0SAOs62DGEJA65HWAdT1jDcLriKnpIbaj9MYlfjQwAQ2rG6Qh
GfjeKVK+3iKgp3/vaGeYzoYtDbB+dNWfXUyU9juNL3ybYlKH7c1KjF2K05FL
OofIpveyU4m/E3I5svtHXvewDoFxhOwcdn2sA/i1fzYQ6/ZK1ps8f91KT6mx
ITEE93iTDzaA2KDhbRj4zxBcJDiTjq1KiyK3KGByxxSbGqPRtLlJD9QQ666U
uT5Qsk05OGLElzz2RVXebWlnODWm9sIyiGXxH9/oaVy+QPWqgHQlvE7xse6w
KyHWDYrfOsKXNv+pyQGXA9EKKPemkn1Tod6Us68LuNbzmVeE0a2DerWZ1za7
bgmvLO6xnl0BMsYG/HjfMrHbKqKABd2Nl0GXT47ymUmenhXpOZFZgNMRaViz
PDXFp8e4JBo7CNEOHwbEA3gZBFGvJqbM7KrHPy1h+ttRDV3OftaNc+L8c1gG
xSE9sqkVLTkrxiexuSUGFGKS6KYZJjVBoWtTFzQduthhh8AQSdQaRt+heBdD
Z+JkxTpkorydirTSaA9STxEnVTgRTFFHT9GWGO6q8Ukrs5bnXoKQbGLb5O+2
eF7Rdhr6dg1wDNia/rWif6kYX3Hp8OU3tGSHpX7DfTlzl7S+75fhCEzJ2C4b
XxEk1fcFZSMvv8qLL3L8M4976rFPXO6py8KXG0XxY0X6XJO+1uSdOno94YO+
YRzVcZjoU0l/7HJLamqcR+YPKE38umGFGuhEivVBomTT6FbHsmt/p0gEnJW7
xmaB1E1h9h9xpESsI9GxVGSITc5K3H1Le5e3t4r2XtHeLVjvc9IdIzsnJcZ4
YJIkIBUWhqIm4Sk8CTIWiLTALsDi6XnsuMtMMGl0V8BHNgAy/MPktJxdtbgn
OfVzyTpE4oSdV3u5/IaprQjZER/r4qECwTokYLhfN+AB1vWHy1iGSNT7Eo3+
RLUvVrwSKV4JX65I0Qe3f8MAeoBvCHG4QoWrCHR5EMJYhIWf2e+FSEh6HLGu
lgZSER8Tsyu69MIzv5XtYzJhelazftbt87r9o+adVnMH5dyXvLvuGvfQioSZ
k7OTgHhcaogl8gQYCK5El4t3cY8uOUqAbtaklz0AOnW9Ymxj7dUE6fqLNIdc
phYClwPEA96lfR9UfnQVgnXqMdmvO8ZCFeCbAkBH5s01ktmkH9WNY7S8tk5I
yt4JXg/6AVxjNW2bHPdwr0NFFdDSYR23tNO2dtqB/wJZEME6jfja+YwIgMv0
G0j+9AydyHDEaM/5hJR30YqcEDZS8IW/34vjuSxMXFqg/OmROvM3CR1Dq/aq
vVXSnrj0gpEYk8MdAbVbA+COQz+NLiYRpKdEal5ilyXxuizfVKSbCr8msks8
PcOlx9hohw41QO0C0JGabF0aABk7bdMPSsoXTJCHM8I5X5Tkfwfc8J3jNt0P
v3duRP4+LJ4MiQB0e4PCzqCw1eY/twDigMsx7+vM2zq1UcmsFzOvi9nXRepV
DoAuu57DegQwulc2+9rhNxzhtSMD3D3UsotidIgJNbIkA65niR+qUsBCY4Ns
clTITAK4SdyyIlxXpBuKfEORrivCisQuitSMkCbelfBAjHRExLqOFB1SExNm
eslhMTqtYh1gHDY21MGnd1gxPxXEJ3Z2WUtMiYCx4S627OJ80yhwDFjorIgW
9+1UuOVbECei7USknYh2EugkSUyJUfT5BsXwR80krFA9gSa3mM+SQeutMjVQ
xs8Z4C4C7G7azt4sSm8w28j82ZZ/YKCbvtcw9uq4+Ya0DVYdKw57KDfQLf8I
xx+ITXEVgW63bAHKfQYSmFdfuuJjGyCFuWNRN40ssNMVLb2sp65pqRUtdcPI
3LHpxx77vMC9LoqbVXWngT/qGP1a0ehvp2JvFORbJjUrw5MiCnysBm87NVBJ
Ev86OFnSDoEd/hTAGrWE0Xskuo5DoJun09M0dr2OUKjfcYiVCrVoEO8xeCot
KcJjW/9YsHaLzn7R2coZLx343SXH+GgXJDONwfeDOG0BWJeagIcLD8KWvSYJ
y5KwIrLXEO6oKS49jrELBBuxKAmokprTsrdsEZTsNuZHOEel3EE+t+mYt1V2
gkm00pFqIlyKBQHuQGl6ZMvO6wuQETBC7fqSjavJ6lXAOuR1RX9i4gocowU4
/huBYxE36MKFK8HClUD+ahBoYW4ASV1uoB+xLtzvRRDriqlwNQt6MzkpsbdM
7U3ego/0GF0ire8NnGf/Cce686PunNa8o4r3reS+zVtPXfWWJSzr7LxCA3RP
4lR7ZhwX9gxPSOkpJTujUwsWt+ZJ94va66r5BQCqRfbQCL796vayC0kXronb
a4BCXczG/d5GXAKUQwKPtare/gYu4HU1/aBq7oMoqKA6+FbVPleVj1X5TVlc
L/LPC8KzovC8yL8o8S9L/OuK8LYif4JHLXY06Qct7Qhrl8D0gN0h1p37LSJD
5sWIib3HY37yAhZkiT8nkbHoRUw233objL4/sOEP2/biZQEJuzqp8PpYZxAm
YJEBCuekan4siHfszLQaH5aAyQSbQqCJLlVR4D/wlJlV2GuadNPQ7hvmI8N6
rBuPdPUegIMEBC87xQLri7aZcIMNVpmBKsaq9jXk4LCWue5J72rYfPIDxygU
bK0hZss9JT4u/xqVEOVGldNR6WRYOBoW9rriTgd16+cWv9kClKPeVmmgc69L
1Hoxu17IoG4FiMvRWHh16XWHWXf41670xpXfeujruOFID3RqXowPsZFmNoSZ
lVg4JuqVDrfYaJdLTwj0nMyvqvId3XhsWU9MOC/jIXrZAe5x12RqRkqNC/Fh
PjIohDtiCBBvUI6N66kFm72X096Xrf0aSB7re8U6KVtbReWZC8/i+KQUGeKC
bSbQYgJN39MJe8ySo2hMEWlizoK/Iq0Exs00AdMSiHutZASjKBKxViJCnNj9
72MCRQ3924Pl5EAxhdS0SCpBNWB3UmTYSM55zL2y8qGh77WkwwraxR+2zMOm
DpflAabq6HBd7fuXFna5Y4zvEaY2o00xoNyngv4mrzxzhPsme0OnltXsopJe
UFJzMrDT5LSYmBJik2JsUorOSLF5NQHQd93M3LPZl3lls4pPbeC3JyRX67Dm
fCmbT1xxWcuM8n+xLlDB9w9nEWnhxh0ONI1l0lOZzEwGo+vmMO8vM4OeVyli
4oeNxINY2kD12mTCHSY+wdNrmvQcNF3B3se4GXfT0x6Y1IwYG+IiHRpQEQN6
sNpIx0fY9BRHLwjciizeUOVbinxTEtcEDp7LsxxQu8QwjSSwS3axhnmcjb2m
809y+iZI47JzUMod5vPfXOeJIc5xqcFMtJYMl2OhQjSQCwf88sSljA2V+qM1
4HVXE7W+eOlqlEBcJE/gLn8lkv8XjuECYXRwBJTLX0Wsy8M/HwDEA0WMLna5
SH8uGigkAqV0qEahL+68Ijx0jA9FaxeuLj94vWH9BFrSdH40bFhnDYA7F+Bu
p+J9LrnrOeuxq922pTWTv4YeEcwCLIOeN+gFk7lmCWuudLegPSsbb2vWVgOu
EOM7bqD55VESMI0S0iAT9NjxS5BH80MNQHKe+liHlq0qua7wGYdAB0K4an6r
6JslZaMovSjyj/LM3Rx1081edzIrdnrZSa+4qRUnteqmr3uZWx79oMC/Kssf
q+oWPH+bxmHbOGkb33t7d4i0OPIwTDqQkcgZf8ZMYmZi9EyJ8d3CO4cnOxyx
+EuMQM2zDvwQrCb/txCMp6P1moo75kXLPoeHRd09rJpvCvx1OzWhxbtSuIW8
LgDUrsPHRsXMjMKtGMody3zqOK9cd93x1i33pWE9UbU7En9NyM6A4vOxjgGs
66+y/TW+ryYOtOT4nCW8LAPWwblgkYXMu2mXti3KJdaJ2GEyKh2PYD1itytu
d4SvLeFzS9hssu9r9JsStQEol6dw5bKv8Eiv55h1j1l3udcuv+FJb3Lqe0/7
mDM3c/Z7V30Iv2gJsC7cpNB7uZoNonql4R1GAMDhcpoWmWuKeFvXn5rOhuO9
cbzXtv3Ksp4Z2gNduqGyi3JmSkiM8Lh12UFeh1g3pvlYpxKsc4DXnWBknvUh
L9yyEtNqeAg92AfqdH8NFhVoYFJbfDQLN3iskwaeRtJzEMFIkg6uCKwmWgPB
62jTX4lLrMPX4XoiBFiBnQ/JgUJ6IJ/tKzJ9FS5QF4MdLTZmp5fy3IOKvFEX
P5fhN26edKzjtgmX0GnLAL4HF/ZRUz9u6ickZ/mkbh7Wrf2K9bUEzEH8/5o6
D6+2tWbt/9n3hICrbLlbsnovliXL3WCbmhBIQkIapFcCIXQIoaed877fjMy5
311rlpfgHAi2tn77efaePfNKp54o+ftC5g6bvs2kZhhsPIHBJKdLxAD7xaNM
BYBPUJFBKTrFxuY4YlHMPNGodza/5QLulPOGAk72oq5/941NW1lVqTmO7BZx
Mwvcd5UMg7Tzgk4TdZSyRAe7BQW16HEvBl5B7CUGmUQvC8KP6ASZEo0gEaiZ
B5ql5xj6qSKuWWhggXVHZe2zzjwQUgM61i4AVGNN7PSKJ0kncC0uM88Ulzju
iQhTs/RCkldFGKgs4G6Bys8UUsA63OtBxRhr49mZ5CyXf6Jxa2XwjPqph5ls
J7a9por3mVwvn6inYh4RrcQxLcQE1xnCYptBll0InexY3B8j/LEEWFr7Zswa
iZojERNe/4paNyLmjYh1I2zdCFk3gZBhcyyClANFFwrDrzLCYyZuv47aSRB1
EQ8Tn5IDJrck8x8sZb+C7ZAufeVnXQ0ONah/gmpF1wIPyxYZl755WjWPXGun
Yq07+jtbfmlKzw1h1eJXTOEZvFrCi7L83lU3qtpeTf3eVC4C6wqiKBBRge+7
rgKHK+p/Y6Kv/Ae1E+7G4gobsg4DnOlZXTqpiycN+bSGcu7Yk3c98bPDgNp/
YuYeGOlFjZxXE7fk5JycnJESENMSMSUS0xASMSsn72ipB0b2uU19qHBfq9Jh
TT5twCgVUN3h8h3iF0sE4MHSQOAF3VEBXH+CE+jwZwPifgEeYVQ3MRH0qC4e
wWtDOmrI8IddAp9x/xcbC2KaRFDULmBdUMazZhx70ge7cE9NDsR4h0UP2ypF
2iWix6ZmhfxdmVvRlHeGsW6ZmzaEtWna67rxXpafC8wDtjBfSg+oRBfz04J9
W3gM6VGfGq2VopNS4bUrnMLfOUyhGVxX3rs+yzbgfvfZHz3mPAg8E9Fljzvs
QYvdqbPbdXrLL4Ko+1zJryHfch/N3AcDEFdcsyCoz1Zp3WI3bG6zLGzZWHR3
r6zul/UtU3qlFhd4sjfsm0aBv8aF/Xo+0sThnexT6VtM4YHAvpClNUPfss0d
CNPaMgF62ntNXJGwSfQtsABMssfEuyjqIm0u3hPgVqKu+1JRjj3syX5eMb6V
lY9G8a4U7zOhVnG0lsP+jJXMiIO92KKtTLKXIYF1LTJWSwC4onUyihdErBYn
ajGiHo834vFaIg6sq8Xj9Vgs6DAYQ/QRRFAhDX4q7CbGYOq3U2PYDSR308mP
efRYnY105cSMkVkql1557IYLk7Lyq6v+7Cpwx2GauwLoBTbhBw4P5aqhXtRU
GKj7rvjJLq1quXti+jaH/WGnKKAE2aeTWLc26J8I97SPEe/hAbpIpxjpYP/6
8AQdHjDx20J6WaPelvlNDw9UngHrfP3ct45c87MlPpLygMo2TC7ZqJ+OuKmw
i90DEdrw9uFNta8XLZNYJh1LNxNBmd84FmICRZeNNnAHFheveqXsgsC81OUv
tn7k6N8r+l5Zeq0Wh3NZKx9rYKZQsNuIBYsAjIX7PPNMkl7JyltFfadqr2Vl
leeXGWqhmJspBHkaKAWDBPJ8rEMnJrnMA6UUVHbSTjzj3AUbW97W1RWBmqHI
Nki7JEg7sLFYZDiwsaMg8KxgT7Ycirohwg8lvDGiPBqzb0ZA8oHJtUaAbxEL
HCsGXI+BGjTGwpi1gsAMG+CII0G5TrizZMRNA9uJTjF9iy+t6NIXEHVV9TxY
BIMZCsuPBN2y4IEF6P0CO9YEpaf/rGtXNfjYjTPfPPZNbHReMb66+hdX26ho
G676papu1bT9hn7cVEHwX7WVYb+/P8NGq8EZrn+7wwSFRyZQX/3qyiBOfiPu
8EjFZUO8bErgYWFSA7Pwva6c+DKY1h2X+1imV4zckpaZV1NzSmpWJqelBEgm
4NtAwOjDU8PGJzhMIZjg4n0xPiMRC2rqgVl44bCfPXGvBtZDvGwFO8L/7pLg
UYsJ5e/gFO1/guolfw/1W1O9hL+hIR7WuC9V0FHFV5XCKxeCeueV1n3gBv+t
iQ4dSyIHTXACA4sVAP5u6D9qxqEnvrEKixqyrstFOyBjmPg4S04JuQWJfqyK
b01to2zsOMa+Y+3Z9o5pb5rGJ1V5KXLLHHWHyUzRaBibxXCtOAasq5cAd2N1
OjIQ8y8c4aSDVZiwCdr/Oe6B6TGT3O8BWFfmdII9neAAdN+73Lcud9hmd+vM
tg+so754xc+VwppdWDPzIOQ+WtSaRX+2S59tZh0etAq/VRF3HGnfkY8cFZ6F
o7K+Z0tv9OKimApa4oKQA3MdGbKuUQT64a5EwDrulSwDtHct48AyDk3zwLJ2
TGNdU14p7LJYvMNmQecEhd0ibTbcYmM9PjWvUIGH/f+sO7DlN3ruFg9+P1TP
3fSw4zb2ALWx41KkmU5MZOCJJprXrAuq9RJRHyIGrAvgFgfuIejwy2gs6IsN
34ELAqVdIlYjIh4RchKhMjkWNHdD1rl0qAoyUoj1tfRdm3ldBWsQbNz3FDyP
E+Q1BcQD1qHeu2qpFw3tvK4dVaV1h3mm5e4KqVmWnCzhQn2PSvSw5USQcQqg
oxF9k9fEIyaK8Q5ME+goQ+3iWAdkHhOfEdIP1OLrMr+NXWiBolgr7My1Dx3z
oyE8FHNTpUS7EKvnItVMGHEHTzQZwr63yWFR33gDk1LirQzmvrbSsetDYZlo
IOqwcmyXIme44rIivje1HQQd9mPdtLgnUmaKibexK24s2HNEKk6Ae2XyINef
ydIbVfuk6p81Y00336vqS4F/xFB3irkp0HWFRBt+BNOowrU8LtT0mNSCRL2w
JCwe7ulnrnFeto4s84Mq3GWy/QIB+rwKTjaBuDPDY0YY84pR442FbCw4HPdC
CX8sGdSmi+KmQ2BRUb+hioNrlHMmXISvD8CakZAVC9nxcDkRdsiQm4pWM0Sr
QE7RxWVZeG+pu2DVYYD52kVNuwTfii075T9NBeVcC/sUB/QDvaf+xDP72LwY
bu5ZwzirGac146SuH9c0uCknDUCcet7ULlrqj7byK9BFfwc7nri2jx0TgmpI
/WGGmwSi7hewbnwosWRg3bWIasi44Y6UU4999bAqb1W4d3bxsZFdBMrJSeDb
pJSckoAhyT6fHPCJPkdMsDCicNG7CzcLl74jXTYyzkeBMzNyckHLPrFKHyr8
jo9+9ryp/MBtkSANr4sHygK1GZxpxXp02IkeXPO+L6x7pddO9pFF3jUStzXi
tg6RWDRTy+XsqlP84LHbNfGkjpM7TBB/sKwT9qH4XTeufP3AFV6YhTtKsi/E
O8i6WIdJ9Pj0rFS4rzCrhrRW1uDDB4V/5AFMzD3L3LKMz7r6RhGfiKW7uA2U
HKfjLUAKiLpSqM6M1UrAuthALDx3QNcNj8TC5/l/G08I/5lC1l302O/j/Hdk
HcZxmz9q8nt1bqvGfPVLXwDXFXq9TK2DkDPpAHHshsNtOgJQbteV9l31EDcT
1TNPO3XN7xXzwJHfGdR9MTNVIrs00aRijWK0VsD8mVoevHayX8zcKhWWePal
LG/o+r5pHGGla/PItPYNa1PX3qnCU4m6y2dn2EDXwc0KPGxPSM2r1IopfnVB
w2sXwDrH2AOboKZm2AiIOj8/4mZvYH/t1F82OeJg72DsHTZOJlqAuESkGlCu
FgfQxeoxgFtsWAMNvvTxAiLuRyO1WMSPRhF9RByEH/yIR+B5yXJyzCKDFm+5
MacYckuROh8dV8n5Mv3CZ75U/805Hy68dAPiAe5gdm6rl014FnQYqF8r3Esz
f19K3eKSuCZJwTyFcg4PS6Jth7kgNUWTU6XUdCmFeTh0okfFwJOCtGvjUmRw
1owOdxgCcPdQh+EqYEv0mnYGrMNdwvJu2Xir8/eF3CSNSZi1TLQKug5xh8dL
wc/6WIY34l8nvsaGiWH1dKSewSN7NcwLigVNndLzPL2iy+tlMLDIugNb+aDR
d0G0UzEUdaAAMQ0Al/V6VHaepR5J4htNWzPML6a5adgbhvVJ0V7xwqMSdYfK
ThbIbh4biMMPYtYoHpPB3bc5Pv9EF7ChkmeceiYQ+8QpbxnqM5GeK6U6OUxd
q5IRhwgDo4zIWEC8kIG11iN2KFYJx6uRRC2S8CLxSigGALQw0KvCtRkOB+11
IlYkgrWIo6FyHAJuaBT5nwLpSzRzYI4Kizz3Wpc3yxo8a9+r2Nj9vIa4+xHY
2J+YyKH+amkQVwHffiIGNfjmZRPjCq/1i7oKAuwc6adcNNQfrSAAdF2M30Fe
xz9B4tkwYQM3AvrysCwkSKnfE0GMB/IP4NNSr4CWuEYhn9WQdUdV5WuFB9A9
0jMLoOWk1JRAAuIGUqIvJPp8YsCTk3xqwJF9eHxg9qQT3VKiBXzAbNVwuxQF
8zjOxwZS8raafWxR7yvCni9/B6K2pB+Bxf7dUf9cZyMrv4Ht8Kaw77O0WWHe
lPPLZnpBI6blWF8Kd4UgxEhPiU2pxC09tWTln1eYjSrYW0C0+qOJnw9+gDUs
U7zriitm/raMrOtyMexiwCYnheCAsMa9MpUNRztw9W+uAYGsK1vbtrWha29l
AQbDPS47GyxttcEt0qDoUNdBNErxSbE41HV/X3dA+7ezLdYX5dHDAuv63EmP
P+1xZ+P8aZf/3sISkQdNbrcBuGM3Pe6Ly8F7/OKwG2VuoyxsOuJX0HKudOBJ
3zAxTD3B6tnahWdc4Ci1jhzto8k8VHKzfKrHYFdE0HVVXEuM1rE9DXrYOTp/
n2Oey/Karu2axqFlIu4s68CwtzUdJvQVYB28LybZh0+DiQP/2yzcytQdlV41
pa0K/KPaWUU/AblrCqtKaipgXTWP7tXOjJjpGwAlB55oMtEhyYlUoo27Dwg6
7JcKEYvWCdBvQ6bBN2PwHbgG4lUjwUUkQB8IPAJYFwMP5cADkgBdd9NKj5iZ
0TLa2HANzLWcnLHzj73CG3d4GhqH8d/jqO7+weISgcDrwIjVTuvaXlV6V6Ye
qplbAoktdaigjUUxEbRcISeZ1DSDdd7Av9/iMvNYcTQzxwyb74DKAqTgiZJ6
cQwEfAMsLUPMibknBvOpIh348kkddCPgzj527W1Hf61z98TsANRdgDs/E6mm
wx4ZBujh5iwJrAsDA8HkVtMRP4vre3hkD5wv4AtkJJ0YsLklmXtjqF9BsWMT
BGPbkl6qhTkO+1uBomtkMF22kY93C/B28vcF7rmqrpnGlm3u2dauCbwqf1aB
dfxyqXi7mO7nkp0cHp7yUzH8R/PhWiHaosDGZu+r3Adb3fPg74eBZJ27zjfb
/qTJDwVqmk518og7NxktExHAnRnDpTaEXjSEdZmiETcKM1eiHk1UI4QbjTnR
WDkawQj+q4MRdWJRJx6BqCQg4LfFfRC36UQ3n5miqEWOX1WUdVPbK+vfKtoJ
9iRVz6tYXu9ymNFRU5FdQVw2tIsm3lOQdlfNYShXDQVYcYEmDrfm4TuAuJ+B
nPuJKxu4uDE8mvoPjo1hSfNh7i6wDtXddUzg/4PrIR1gBVL0AuGJZe6++cqW
x7+1qWU9Mw+OVUhOItPIHmg5AWOKT01zmVk+O8tnZvj0DJuCQdWjk6A6MGeV
ijbocKOEeVNtPtYTkrcAdzbz0ZP2QDQ2lcum8rOl/WwDz1G+AuWu6sapr+24
wocy/cTILKrEtBQb58MtLlRnb1YZiNEqO+pzYw0+1Baik0rito5d8D64wh7A
GeRuXbuAAMVb1bcrwopRuC2TfZ4Y5wB08AoGFitcPdL5N7a6WdH3gXJBYc/9
irXr2Fu2tW5obxXxGU/fY7KzNCakIVXocJUK+cA6NtTiiBml+KLCH7X53xPD
I73/W6RF+GfA/43ZJngi7LzHgbo7G2e/d9hvLe4AoskdNPj9GlY83naFLZff
dnElfLsigZbbxYQx+bimnIKsrQ2XNdBAXUJUAXfGF1t4Bu9ISg9YolOK1ikA
XcgrwHMEZieJZofOLXD0Y1F8q2qbhrE/tLFYuMza0rT3Cv9UKCwwadCrIMID
0MW6HNEX0nfU0qoJ85p+7OpnFeMEOwgLz+TUZAkez1E3O1JOj1ipGwY5YpGj
AeuINkkGui5eS8QC1kV9jAg401o85EfDtVi4Go0NQeej0kPWVQOlh+iLxeHa
jaOoAF1np0at9KiZuWnnRytUqMpFmkpiyszcczJP7H9rQfT/3bjvB7V0UOPB
5K6d1NVNj181C4tSepolwahOFIlxCDSw5BSTmuOxmuWCkL8ngfArLkEIhUUu
d5tJBzs1RKcYawYnB/1CqFbEzfpxNjEv556ZMCXJR74KOAV1d+pZ3zwL9Mkr
nb0LuKMTrUK8kYsEuEPiBV2Jw7hLm8YEWj8T9nO4GVHD5CXcPwLQ9bj0bQkX
r9bK+l7FOKoYh2XjC3Z7yU7BbS3G6yDPMrheNzSwcwz1SBTfGfqmbezZBsxc
hxbMXPaaAh6We1gq3CqkerlEO4sb4tVhW2TsbRppFokem16UuLe2ul/VT339
ompeeOVTx9m17LeatMQXp6/VXdRLRZxE2EqErPhYEGE7HinHIy5MVXGiTiQx
Egk/GfdghopHXRBviaiXiFWJWDURryYJnwTEEbVUopEmO7lUL5+7RdNLnPhc
1j7p+o5tHDjGMUyjHrZvOPWw9hS8nlbhg4WpRL2sq6jcULwB8VRwdsC9q5Z2
2QIoKVfAuhay7rIpX7VA0qvoW7vDVVzt57j6O5j+/p4YDg+sLnJ90D4YLThg
BtIfVHfwUypMkT9R1ynIOnDENW23Kn6oUI+MzLxCgm8Fo9pjEz3Qb+ARgHJ8
Zg678BTuCMVFEYZZfp7PYbcUBh4QMA5Bt9Zh7m4p0mAibS7WF5Pzen6lzG/4
ynEjgDnY1Zb+E/UYMEo/8TV48F9bSNdbMuiNaJsL14FvpRGHvlGmb9gURpke
cZmbPmCHj0yIxJySfWyWPrrSHnj5mn5W08/B2vvmtis9N4vzyLrEBOKOmODJ
aSmzoNKPDeFtGVm3B6BzrQPX3K1Y2461aVmfdf2NLDwV6LtMdoYmJ5B1AVWo
sM+EGhzuEs5phecuv9cSrsbFoCjfv2d4B1jV5BduTGBJussec9FjTsbZ4zZ7
2GT3Qdc1+G8N8ciXQIcA2YBvcIGBck4+rMowvxzXtNNAqMPdv2roPxpB+Urf
uKqa+67yqkwvKJlJnmgzsToV8bFXWtgH11NIdIrgy7K3mOJ9jgVp90nXtgxj
z8SC5zu6saEor0Vumc/NBw22wJsHSw2xDgseNgOsWzGVL2jnjdOK8d0ytgww
vKkBE6kVR53cTTtzw0z9ZZA3LOyNHoYx3yLRw7aTuF5XxZW3iBePVGPgZ8N+
cBG8xrHObTSO6g6+jEY9FHiBpY0Tfhx0HT5igYcdtVJjFrCuMOrQoSofbqjE
wErfKZNLZlDKHktVy8ND0NdHAnFbTYPp8rgurznMIy03L5BTbLKPq6wYIOoG
pTTMxQtSYUmhH6vMis4914UXOr+qsU+U0pJYWOCxjeyAJoJNqGD9sxj2AXel
yAQHuMu/MIWNinroazA4z3wdV8s9GCraKwPV3RST7F43YUegVXORah60HJ6z
xlIzyM9oHXgYNCjvsmQfVKVEPTHEjw7M6da3qnWMGWX6J5NdknAltl2I1/EM
VLSRjXXyyQGVvcMxK4oMom6nbBzYxnfbPDSsr5r5XpZWuNJdKjudT3WzBODR
D0DnYgfkUQ+kHRUfZ9MLMvvWUpB1aHbMCx+kXfnEcXbKFuDuIZhZJtsrJlu5
uA8CjwT7Ga0kUaGB2PMg4OYmiQaZbJFkJ5XuplOdVLIFkU62MkQrnYBoZ5Lt
DNnNkt1ceqKQnSwWbpVK91jhKa+8kfV1HeZNfd8Gnw7uyfjmoLo7cpR9R9lz
1L2KeuAqR95w5GPVdHCUZw0kHkg4BF1bu2gDJeBCvmjLP9rqj0DOIeXGFYhf
gK9xJbCoEnjVPyjhhkfslWtdN5CDmucysO4XLvkGuXZtEIcoIEEXffPVdZd9
ZuXuqOlpMQmgG/Z4QlHHpaaF7C0YJxJ9T2YeyMyygvEAfB/IBj43x2anSqkJ
OtGh401M3w1jBi8T7aCZTd036DfIJZgrgycacNfUL+sw76i7nvDGppbU9JwE
/1a0VQr59KgHcKP+Mgv/YxT+Ry/8pef/MoojNnWzQo/5TLjJRnsCeVstPLW5
z55yAKOxZpw1jJOaueOpr+3SXTU9KSYnBLInJntialbO3dVKTy3xnaN9qRi7
MNI848AFUWdtle0vtrlmqq8V/hFPLTDZKQpHMszyPjVWpceqoOu4KLBuRs8/
c4UdENXj4u//Pfox4P87wGwTZB3ouj53OYGB9Uw63HGLO2qJx00JBO1xDZ4d
+aiqANz2cVlS2vPRKx3UsNMuqIjvNZzgruo4BYDc/Q1RB+JZJ1VzvcI/1PPT
UhJkaoOO1dDGgmeJ1XNEe5iFRWMW1rLAvVSkj4r6RdO3dH1DVd5L/DPh2piD
cetQ0RYdbYG04xI9MT2vlVYsedPVjn3jzDOPy+ZXU1pRMgMOOD/mZHFXwkyN
gK4zyVE7idUXG8GSXYckGslIFRsWhCvxEPYsIMKg1txoxIvBa9SNxKoo58LV
WMiLhr0oADBWjcfR3hKYvV8hcR27nLppp0et7GgZZCTcdzHS0oi+Td6uEItm
UNz+37L8eKKwr/ynp/wH/GwHBo92UBPBwC4pmTmeHAxX6grJbtBbaprJ3BYL
SxqzYgqvLflDWflU1j452ntbeR10JFmWi3eF7BybGqC6i7awAE6kVgjXiuFW
KdrnyLsK9SLIPDyoqieYSI/7g4A7mChfmex9OTfDJScYkNlEi443irF6EI0i
bpQ36WgT55REB2Z/FgRDdl6mn5ji+4q2XdW/+eaJb53AVFvR3hmlu0Kqx8Sb
BdR1dSzpGe9kk5PF3CLHvVDUdWSdeYCLEtaeYawr2mtReFQqzhcygyzZQkEV
raZAWI5VsnC/MDe7Rkcn+NSiyr0DXecD6wDUYBPwhMKVWz6tVHbt8gdNfyoJ
ixw9S+d6BdB4iWY2Uc8QtTQEHr2vpYhGGlCWGs9m+tncdL4wUyjOFiGo2UJ+
ppCbLmanitnpYm6WLs7R9B2GW+LFp5LySjY+KPaGZm0b5p6p71n6nq3vWMqW
JW5Y/JrJfjBK8K7fmcx7k/lolT6Xmc0Kv+uJh1Xpe00+a8iXLSXYcFevgEsd
jCt4BRUHYr4LlFN/TaCcCzatEHR/UMIp16ADCxDE333ld8C6wNUiDP8ZlzGT
DV2wCkILJBaYqbdleknPzEqgi5IwxwHrxhmYmNJTfHYOmCbTSyr3WBOeauJK
EM8U/jEQT6IX+MIckxmUyOHaXQN1UaxRirW42ISQBC6tlIVNTwUBc94YLjxi
38NvVXWtwj42srclwCmMEFAUIRdm+cKImb+h5/7Ssn/p2RtGbkTPj5jFm2UK
HopwrQTKJDEtpe8b1GtH2qpq3+vIulPcqtbfO9wDPTsDMyaf7OFKY3rIuhVT
+lDWvjj6jmscuibY2IOKvV0ub1jmR1N5qbAP+eI8m8FjQaBOKZgixzwIOlRj
Iy2RmDZyTz1+uyVfdKXfvX8LUgW67k+f+zngfwyEHwPxZw9CvpqQL7viRVs6
byvnKMXV0wbuJR3VlH1f3K6KXz3hi8etu8BqeOU3XPGrK4LYA7lyhmJew5rk
SDzz0rf2PfWFXbqjpHs80SoBh6PwYGJ5E0xRgAccpd1sKb/AUss8syoIWDpS
Ft9I7KpAPeBy80Eu8XjQjLVRijbZWItP9KXMHZ1ZtZWvnj5k3XfH3LKlVS07
zccaNOiEETs9YqRG9NQNnbxpkaEKGa0HTQG6JNFMRH2scItnyZ3YEHqRSuw6
nGhAPEAfgi7kAgzBAaGBxY0JN9iwC/ZhR200sGMOfM5swDqdmHTIeS92x5Cu
u+tef87Iuv9OYIrmr7Z+0dJ2a9xrO3dXTs0At69BR44XgXupWS63oJQeW8Ib
R/lc0Tddc6tqb9XsDddcc7S32HWOWVbBmGRnWNDw8W4x1sKCMPCphupUCKTv
jJB6oJXelcVtVz6uSuceLiyc+eVD39nwtOcWfU/NzMqpvkCCEugwBLjUFgz7
UhznESbeYeHZSYGcmxZzdzT6kSW+dfWvNfOorp/V9XPPPKmYe47y2qAXYDou
xUHXNVCkxZvZWDeXnKLy93j+paoA63Zt6xDCMnc07aMkrbLM/WJ+LpeaSCfq
JFElA9Zlxsq5MScX8gqYMDDBpxcV9q2t7YEBb2jnNfWialx55g/Xuqq4J5Xa
ru1/Mp3nmrYsC4sCPcflBkxmgkp3CmQ7RwZnUdGQTuQzg2J+hqLmGe6eIC+L
6mNRfcSLDwTuvsDe5dl7PLckiMuS8lQ2XmrmO936pJc3NGdLs4HMe4a2bSib
hrCm02+V7HMp/VQiHwnEQyH+gE8uC+RjMflMTr3U8h9N5qvDH3pYgwvzJ5vy
JWo5KUisBSGn/hjXrsa1y3GUdr8n1CB/A/VbsAExVHTKfyeVIFkXXsHGKn+D
wMPSHNfNpvEwQkf5M8RdS7togIEVXpj5RQUTccG0IuhKYHxSfTY7LeZvy9Q9
lX2kiyum+sLSX1naK1N7aciruvBYZZdEaoHLTTPpiRIJMxpMbXUqDqxrcvEu
n5yRcw8N7lNFOahpF8FWwiXucxl7HtL1PshI8JslmBbRSrh5uHcjJiAuM2Jk
4WLEzN00Czct6qZNhSq4jBZtluJ9ITmv5ldMYAXoIuOsZp359mHVXHOFx2Zh
Ts5Miqm+mJrEY8KF+zq7akufHGWzou0i6/QjxzisWDtOed223uvyqly6z+Vv
lVJ9CqRpDP+SQsgrjnmlcJ0Pt6TYlJ594nJbLemsC6o4OPcxlHZYcJj/ORB/
Tcq/B8ofmFN62i+ICQlToFvqcJ46a6rf62ArgGnsWoV65xRfWvlVK7ti5Z5b
+RdG8aVOv7e5Lx6/j0WhlR817XddxdrytfJJzV7zpGUzhwnSTLxFYaUmPxvx
wfjkwQGBmElN0XiYaLGUf1iiHzPMU5Z+whUfsLlFJj1bSuBuC64tRGpwXxii
BXyQs/NG6bkjb1XN7751hg+gseNIL3RgXbxB44xTzuLGhBGwzkyNOamIHzQF
6KQIXLJLBgotHpTOwJ24iENEK/AaD7bnIpFKGMONhpzomIMMBDMLSBxziLEy
CEX4nYDQzIidG3WokMdGalK8YyRn3NQdL3Jb/3+z7PPo
        "], {{0, 280}, {420, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag[
       "Byte", ColorSpace -> "RGB", ImageSize -> All, Interleaving -> True],
       Selectable->False],
      BaseStyle->"ImageGraphics",
      ImageSizeRaw->{420, 280},
      PlotRange->{{0, 420}, {0, 280}}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"cells", "=", 
     RowBox[{"SelectComponents", "[", 
      RowBox[{
       RowBox[{"DeleteBorderComponents", "[", 
        RowBox[{"Binarize", "[", 
         RowBox[{"i", ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", ".7"}], "}"}]}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<Area\>\"", ",", "\"\<Holes\>\""}], "}"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"100", "<", "#1", "<", "1000"}], "&&", 
         RowBox[{"#2", ">", "0"}]}], "&"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"circles", "=", 
     RowBox[{
      RowBox[{"ComponentMeasurements", "[", 
       RowBox[{
        RowBox[{"ImageMultiply", "[", 
         RowBox[{"i", ",", "cells"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Centroid\>\"", ",", "\"\<EquivalentDiskRadius\>\""}], 
         "}"}]}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Show", "[", 
    RowBox[{"i", ",", 
     RowBox[{"Graphics", "[", 
      RowBox[{"{", 
       RowBox[{"Red", ",", "Thick", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Circle", "@@", "#"}], "&"}], "/@", "circles"}]}], "}"}], 
      "]"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6230029822912235`*^9, 3.6230029955834465`*^9}},
 CellID->1908635966]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Wolfram Alpha", "Subsection",
 CellChangeTimes->{{3.6227561194928274`*^9, 3.62275612082183*^9}, 
   3.6230200007942543`*^9, 3.623022220797247*^9}],

Cell[CellGroupData[{

Cell["The Idea", "Subsubsection",
 CellChangeTimes->{{3.6231295371905217`*^9, 3.623129538339587*^9}}],

Cell[TextData[{
 "Wolfram Alpha is a computation engine which tries to answer ",
 StyleBox["any computable question",
  FontSlant->"Italic"],
 ". One of the more incredible features of Wolfram Alpha is that allows you \
to enter a query using ordinary English syntax (in other words, you don\
\[CloseCurlyQuote]t need to know ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " or any other programming language)."
}], "Text",
 CellChangeTimes->{{3.6230199956829615`*^9, 3.6230199989311476`*^9}, {
  3.623021682409375*^9, 3.623021701354459*^9}, {3.62302181691685*^9, 
  3.6230218236252337`*^9}, {3.623021856553302*^9, 3.6230218762377806`*^9}, {
  3.623022084005822*^9, 3.623022108902492*^9}, {3.6230221563107753`*^9, 
  3.6230222028820143`*^9}, {3.623022275003893*^9, 3.6230222865339203`*^9}, {
  3.6231296253755655`*^9, 3.6231296841339264`*^9}, {3.6231297230561523`*^9, 
  3.6231297468865156`*^9}}],

Cell[TextData[{
 "Wolfram Alpha is a very ambitious project, aiming to answer computable \
questions ranging from ",
 Cell[BoxData[
  FormBox[
   ButtonBox[
    RowBox[{
    "how", " ", "many", " ", "cesium", " ", "atoms", " ", "are", " ", "in", 
     " ", "1", " ", 
     SuperscriptBox["cm", "3"], " ", "of", " ", "cesium"}],
    BaseStyle->"Hyperlink",
    ButtonData->{
      URL[
      "http://www.wolframalpha.com/input/?i=how+many+cesium+atoms+are+in+1+cm%\
5E3+of+cesium"], None},
    ButtonNote->
     "http://www.wolframalpha.com/input/?i=how+many+cesium+atoms+are+in+1+cm%\
5E3+of+cesium"], TraditionalForm]]],
 " to ",
 ButtonBox["pokemon taller than 6'0.8''",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=pokemon+taller+than+6%270.8%27%\
27"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=pokemon+taller+than+6%270.8%27%27"],
 " (where Wolfram Alpha tells us that ",
 ButtonBox["Barack Obama's height",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=Barack+Obama%27s+height"], None},
  ButtonNote->"http://www.wolframalpha.com/input/?i=Barack+Obama%27s+height"],
 " is 6'0.8'' (in the future, you should be able to query directly for \
\"pokemon taller than Barack Obama's height\"))."
}], "Text",
 CellChangeTimes->{{3.6230199956829615`*^9, 3.6230199989311476`*^9}, {
  3.623021682409375*^9, 3.623021701354459*^9}, {3.62302181691685*^9, 
  3.6230218236252337`*^9}, {3.623021856553302*^9, 3.6230218762377806`*^9}, {
  3.623022084005822*^9, 3.623022108902492*^9}, {3.6230221563107753`*^9, 
  3.6230222028820143`*^9}, {3.623022275003893*^9, 3.6230222865339203`*^9}, {
  3.6231296253755655`*^9, 3.6231296502689896`*^9}, {3.6231297587201924`*^9, 
  3.623129764081499*^9}}],

Cell[TextData[{
 "In version 10, more of Wolfram Alpha\[CloseCurlyQuote]s data is integrated \
directly into ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". Provided you have an Internet connection, you have access to a huge \
reservoir of data. You also have ",
 ButtonBox["direct access to Wolfram Alpha",
  BaseStyle->"Hyperlink",
  ButtonData->{"guide/WolframAlphaIntegration", None}],
 "."
}], "Text",
 CellChangeTimes->{{3.623022208420024*^9, 3.6230222184416428`*^9}, {
   3.6230222955719395`*^9, 3.623022314874979*^9}, {3.6231295681622934`*^9, 
   3.6231295743986497`*^9}, {3.623129609391651*^9, 3.6231296093946514`*^9}, 
   3.623131540915862*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Wolfram Alpha through ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Subsubsection",
 CellChangeTimes->{{3.6230223249280005`*^9, 3.6230223295880103`*^9}, 
   3.623023575093421*^9}],

Cell["\<\
The following calculations take time to load the first time they are called \
(when the data is retrieved from the Wolfram servers), but subsequent calls \
are fast.\
\>", "Text",
 CellChangeTimes->{{3.623023476552846*^9, 3.6230234985024853`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Plot", " ", "a", " ", "molecule", " ", "in", " ", "2", "D", " ", "or", 
    " ", "3", "D"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Row", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ChemicalData", "[", "\"\<Caffeine\>\"", "]"}], ",", 
     RowBox[{"ChemicalData", "[", 
      RowBox[{"\"\<Caffeine\>\"", ",", "\"\<MoleculePlot\>\""}], "]"}]}], 
    "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.623023078100738*^9, 3.623023129613228*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Plot", " ", "correlations", " ", "between", " ", "different", " ", 
    "properties", " ", "for", " ", "a", " ", "class", " ", "of", " ", 
    "chemicals"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"ChemicalData", "[", 
         RowBox[{"chem", ",", "\"\<Density\>\""}], "]"}], ",", 
        RowBox[{"ChemicalData", "[", 
         RowBox[{"chem", ",", "\"\<BoilingPoint\>\""}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"chem", ",", 
        RowBox[{"ChemicalData", "[", "\"\<Alkenes\>\"", "]"}]}], "}"}]}], 
     "]"}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<density\>\"", ",", "\"\<boiling point\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6230234502909994`*^9, 3.6230234630080223`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Plot", " ", "the", " ", "lifetimes", " ", "of", " ", "known", " ", 
    "isotopes"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"ListPlot3D", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"a", "-", "z"}], ",", "z", ",", 
          RowBox[{"Log", "[", 
           RowBox[{"10", ",", 
            RowBox[{"QuantityMagnitude", "[", 
             RowBox[{"IsotopeData", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"z", ",", "a"}], "}"}], ",", "\"\<Lifetime\>\""}], 
              "]"}], "]"}]}], "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"z", ",", "1", ",", "118"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"a", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"IsotopeData", "[", 
             RowBox[{"#", ",", "\"\<MassNumber\>\""}], "]"}], "&"}], "/@", 
           RowBox[{"IsotopeData", "[", "z", "]"}]}]}], "}"}]}], "]"}], "//", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"#", ",", "1"}], "]"}], "&"}]}], "//", "Quiet"}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<\!\(\*
StyleBox[\"N\",
FontSlant->\"Italic\"]\)\>\"", ",", "\"\<\!\(\*
StyleBox[\"Z\",
FontSlant->\"Italic\"]\)\>\"", ",", " ", "\"\<life time\>\""}], "}"}]}], ",", 
    RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], ",", " ", 
    RowBox[{"Mesh", "\[Rule]", "False"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.623022956888497*^9, 3.6230229767535367`*^9}, {
  3.6230230088106017`*^9, 3.623023025049634*^9}}],

Cell[TextData[{
 "The following paclets are large pools of data that can be accessed through ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". The amount of data, and therefore the possible ways of using it, grow all \
the time!"
}], "Text",
 CellChangeTimes->{{3.623023513684312*^9, 3.6230235700536127`*^9}}],

Cell[BoxData["Internal`$DataCollections"], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Neat Wolfram Alpha Searches", "Subsubsection",
 CellChangeTimes->{{3.623022333015016*^9, 3.623022336694023*^9}}],

Cell[TextData[{
 "Chemistry\n",
 ButtonBox["Lewis dot structure of ATP",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=Lewis+dot+structure+of+ATP&lk=\
3"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=Lewis+dot+structure+of+ATP&lk=3"],
 "\n",
 ButtonBox["D-(+)-glucose + oxygen -> water + carbon dioxide",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=D-%28%2B%29-glucose+%2B+oxygen+-\
%3E+water+%2B+carbon+dioxide&lk=1"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=D-%28%2B%29-glucose+%2B+oxygen+-%3E+\
water+%2B+carbon+dioxide&lk=1"]
}], "Text",
 CellChangeTimes->{{3.623022387234004*^9, 3.6230223938283815`*^9}, {
  3.6230224967822695`*^9, 3.6230225005934877`*^9}}],

Cell[TextData[{
 "Physics\n",
 ButtonBox["free particle in 2D",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=free+particle+in+2D"], None},
  ButtonNote->"http://www.wolframalpha.com/input/?i=free+particle+in+2D"],
 "\n",
 ButtonBox["Maxwell speed distribution for neon at 800 K\n",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=Maxwell+speed+distribution+for+\
neon+at+800+K"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=Maxwell+speed+distribution+for+neon+\
at+800+K"],
 Cell[BoxData[
  FormBox[
   ButtonBox[
    RowBox[{"1000", " ", 
     SuperscriptBox["m", "3"], " ", "dry", " ", "sand"}],
    BaseStyle->"Hyperlink",
    ButtonData->{
      URL["http://www.wolframalpha.com/input/?i=1000+m%5E3+dry+sand"], None},
    ButtonNote->"http://www.wolframalpha.com/input/?i=1000+m%5E3+dry+sand"], 
   TraditionalForm]]],
 "\n",
 ButtonBox["distance from the earth to the moon/average step distance",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=distance+from+the+earth+to+the+\
moon%2Faverage+step+distance"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=distance+from+the+earth+to+the+moon%\
2Faverage+step+distance"]
}], "Text",
 CellChangeTimes->{{3.623022467661604*^9, 3.623022474040969*^9}, {
  3.623022632210016*^9, 3.623022669052123*^9}, {3.6230227434553785`*^9, 
  3.6230227489556932`*^9}}],

Cell[TextData[{
 "Biology\n",
 ButtonBox["giant squid eyeball size vs basketball diameter\n",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=giant+squid+eyeball+size+vs+\
basketball+diameter"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=giant+squid+eyeball+size+vs+\
basketball+diameter"],
 ButtonBox["human brain composition",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=human+brain+composition"], None},
  ButtonNote->"http://www.wolframalpha.com/input/?i=human+brain+composition"]
}], "Text",
 CellChangeTimes->{{3.623022605454486*^9, 3.6230226119118547`*^9}, {
  3.623022674807452*^9, 3.6230226790276937`*^9}}],

Cell[TextData[{
 "Cute Calculations\n",
 ButtonBox["how many pennies would cover 2 square miles\n",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=how+many+pennies+would+cover+2+\
square+miles"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=how+many+pennies+would+cover+2+\
square+miles"],
 ButtonBox["2pm Pasadena, CA in Austin, TX",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=2pm+Pasadena%2C+CA+in+Austin%2C+\
TX"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=2pm+Pasadena%2C+CA+in+Austin%2C+TX"],
 "\n",
 ButtonBox["antipode of current location\n",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=antipode+of+current+location"], 
    None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=antipode+of+current+location"],
 ButtonBox["dog vision mona lisa image",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=dog+vision+mona+lisa+image"], 
    None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=dog+vision+mona+lisa+image"]
}], "Text",
 CellChangeTimes->{{3.623022483570514*^9, 3.623022490476909*^9}, {
   3.623022523726811*^9, 3.6230225962869616`*^9}, {3.6230226846590157`*^9, 
   3.6230226890562673`*^9}, {3.6230227277474804`*^9, 3.6230227281165013`*^9}, 
   3.6230227808125153`*^9}],

Cell[TextData[{
 "Socioeconomic Data\n",
 ButtonBox["biggest countries with population <100 million\n",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=biggest+countries+with+\
population+%3C100+million"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=biggest+countries+with+population+%\
3C100+million"],
 ButtonBox["relocate from Pasadena, CA to Los Angeles, CA",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=relocate+from+Pasadena%2C+CA+to+\
Los+Angeles%2C+CA"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=relocate+from+Pasadena%2C+CA+to+Los+\
Angeles%2C+CA"]
}], "Text",
 CellChangeTimes->{{3.6230227139346905`*^9, 3.6230227297325935`*^9}}],

Cell[TextData[{
 "Health\n",
 ButtonBox["human, 5ft 7in, 140lb\n",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=human%2C+5ft+7in%2C+140lb"], 
    None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=human%2C+5ft+7in%2C+140lb"],
 ButtonBox["20/50 vision",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=20%2F50+vision&lk=3"], None},
  ButtonNote->"http://www.wolframalpha.com/input/?i=20%2F50+vision&lk=3"]
}], "Text",
 CellChangeTimes->{{3.623022452238722*^9, 3.623022461484251*^9}, {
  3.6230228452112455`*^9, 3.6230228498612623`*^9}}],

Cell[TextData[{
 "Language\n",
 ButtonBox["words containing letters abcdef\n",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=words+containing+letters+\
abcdef"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=words+containing+letters+abcdef"],
 ButtonBox["pneumonoultramicroscopicsilicovolcanoconiosis",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=\
pneumonoultramicroscopicsilicovolcanoconiosis&lk=1&a=ClashPrefs_*Word.\
pneumonoultramicroscopicsilicovolcanoconiosis"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=\
pneumonoultramicroscopicsilicovolcanoconiosis&lk=1&a=ClashPrefs_*Word.\
pneumonoultramicroscopicsilicovolcanoconiosis"]
}], "Text",
 CellChangeTimes->{{3.623022695210619*^9, 3.623022703010065*^9}, {
  3.623022755834087*^9, 3.623022760223338*^9}}],

Cell[TextData[{
 "Pop Culture\n",
 ButtonBox["movies starring Fred Astaire and Ginger Rogers\n",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=Movies+starring+Fred+Astaire+\
and+Ginger+Rogers"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=Movies+starring+Fred+Astaire+and+\
Ginger+Rogers"],
 ButtonBox["what was the weather in the live music capital of the world when \
Michael Jackson was born?",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframalpha.com/input/?i=what+was+the+weather+in+the+\
live+music+capital+of+the+world+when+Michael+Jackson+was+born%3F"], None},
  ButtonNote->
   "http://www.wolframalpha.com/input/?i=what+was+the+weather+in+the+live+\
music+capital+of+the+world+when+Michael+Jackson+was+born%3F"]
}], "Text",
 CellChangeTimes->{{3.623022378057479*^9, 3.6230223950584517`*^9}, {
   3.623022426769265*^9, 3.623022445047311*^9}, 3.6230225669322824`*^9, {
   3.623022782749626*^9, 3.6230227871968803`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Expert Section: Special Topics", "Subsection",
 CellChangeTimes->{{3.623126234921507*^9, 3.623126244972925*^9}}],

Cell[CellGroupData[{

Cell["Localizing Variables", "Subsubsection",
 CellChangeTimes->{{3.6231263956924105`*^9, 3.623126397845215*^9}}],

Cell[TextData[Cell[BoxData[
 FormBox[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"\<\"Localizing Variables\"\>", True->
     StyleBox["\<\"Localizing Variables\"\>", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:tutorial/ModularityAndTheNamingOfThingsOverview",
    ButtonNote->"paclet:tutorial/ModularityAndTheNamingOfThingsOverview"],
   Annotation[#, "paclet:tutorial/ModularityAndTheNamingOfThingsOverview", 
    "Hyperlink"]& ], TraditionalForm]]]], "Text",
 CellChangeTimes->{{3.623126885043768*^9, 3.623126885106168*^9}}],

Cell[TextData[{
 "When you Set a value for a variable such as ",
 Cell[BoxData[
  RowBox[{"x", "=", "2"}]], "Input",
  CellChangeTimes->{{3.6231264554513183`*^9, 3.6231264556697187`*^9}}],
 ", you may end up inadvertently interfere with another part of your notebook \
that uses ",
 Cell[BoxData["x"], "Input",
  CellChangeTimes->{{3.6231264554513183`*^9, 3.6231264556697187`*^9}}],
 " (and either expects the symbol or a different value). For truly large \
programs (i.e. ",
 Cell[BoxData[
  FormBox[
   RowBox[{"10000", "+"}], TraditionalForm]]],
 " lines of code), localizing variables is an imperative."
}], "Text",
 CellChangeTimes->{{3.6231264028704233`*^9, 3.6231264057050295`*^9}, {
   3.623126438878688*^9, 3.6231265378006644`*^9}, {3.623126929631646*^9, 
   3.6231270501386595`*^9}, 3.6231315531374855`*^9}],

Cell[TextData[{
 "The main functions that localize variables are ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Module", True->
     StyleBox["Module", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Module",
    ButtonNote->"paclet:ref/Module"],
   Annotation[#, "paclet:ref/Module", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{{3.6231269338748536`*^9, 3.6231269395868645`*^9}}],
 ", ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"With", True->
     StyleBox["With", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/With",
    ButtonNote->"paclet:ref/With"],
   Annotation[#, "paclet:ref/With", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{{3.6231269338748536`*^9, 3.6231269396024647`*^9}}],
 ", and ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Block", True->
     StyleBox["Block", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Block",
    ButtonNote->"paclet:ref/Block"],
   Annotation[#, "paclet:ref/Block", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{{3.6231269338748536`*^9, 3.6231269396024647`*^9}}],
 "."
}], "Text",
 CellChangeTimes->{{3.6231264028704233`*^9, 3.6231264057050295`*^9}, {
  3.623126438878688*^9, 3.6231265378006644`*^9}, {3.623126929631646*^9, 
  3.623126999729971*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Monitor", "Subsubsection",
 CellChangeTimes->{{3.622756906894241*^9, 3.622756908006843*^9}, {
  3.62312629594562*^9, 3.623126309370644*^9}, {3.6231263830561776`*^9, 
  3.6231263841949797`*^9}, {3.6231265448050766`*^9, 3.623126546151679*^9}, {
  3.623126619141693*^9, 3.623126619422494*^9}}],

Cell["\<\
One of the more frustrating aspects of performing long evaluations is that it \
is difficult to tell how long they will take or how close they are to \
completion. Often times, you will want for a calculation to carry out to \
completion if it will take a few seconds (or minutes) but not if it takes a \
few hours (or days).\
\>", "Text",
 CellChangeTimes->{{3.623126624260907*^9, 3.623126670100788*^9}}],

Cell[TextData[{
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Monitor", True->
     StyleBox["Monitor", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Monitor",
    ButtonNote->"paclet:ref/Monitor"],
   Annotation[#, "paclet:ref/Monitor", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623126674562396*^9}],
 " provides an excellent way to visualize your progress in a calculation. \
Note that ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"Monitor", True->
     StyleBox["Monitor", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/Monitor",
    ButtonNote->"paclet:ref/Monitor"],
   Annotation[#, "paclet:ref/Monitor", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623126674562396*^9}],
 " may cause the calculation to take longer. Many functions also have the \
option ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    PaneSelectorBox[{False->"EvaluationMonitor", True->
     StyleBox["EvaluationMonitor", "HyperlinkActive"]}, Dynamic[
      CurrentValue["MouseOver"]],
     BaseStyle->{"Hyperlink"},
     FrameMargins->0,
     ImageSize->Automatic],
    BaseStyle->"Link",
    ButtonData->"paclet:ref/EvaluationMonitor",
    ButtonNote->"paclet:ref/EvaluationMonitor"],
   Annotation[#, "paclet:ref/EvaluationMonitor", "Hyperlink"]& ]], "Output",
  CellChangeTimes->{3.623126702209645*^9}],
 " which can enable you to monitor the evaluation."
}], "Text",
 CellChangeTimes->{{3.623126676309599*^9, 3.6231267687229633`*^9}}],

Cell["\<\
Here is an example of monitoring a function as an iterator goes from 1 to 3000\
\>", "Text",
 CellChangeTimes->{{3.623126771250168*^9, 3.623126808584033*^9}, 
   3.623131562681103*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Build", " ", "a", " ", "cluster", " ", "by", " ", "randomly", " ", 
    "selecting", " ", "a", " ", "point", " ", 
    StyleBox["randomPoint", "MR"], 
    StyleBox[" ", "MR"], "and", " ", "attaching", " ", "this", " ", "point", 
    " ", "at", " ", "the", " ", "nearest", " ", "point", " ", "of", " ", 
    "the", " ", "cluster", " ", 
    RowBox[{
     StyleBox["pointList", "MR"], ".", " ", "This"}], " ", "is", " ", 
    "similar", " ", "to", " ", 
    ButtonBox[
     RowBox[{"diffusion", "-", 
      RowBox[{"limited", " ", "aggregation"}]}],
     BaseStyle->"Hyperlink",
     ButtonData->{
       URL[
       "http://demonstrations.wolfram.com/\
DiffusionLimitedAggregationARealTimeAgentBasedSimulation/"], None},
     ButtonNote->
      "http://demonstrations.wolfram.com/\
DiffusionLimitedAggregationARealTimeAgentBasedSimulation/"]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"growCluster", "[", "n_", "]"}], " ", ":=", "\n", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[Rho]", " ", "=", " ", "0.01"}], ",", " ", 
        RowBox[{"R", " ", "=", " ", "1"}], ",", " ", 
        RowBox[{"pointList", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.", ",", " ", "0."}], "}"}], ",", " ", 
           RowBox[{"{", "n", "}"}]}], "]"}]}], ",", "\n", "        ", 
        "randomPoint", ",", " ", "nearPoint", ",", " ", "newPoint"}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"Monitor", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Do", "[", 
          StyleBox[
           RowBox[{"(*", 
            StyleBox[" ",
             FontFamily->"Helvetica",
             FontWeight->"Plain",
             FontSlant->"Italic"], 
            StyleBox[
             RowBox[{"a", " ", "random", " ", "point"}],
             FontFamily->"Helvetica",
             FontWeight->"Plain",
             FontSlant->"Italic"], 
            StyleBox[" ",
             FontFamily->"Helvetica",
             FontWeight->"Plain",
             FontSlant->"Italic"], "*)"}], "CodeComment"], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"randomPoint", " ", "=", " ", 
             RowBox[{
              RowBox[{"RandomReal", "[", 
               RowBox[{"{", 
                RowBox[{"0", ",", " ", 
                 RowBox[{"1.25", " ", "R"}]}], "}"}], "]"}], " ", 
              RowBox[{"Normalize", "[", 
               RowBox[{"RandomReal", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
                 "2"}], "]"}], "]"}]}]}], ";", 
            StyleBox[
             RowBox[{"(*", 
              StyleBox[" ",
               FontFamily->"Helvetica",
               FontWeight->"Plain",
               FontSlant->"Italic"], 
              StyleBox[
               RowBox[{"nearest", " ", "cluster", " ", "point"}],
               FontFamily->"Helvetica",
               FontWeight->"Plain",
               FontSlant->"Italic"], 
              StyleBox[" ",
               FontFamily->"Helvetica",
               FontWeight->"Plain",
               FontSlant->"Italic"], "*)"}], "CodeComment"], 
            "\[IndentingNewLine]", 
            RowBox[{"nearPoint", " ", "=", " ", 
             RowBox[{
              RowBox[{"Nearest", "[", 
               RowBox[{
                RowBox[{"Take", "[", 
                 RowBox[{"pointList", ",", " ", "k"}], "]"}], ",", " ", 
                "randomPoint"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            StyleBox[
             RowBox[{"(*", 
              StyleBox[" ",
               FontFamily->"Helvetica",
               FontWeight->"Plain",
               FontSlant->"Italic"], 
              StyleBox[
               RowBox[{"new", " ", "cluster", " ", "point"}],
               FontFamily->"Helvetica",
               FontWeight->"Plain",
               FontSlant->"Italic"], 
              StyleBox[" ",
               FontFamily->"Helvetica",
               FontWeight->"Plain",
               FontSlant->"Italic"], "*)"}], "CodeComment"], 
            "\[IndentingNewLine]", 
            RowBox[{"newPoint", " ", "=", " ", 
             RowBox[{"nearPoint", " ", "+", " ", 
              RowBox[{"2", " ", "\[Rho]", " ", 
               RowBox[{"Normalize", "[", 
                RowBox[{"randomPoint", " ", "-", " ", "nearPoint"}], 
                "]"}]}]}]}], ";", "\[IndentingNewLine]", 
            StyleBox[
             RowBox[{"(*", 
              StyleBox[" ",
               FontFamily->"Helvetica",
               FontWeight->"Plain",
               FontSlant->"Italic"], 
              StyleBox[
               RowBox[{"update", " ", "cluster"}],
               FontFamily->"Helvetica",
               FontWeight->"Plain",
               FontSlant->"Italic"], 
              StyleBox[" ",
               FontFamily->"Helvetica",
               FontWeight->"Plain",
               FontSlant->"Italic"], "*)"}], "CodeComment"], 
            "\[IndentingNewLine]", 
            RowBox[{"R", " ", "=", " ", 
             RowBox[{"Max", "[", 
              RowBox[{"R", ",", " ", 
               RowBox[{"Norm", "[", "newPoint", "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"pointList", "[", 
              RowBox[{"[", 
               RowBox[{"k", " ", "+", " ", "1"}], "]"}], "]"}], " ", "=", " ",
              "newPoint"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"k", ",", " ", 
             RowBox[{"n", " ", "-", " ", "1"}]}], "}"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         "pointList"}], ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"k", " ", ">", " ", "1"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{"Graphics", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"PointSize", "[", 
               RowBox[{"\[Rho]", "/", "R"}], "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{"Take", "[", 
                RowBox[{"pointList", ",", "k"}], "]"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              StyleBox[
               RowBox[{"(*", 
                StyleBox[" ",
                 FontFamily->"Helvetica",
                 FontWeight->"Plain",
                 FontSlant->"Italic"], 
                StyleBox[
                 RowBox[{
                 "show", " ", "random", " ", "point", " ", "and", " ", "new", 
                  " ", "cluster", " ", "point"}],
                 FontFamily->"Helvetica",
                 FontWeight->"Plain",
                 FontSlant->"Italic"], 
                StyleBox[" ",
                 FontFamily->"Helvetica",
                 FontWeight->"Plain",
                 FontSlant->"Italic"], "*)"}], "CodeComment"], 
              "\[IndentingNewLine]", "Red", ",", 
              RowBox[{"PointSize", "[", 
               RowBox[{"2", 
                RowBox[{"\[Rho]", "/", "R"}]}], "]"}], ",", 
              RowBox[{"Point", "[", 
               RowBox[{"pointList", "[", 
                RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
              RowBox[{"Thickness", "[", "0.001", "]"}], ",", " ", 
              RowBox[{"Arrow", "[", 
               RowBox[{"{", 
                RowBox[{"newPoint", ",", " ", "randomPoint"}], "}"}], "]"}], 
              ",", "Blue", ",", " ", 
              RowBox[{"Point", "[", "randomPoint", "]"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"ImageSize", "\[Rule]", "300"}], ",", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"1.25", "R"}]}], ",", 
            RowBox[{"ImagePadding", "\[Rule]", "30"}], ",", 
            RowBox[{"PlotLabel", "\[Rule]", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"\"\<cluster size: \>\"", ",", "k"}], "}"}], "]"}]}]}],
            "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], "\n", 
   RowBox[{"theCluster", " ", "=", "  ", 
    RowBox[{"growCluster", "[", "3000", "]"}]}]}]}]], "InputOnly",
 CellChangeTimes->{{3.6229984516306953`*^9, 3.622998457825906*^9}, {
   3.622998658408256*^9, 3.6229988891369176`*^9}, 3.6230347989321117`*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["(!!!) Expert Section: Customize your Environment ", "Subsection",
 CellChangeTimes->{{3.6230323859990253`*^9, 3.6230323893862314`*^9}, {
  3.623126232815503*^9, 3.62312625844415*^9}, {3.6231673102206216`*^9, 
  3.62316731106667*^9}}],

Cell[CellGroupData[{

Cell["Personalized Stylesheet", "Subsubsection",
 CellChangeTimes->{
  3.6230323485183578`*^9, {3.623032392179636*^9, 3.623032413180674*^9}}],

Cell["\<\
Take a look around at this notebook. Everything that you see - from the \
magnification to the white background to the color/font/size of the text - \
can be changed.\
\>", "Text",
 CellChangeTimes->{{3.623033146000798*^9, 3.623033182593891*^9}}],

Cell[TextData[{
 "Many settings are determined by your notebook\[CloseCurlyQuote]s \
stylesheet, which can be accessed through the menu options \nFormat \[Rule] \
Edit Stylesheet...\nFor now, we will just focus on two very useful \
customizations that will help any ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " power user."
}], "Text",
 CellChangeTimes->{{3.6230333099524508`*^9, 3.623033312760455*^9}, {
  3.62303335467513*^9, 3.623033435805475*^9}, {3.6230335558654933`*^9, 
  3.623033655884472*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["(!!!) InputAutoReplacements", "Subsubsection",
 CellChangeTimes->{
  3.6230323485183578`*^9, {3.623032392179636*^9, 3.6230324269624987`*^9}, 
   3.6230334571699133`*^9, {3.62317019899585*^9, 3.623170201012965*^9}}],

Cell["\<\
Try writing in this notebook the misspelled word \[OpenCurlyDoubleQuote]t\
\[AlignmentMarker]eh\[CloseCurlyDoubleQuote] and then press the spacebar. You \
will notice that the word automatically corrects itself to \
\[OpenCurlyDoubleQuote]the\[CloseCurlyDoubleQuote] all by itself. \
\>", "Text",
 CellChangeTimes->{{3.6230334662219296`*^9, 3.6230335513726854`*^9}, 
   3.6231315652317095`*^9}],

Cell["\<\
To see the required code for this, go to this Notebook\[CloseCurlyQuote]s \
stylesheet, select the Notebook cell (i.e. make sure that the Notebook cell\
\[CloseCurlyQuote]s bracket is highlighted on the right side) and click \
Control+Shift+E. In this section, you will see\
\>", "Text",
 CellChangeTimes->{{3.62303366014528*^9, 3.623033689220131*^9}}],

Cell[BoxData[
 RowBox[{"InputAutoReplacements", "->", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\"\<teh\>\"", "->", "\"\<the\>\""}], ",", 
    RowBox[{"\"\<gcd\>\"", "\[Rule]", "\"\<greatest common divisor\>\""}]}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.6230336897973323`*^9, 3.6230337213293886`*^9}, 
   3.62303412579711*^9}],

Cell["\<\
As you may expect, if you try typing in \[OpenCurlyDoubleQuote]gc\
\[AlignmentMarker]d\[CloseCurlyDoubleQuote] and then hitting spacebar in this \
notebook, it will automagically change to \[OpenCurlyDoubleQuote]greatest \
common divisor,\[CloseCurlyDoubleQuote] and similarly you can add any of your \
own auto replacement rules in this manner.\
\>", "Text",
 CellChangeTimes->{{3.6230337245741944`*^9, 3.623033776165886*^9}}],

Cell["\<\
These auto replacement rules may be used as spell checking, as shorthand \
notation convenient for you, or for a number of other clever ideas. Go wild \
and crazy with it! Even if you put hundreds of these rules it will not \
noticeably slow down your notebooks. \
\>", "Text",
 CellChangeTimes->{{3.6230337772598877`*^9, 3.62303385031942*^9}, 
   3.623131583775345*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["(!!!) InputAliases", "Subsubsection",
 CellChangeTimes->{
  3.6230323485183578`*^9, {3.623032392179636*^9, 3.623032415538278*^9}, {
   3.623033446086893*^9, 3.623033453347906*^9}, 3.6231702021000276`*^9}],

Cell[TextData[{
 "An input alias is a fast way to write a letter (or set of letters) in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". For example, the Greek letter \[Alpha] can be written as \\[Al\
\[AlignmentMarker]pha] or as \[AliasDelimiter]a\[AlignmentMarker]\
\[AliasDelimiter] (where the triple dots are created using the Escape key)."
}], "Text",
 CellChangeTimes->{{3.6230338562796307`*^9, 3.6230339454219894`*^9}}],

Cell["\<\
You can create your own input aliases. For example, in this notebook, try \
writing \[OpenCurlyDoubleQuote]\[AliasDelimiter]R\[AliasDelimiter]\
\[CloseCurlyDoubleQuote] and you will find that it automatically turns into \
\[OpenCurlyDoubleQuote]\[DoubleStruckCapitalR]\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.6230338562796307`*^9, 3.623034003130892*^9}, {
   3.623034072701815*^9, 3.623034101855667*^9}, {3.6230341486163507`*^9, 
   3.6230341495835524`*^9}, 3.623034214674268*^9}],

Cell["\<\
To see the required code for this, go to this Notebook\[CloseCurlyQuote]s \
stylesheet, select the Notebook cell (i.e. make sure that the Notebook cell\
\[CloseCurlyQuote]s bracket is highlighted on the right side) and click \
Control+Shift+E. In this section, you will see\
\>", "Text",
 CellChangeTimes->{{3.62303366014528*^9, 3.623033689220131*^9}}],

Cell[BoxData[
 RowBox[{"InputAliases", "->", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\"\<R\>\"", "\[Rule]", "\"\<\[DoubleStruckCapitalR]\>\""}], ",", 
    RowBox[{"\"\<sumj1n\>\"", "\[Rule]", 
     RowBox[{"StyleBox", "[", 
      RowBox[{"SubsuperscriptBox", "[", 
       RowBox[{
       "\"\<\[CapitalSigma]\>\"", ",", "\"\<j=1\>\"", ",", "\"\<n\>\""}], 
       "]"}], "]"}]}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.6230336897973323`*^9, 3.6230337213293886`*^9}, {
   3.623034015742714*^9, 3.623034039633356*^9}, 3.6230341307911186`*^9, 
   3.623034209479459*^9}],

Cell[TextData[{
 "As you may expect, if you try typing in \[OpenCurlyDoubleQuote]\
\[AliasDelimiter]sum\[AlignmentMarker]j1n\[AliasDelimiter]\
\[CloseCurlyDoubleQuote] and then hitting spacebar in this notebook, it will \
automagically change to \[OpenCurlyDoubleQuote]",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox["\[Sum]", 
    RowBox[{"j", "=", "1"}], "n"], TraditionalForm]]],
 "\[CloseCurlyDoubleQuote] and similarly you can add any of your own auto \
replacement rules in this manner."
}], "Text",
 CellChangeTimes->{{3.6230337245741944`*^9, 3.623033776165886*^9}, {
  3.623034080118829*^9, 3.6230340928680515`*^9}}],

Cell["\<\
Often times InputAutoReplacements will be more convenient, since you do not \
need to use the Escape character. However, InputAutoReplacements are \
dangerous for very short letter sequences (such as R or D) because you may \
end up doing replacements when you do not intend to. Play around with it and \
find a balance that works for you.\
\>", "Text",
 CellChangeTimes->{{3.6230341696501875`*^9, 3.6230342673745613`*^9}}],

Cell[TextData[{
 "The reason why the summation must be written as ",
 Cell[BoxData[
  RowBox[{"StyleBox", "[", 
   RowBox[{"SubsuperscriptBox", "[", 
    RowBox[{"\"\<\[CapitalSigma]\>\"", ",", "\"\<j=1\>\"", ",", "\"\<n\>\""}],
     "]"}], "]"}]], "Input"],
 " instead of simply ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox["\[Sum]", 
    RowBox[{"j", "=", "1"}], "n"], TraditionalForm]]],
 " involves a discussion of the underlying box language of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", which is far beyond the scope of this lecture. If you are interested in \
this topic, come find me."
}], "Text",
 CellChangeTimes->{{3.6230342687941637`*^9, 3.6230342840891914`*^9}, {
  3.6230343212804585`*^9, 3.6230343523687134`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Conclusions", "Subsection",
 CellChangeTimes->{{3.623003016007883*^9, 3.623003016694284*^9}, {
  3.6231294776921186`*^9, 3.6231294963141837`*^9}}],

Cell[TextData[{
 "Research often involves carrying out a task (i.e. experiment) multiple \
times, analyzing each the results each time, tallying them up, and looking at \
the resulting data. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can help:"
}], "Text",
 CellChangeTimes->{{3.6230030239482965`*^9, 3.62300306530497*^9}, 
   3.6230132109081316`*^9}],

Cell[CellGroupData[{

Cell[TextData[{
 "Automate Everything - Don\[CloseCurlyQuote]t run 30 pieces of code for each \
experiment. Pile them all together in ",
 StyleBox["Mathematica.",
  FontSlant->"Italic"]
}], "Item",
 CellChangeTimes->{{3.62301309634713*^9, 3.6230131078463507`*^9}, {
   3.6230131778652735`*^9, 3.623013264386026*^9}, 3.6230134432639403`*^9}],

Cell[TextData[{
 "Complete coverage - ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " already has all of the functions you will need for research built into it. \
Don\[CloseCurlyQuote]t redo all that hard work!"
}], "Item",
 CellChangeTimes->{{3.62301309634713*^9, 3.6230131078463507`*^9}, {
  3.6230131778652735`*^9, 3.623013194450103*^9}, {3.6230133779436255`*^9, 
  3.623013438412332*^9}}],

Cell["\<\
Test Out Ideas Quickly - Very little code is often enough to test a \
prediction.\
\>", "Item",
 CellChangeTimes->{{3.62301309634713*^9, 3.6230131078463507`*^9}, {
   3.6230131778652735`*^9, 3.623013193358101*^9}, {3.6230132676640315`*^9, 
   3.623013372202815*^9}, 3.6230134442623425`*^9}],

Cell["\<\
File Management - You can send Mathematica packages (.m files) to the \
computer clusters at Caltech, run them, and read their output.\
\>", "Item",
 CellChangeTimes->{{3.62301309634713*^9, 3.623013165541252*^9}, {
   3.6230134462435455`*^9, 3.6230134485835495`*^9}, 3.6231315980915704`*^9}],

Cell["\<\
It\[CloseCurlyQuote]s Fun - Like learning any language, learning how to \
program efficiently is a joy and a tool that will stay with you for the rest \
of your life.\
\>", "Item",
 CellChangeTimes->{{3.62301309634713*^9, 3.623013165541252*^9}, {
  3.6230134462435455`*^9, 3.623013472031391*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.6231702261924057`*^9, 3.623170229400589*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   SuperscriptBox["E", 
    RowBox[{
     RowBox[{"-", "1"}], "/", "x"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<time\>\"", ",", "\"\<knowledge\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Mathematica Learning Curve\>\""}], 
   ",", 
   RowBox[{"Ticks", "\[Rule]", "None"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"PointSize", "[", "Medium", "]"}], ",", 
      RowBox[{"Point", "[", 
       RowBox[{"{", 
        RowBox[{"0.7", ",", 
         SuperscriptBox["E", 
          RowBox[{
           RowBox[{"-", "1"}], "/", "0.7"}]]}], "}"}], "]"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6227469889592123`*^9, 3.6227471449632883`*^9}, {
  3.6231130380863075`*^9, 3.62311303973991*^9}, {3.623129238595443*^9, 
  3.6231292776796784`*^9}, {3.623133102769623*^9, 3.623133110912837*^9}, {
  3.6231702486936927`*^9, 3.623170251726866*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"time\"", TraditionalForm], 
    FormBox["\"knowledge\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Epilog->{
    PointSize[Medium], 
    PointBox[{0.7, 0.2396510364417758}]},
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotLabel->FormBox["\"Mathematica Learning Curve\"", TraditionalForm],
  PlotRange->{{0, 5}, {0., 0.8187307497362236}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{None, None}]], "Output",
 CellChangeTimes->{{3.62313310688803*^9, 3.623133111115638*^9}, {
  3.6231702490487127`*^9, 3.6231702520818863`*^9}}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initialization", "Section",
 InitializationGroup->True,
 CellChangeTimes->{3.6230003151337004`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"visualizationFunctions", "[", "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"panel1", "=", 
     RowBox[{
     "Import", "[", 
      "\"\<http://www.its.caltech.edu/~teinav/Other/Pictures/plots-1.png\>\"",
       "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"panel2", "=", 
     RowBox[{
     "Import", "[", 
      "\"\<http://www.its.caltech.edu/~teinav/Other/Pictures/plots-2.png\>\"",
       "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"panel3", "=", 
     RowBox[{
     "Import", "[", 
      "\"\<http://www.its.caltech.edu/~teinav/Other/Pictures/plots-3.png\>\"",
       "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"panel4", "=", 
     RowBox[{
     "Import", "[", 
      "\"\<http://www.its.caltech.edu/~teinav/Other/Pictures/plots-4.png\>\"",
       "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "Assemble", " ", "the", " ", "panes", " ", "together", " ", "for", " ", 
      "the", " ", "final", " ", "amazing", " ", 
      RowBox[{"graphics", "!"}]}], " ", "*)"}], "\n", 
    RowBox[{"TabView", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"FontFamily", "\[Rule]", "\"\<Calibri\>\""}], ",", "18", 
          ",", "Bold", ",", " ", 
          RowBox[{"Background", "\[Rule]", "Transparent"}]}], "]"}], "->", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "&"}], "/@", 
      RowBox[{"Transpose", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<2D Visualization\>\"", ",", "\"\<3D Visualization\>\"", ",", 
           "\"\<Charting\>\"", ",", "\"\<Statistical Visualization\>\""}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"panel1", ",", "panel2", ",", "panel3", ",", "panel4"}], 
          "}"}]}], "}"}]}]}], "]"}]}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.6110186018998594`*^9, 3.6110186097888594`*^9}, 
   3.6110214454105234`*^9, 3.6110214878515234`*^9, 3.611021617291524*^9, 
   3.6110217342095237`*^9, 3.6110222241915236`*^9, {3.6110224700905237`*^9, 
   3.6110225206695237`*^9}, {3.61102278632449*^9, 3.6110228053100815`*^9}, {
   3.622999453729712*^9, 3.6229994619197264`*^9}, 3.623118341992948*^9, {
   3.6231185046230354`*^9, 3.623118522017066*^9}, {3.623118852248928*^9, 
   3.62311886490055*^9}, 3.629767711789835*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"arc", "[", 
   RowBox[{"r_", ",", "\[Theta]_", ",", 
    RowBox[{"{", 
     RowBox[{"\[Phi]1_", ",", " ", "\[Phi]2_"}], "}"}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Line", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"r", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Sin", "[", "\[Phi]", "]"}], " ", 
         RowBox[{"Cos", "[", "\[Theta]", "]"}]}], ",", " ", 
        RowBox[{
         RowBox[{"Sin", "[", "\[Phi]", "]"}], " ", 
         RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", " ", 
        RowBox[{"Cos", "[", "\[Phi]", "]"}]}], "}"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Phi]", ",", "\[Phi]1", ",", "\[Phi]2", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\[Phi]2", "-", "\[Phi]1"}], ")"}], "/", 
        RowBox[{"Round", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"\[Phi]2", "-", "\[Phi]1"}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"2", "\[Pi]"}], ")"}]}], ")"}], "180."}], "]"}]}]}], 
      "}"}]}], "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"arc", "[", 
   RowBox[{"r_", ",", 
    RowBox[{"{", 
     RowBox[{"\[Theta]1_", ",", "\[Theta]2_"}], "}"}], ",", "\[Phi]_"}], 
   "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Line", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"r", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Sin", "[", "\[Phi]", "]"}], " ", 
         RowBox[{"Cos", "[", "\[Theta]", "]"}]}], ",", " ", 
        RowBox[{
         RowBox[{"Sin", "[", "\[Phi]", "]"}], " ", 
         RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", " ", 
        RowBox[{"Cos", "[", "\[Phi]", "]"}]}], "}"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", "\[Theta]1", ",", "\[Theta]2", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\[Theta]2", "-", "\[Theta]1"}], ")"}], "/", 
        RowBox[{"Round", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"\[Theta]2", "-", "\[Theta]1"}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"2", "\[Pi]"}], ")"}]}], ")"}], "180."}], "]"}]}]}], 
      "}"}]}], "]"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"PolarToCartesian", "[", 
   RowBox[{"{", 
    RowBox[{"r_", ",", "\[Theta]_", ",", "\[Phi]_"}], "}"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"r", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", "\[Phi]", "]"}], " ", 
      RowBox[{"Cos", "[", "\[Theta]", "]"}]}], ",", " ", 
     RowBox[{
      RowBox[{"Sin", "[", "\[Phi]", "]"}], " ", 
      RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", " ", 
     RowBox[{"Cos", "[", "\[Phi]", "]"}]}], "}"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"sphericalGraphic", "[", "]"}], ":=", " ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"hemisphere", " ", "=", " ", 
        RowBox[{"First", "[", 
         RowBox[{"ParametricPlot3D", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"Sin", "[", "\[Phi]", "]"}], " ", 
              RowBox[{"Cos", "[", "\[Theta]", "]"}]}], ",", " ", 
             RowBox[{
              RowBox[{"Sin", "[", "\[Phi]", "]"}], " ", 
              RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", " ", 
             RowBox[{"Cos", "[", "\[Phi]", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\[Phi]", ",", "0", ",", 
             RowBox[{"\[Pi]", "/", "2"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"\[Theta]", ",", "0", ",", 
             RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
           RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
           RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
           RowBox[{"Axes", "\[Rule]", "None"}]}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"al", "=", "1.2"}], ",", "\[IndentingNewLine]", 
       RowBox[{"tl", "=", "1.3"}]}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Graphics3D", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Arrowheads", "[", "Small", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Arrow", "[", 
          RowBox[{"al", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", 
                 RowBox[{
                  RowBox[{"-", ".1"}], "/", "1.1"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Text", "[", 
          RowBox[{"\"\<x\>\"", ",", 
           RowBox[{"tl", 
            RowBox[{"{", 
             RowBox[{"1", ",", "0", ",", "0"}], "}"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Text", "[", 
          RowBox[{"\"\<y\>\"", ",", 
           RowBox[{"tl", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1", ",", "0"}], "}"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Text", "[", 
          RowBox[{"\"\<z\>\"", ",", 
           RowBox[{"tl", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0", ",", "1"}], "}"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\[Phi]", "=", 
              RowBox[{"45", "\[Degree]"}]}], ",", 
             RowBox[{"\[Theta]", "=", 
              RowBox[{"45", "\[Degree]"}]}], ",", 
             RowBox[{"ar", "=", ".25"}], ",", 
             RowBox[{"tr", "=", ".35"}]}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"Arrow", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                 RowBox[{"PolarToCartesian", "[", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "\[Theta]", ",", "\[Theta]"}], "}"}], 
                  "]"}]}], "}"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"arc", "[", 
              RowBox[{"1", ",", "\[Phi]", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "\[Theta]"}], "}"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"arc", "[", 
              RowBox[{
               RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "\[Phi]"}], "}"}], ",", 
               RowBox[{"\[Pi]", "/", "2"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Line", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                RowBox[{"PolarToCartesian", "[", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", "\[Phi]", ",", 
                   RowBox[{"\[Pi]", "/", "2"}]}], "}"}], "]"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"PolarToCartesian", "[", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "\[Phi]", ",", "\[Theta]"}], "}"}], 
                 "]"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"arc", "[", 
              RowBox[{"ar", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "\[Phi]"}], "}"}], ",", 
               RowBox[{"\[Pi]", "/", "2"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"arc", "[", 
              RowBox[{"ar", ",", "\[Phi]", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "\[Theta]"}], "}"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Text", "[", 
              RowBox[{"\"\<\[Phi]\>\"", ",", 
               RowBox[{"PolarToCartesian", "[", 
                RowBox[{"{", 
                 RowBox[{"tr", ",", 
                  RowBox[{"\[Phi]", "/", "2"}], ",", 
                  RowBox[{"\[Pi]", "/", "2"}]}], "}"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Text", "[", 
              RowBox[{"\"\<\[Theta]\>\"", ",", 
               RowBox[{"PolarToCartesian", "[", 
                RowBox[{"{", 
                 RowBox[{"tr", ",", "\[Theta]", ",", 
                  RowBox[{"\[Theta]", "/", "2"}]}], "}"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], 
            "\[IndentingNewLine]", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Opacity", "[", ".5", "]"}], ",", "hemisphere"}], "}"}]}], 
        "\[IndentingNewLine]", "}"}], ",", 
       RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
       RowBox[{"ViewPoint", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"2.72", ",", 
          RowBox[{"-", "0.92"}], ",", "1.78"}], "}"}]}], ",", 
       RowBox[{"ViewVertical", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"0.07", ",", 
          RowBox[{"-", "0.037"}], ",", "1.83"}], "}"}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.511787386305312*^9, 3.511787437090899*^9}, {
   3.5117875125288763`*^9, 3.511787561760871*^9}, {3.511787642765586*^9, 
   3.5117876820853987`*^9}, 3.51178786256079*^9, {3.611439736812147*^9, 
   3.611439738790147*^9}, 3.611440423396147*^9, {3.620932105812317*^9, 
   3.620932171996428*^9}, {3.6230002063359084`*^9, 3.6230002079895115`*^9}, {
   3.6230002470823803`*^9, 3.623000256520397*^9}}]
}, Closed]]
}, Open  ]]
},
WindowSize->{1366, 726},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"10.1 for Microsoft Windows (64-bit) (August 16, 2014)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData["Notebook"], 
    InputAliases -> {"R" -> "\[DoubleStruckCapitalR]", "sumj1n" -> StyleBox[
        SubsuperscriptBox["\[CapitalSigma]", "j=1", "n"]]}, 
    InputAutoReplacements -> {
     "teh" -> "the", "gcd" -> "greatest common divisor"}]}, Visible -> False, 
  FrontEndVersion -> "10.1 for Microsoft Windows (64-bit) (August 16, 2014)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 278, 7, 182, "Title"],
Cell[CellGroupData[{
Cell[883, 33, 339, 8, 124, "Section"],
Cell[CellGroupData[{
Cell[1247, 45, 213, 3, 87, "Subsection"],
Cell[CellGroupData[{
Cell[1485, 52, 184, 2, 104, "Subsubsection"],
Cell[1672, 56, 155, 2, 81, "Text"],
Cell[1830, 60, 244, 6, 81, "Input"],
Cell[2077, 68, 664, 19, 133, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[2778, 92, 224, 3, 84, "Subsubsection"],
Cell[3005, 97, 325, 6, 81, "Text"],
Cell[3333, 105, 422, 8, 187, "Input"],
Cell[3758, 115, 318, 6, 133, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[4125, 127, 259, 3, 69, "Subsection"],
Cell[CellGroupData[{
Cell[4409, 134, 118, 1, 104, "Subsubsection"],
Cell[4530, 137, 320, 7, 82, "Text"],
Cell[4853, 146, 176, 4, 84, "Input"],
Cell[5032, 152, 197, 3, 291, "Input"],
Cell[5232, 157, 345, 9, 135, "Text"],
Cell[5580, 168, 417, 9, 239, "Input"],
Cell[6000, 179, 200, 4, 133, "Text"],
Cell[6203, 185, 446, 11, 277, "Input"],
Cell[6652, 198, 433, 11, 135, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[7122, 214, 126, 1, 84, "Subsubsection"],
Cell[CellGroupData[{
Cell[7273, 219, 685, 21, 136, "Item"],
Cell[7961, 242, 1039, 32, 131, "Item"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[9049, 280, 96, 1, 84, "Subsubsection"],
Cell[9148, 283, 750, 23, 129, "Item"],
Cell[9901, 308, 476, 12, 81, "Input"],
Cell[10380, 322, 614, 19, 77, "Item"],
Cell[10997, 343, 373, 9, 187, "Input"],
Cell[11373, 354, 148, 2, 187, "Input"],
Cell[11524, 358, 1125, 35, 82, "Text"],
Cell[12652, 395, 291, 7, 135, "Input"],
Cell[12946, 404, 172, 3, 239, "Input"],
Cell[13121, 409, 607, 17, 81, "Text"],
Cell[13731, 428, 347, 8, 135, "Input"],
Cell[14081, 438, 89, 1, 135, "Input"],
Cell[14173, 441, 755, 20, 77, "Item"],
Cell[14931, 463, 239, 5, 135, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[15207, 473, 108, 1, 84, "Subsubsection"],
Cell[15318, 476, 693, 20, 81, "Text"],
Cell[16014, 498, 262, 6, 136, "Input"],
Cell[16279, 506, 253, 5, 136, "Input"],
Cell[16535, 513, 681, 20, 81, "Text"],
Cell[17219, 535, 287, 6, 138, "Input"],
Cell[17509, 543, 242, 4, 135, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[17788, 552, 228, 3, 84, "Subsubsection"],
Cell[18019, 557, 138, 4, 82, "Text"],
Cell[CellGroupData[{
Cell[18182, 565, 432, 11, 81, "Input"],
Cell[18617, 578, 1273, 43, 181, "Output"]
}, Open  ]],
Cell[19905, 624, 467, 14, 122, "Item"],
Cell[20375, 640, 421, 11, 135, "Input"],
Cell[20799, 653, 333, 9, 124, "Item"],
Cell[21135, 664, 277, 8, 81, "Input"],
Cell[21415, 674, 172, 3, 239, "Input"],
Cell[21590, 679, 890, 25, 185, "Text"],
Cell[22483, 706, 293, 7, 82, "Text"],
Cell[22779, 715, 363, 10, 81, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[23191, 731, 135, 2, 69, "Subsection"],
Cell[CellGroupData[{
Cell[23351, 737, 164, 2, 104, "Subsubsection"],
Cell[23518, 741, 2857, 81, 135, "Text"],
Cell[26378, 824, 428, 13, 81, "Input"],
Cell[26809, 839, 481, 7, 81, "Input"],
Cell[27293, 848, 1097, 32, 239, "Input",
 CellID->39481373]
}, Closed]],
Cell[CellGroupData[{
Cell[28427, 885, 108, 1, 84, "Subsubsection"],
Cell[28538, 888, 236, 4, 133, "Text"],
Cell[28777, 894, 337, 8, 81, "Input"],
Cell[29117, 904, 642, 18, 81, "Text"],
Cell[29762, 924, 450, 11, 81, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[30249, 940, 103, 1, 84, "Subsubsection"],
Cell[30355, 943, 309, 6, 81, "Text"],
Cell[30667, 951, 138, 2, 81, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[30854, 959, 163, 2, 69, "Subsection"],
Cell[CellGroupData[{
Cell[31042, 965, 99, 1, 104, "Subsubsection"],
Cell[31144, 968, 778, 20, 133, "Text"],
Cell[31925, 990, 581, 14, 135, "Input"],
Cell[32509, 1006, 511, 13, 135, "Input"],
Cell[33023, 1021, 323, 6, 77, "Item"],
Cell[33349, 1029, 1130, 29, 239, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[34516, 1063, 155, 2, 84, "Subsubsection"],
Cell[CellGroupData[{
Cell[34696, 1069, 1193, 34, 122, "Item"],
Cell[35892, 1105, 815, 21, 172, "Item"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[36756, 1132, 170, 2, 84, "Subsubsection"],
Cell[36929, 1136, 1949, 51, 235, "Text"],
Cell[38881, 1189, 837, 24, 187, "Input"],
Cell[39721, 1215, 609, 18, 81, "Text"],
Cell[CellGroupData[{
Cell[40355, 1237, 357, 9, 124, "Item"],
Cell[40715, 1248, 1296, 37, 115, "Item"],
Cell[42014, 1287, 368, 11, 115, "Item"]
}, Closed]],
Cell[42397, 1301, 1251, 36, 120, "Text"],
Cell[43651, 1339, 2138, 64, 183, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[45838, 1409, 110, 1, 69, "Subsection"],
Cell[CellGroupData[{
Cell[45973, 1414, 129, 1, 104, "Subsubsection"],
Cell[46105, 1417, 582, 10, 81, "Text"],
Cell[46690, 1429, 892, 26, 239, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[47619, 1460, 181, 2, 84, "Subsubsection"],
Cell[47803, 1464, 382, 5, 81, "Text"],
Cell[48188, 1471, 3128, 89, 601, "Input"],
Cell[51319, 1562, 131, 1, 81, "Text"],
Cell[51453, 1565, 716, 20, 135, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[52206, 1590, 178, 2, 84, "Subsubsection"],
Cell[52387, 1594, 284, 5, 133, "Text"],
Cell[52674, 1601, 1028, 34, 187, "Input",
 CellID->82874235],
Cell[53705, 1637, 123, 1, 81, "Text"],
Cell[53831, 1640, 707, 22, 135, "Input",
 CellID->309907506],
Cell[54541, 1664, 179, 4, 81, "Text"],
Cell[54723, 1670, 740, 24, 190, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[55512, 1700, 185, 2, 69, "Subsection"],
Cell[CellGroupData[{
Cell[55722, 1706, 666, 9, 104, "Subsubsection"],
Cell[56391, 1717, 199, 5, 77, "Item"],
Cell[56593, 1724, 2418, 60, 162, "Text"],
Cell[59014, 1786, 3785, 115, 761, "Input"],
Cell[62802, 1903, 1293, 17, 133, "Text"],
Cell[64098, 1922, 2368, 56, 343, "Input"],
Cell[66469, 1980, 188, 5, 82, "Text"],
Cell[66660, 1987, 185, 3, 81, "Input"],
Cell[66848, 1992, 108, 1, 81, "Text"],
Cell[66959, 1995, 846, 21, 343, "Input"],
Cell[67808, 2018, 1171, 16, 81, "Text"],
Cell[68982, 2036, 481, 11, 135, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[69500, 2052, 181, 2, 84, "Subsubsection"],
Cell[69684, 2056, 347, 11, 77, "Item"],
Cell[70034, 2069, 2480, 68, 552, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[72563, 2143, 192, 2, 69, "Subsection"],
Cell[CellGroupData[{
Cell[72780, 2149, 135, 1, 104, "Subsubsection"],
Cell[72918, 2152, 976, 27, 196, "Text"],
Cell[73897, 2181, 174, 4, 120, "Text"],
Cell[74074, 2187, 682, 14, 196, "Text"],
Cell[74759, 2203, 1152, 33, 372, "Input"],
Cell[75914, 2238, 695, 24, 270, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[76646, 2267, 535, 7, 84, "Subsubsection"],
Cell[77184, 2276, 543, 9, 120, "Text"],
Cell[77730, 2287, 1114, 29, 298, "Text"],
Cell[78847, 2318, 945, 29, 293, "Input"],
Cell[79795, 2349, 413, 9, 120, "Text"],
Cell[80211, 2360, 303, 8, 124, "Input"],
Cell[80517, 2370, 277, 8, 120, "Text"],
Cell[80797, 2380, 396, 9, 124, "Input"],
Cell[81196, 2391, 257, 7, 124, "Input"],
Cell[81456, 2400, 196, 2, 120, "Text"],
Cell[81655, 2404, 714, 19, 217, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[82406, 2428, 133, 1, 84, "Subsubsection"],
Cell[82542, 2431, 330, 6, 120, "Text"],
Cell[82875, 2439, 745, 23, 221, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[83657, 2467, 165, 2, 84, "Subsubsection"],
Cell[83825, 2471, 169, 2, 120, "Text"],
Cell[83997, 2475, 978, 30, 453, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[85012, 2510, 142, 2, 84, "Subsubsection"],
Cell[85157, 2514, 113, 1, 120, "Text"],
Cell[85273, 2517, 1103, 30, 453, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[86413, 2552, 119, 1, 84, "Subsubsection"],
Cell[86535, 2555, 204, 4, 120, "Text"],
Cell[86742, 2561, 1045, 29, 291, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[87824, 2595, 147, 2, 84, "Subsubsection"],
Cell[87974, 2599, 364, 7, 120, "Text"],
Cell[88341, 2608, 860, 23, 372, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[89238, 2636, 116, 1, 84, "Subsubsection"],
Cell[89357, 2639, 481, 8, 196, "Text"],
Cell[89841, 2649, 449, 15, 205, "Input"],
Cell[90293, 2666, 244, 4, 120, "Text"],
Cell[90540, 2672, 552, 17, 205, "Input"],
Cell[91095, 2691, 177, 4, 120, "Text"],
Cell[91275, 2697, 1519, 39, 502, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[92843, 2742, 164, 2, 69, "Subsection"],
Cell[CellGroupData[{
Cell[93032, 2748, 103, 1, 104, "Subsubsection"],
Cell[93138, 2751, 290, 10, 81, "Text"],
Cell[93431, 2763, 197, 5, 90, "Input"],
Cell[93631, 2770, 459, 14, 142, "Input"],
Cell[94093, 2786, 287, 5, 133, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[94417, 2796, 231, 3, 84, "Subsubsection"],
Cell[94651, 2801, 334662, 5511, 601, "Input",
 CellID->1908635966]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[429362, 8318, 152, 2, 69, "Subsection"],
Cell[CellGroupData[{
Cell[429539, 8324, 101, 1, 156, "Subsubsection"],
Cell[429643, 8327, 902, 17, 196, "Text"],
Cell[430548, 8346, 1783, 41, 205, "Text"],
Cell[432334, 8389, 662, 15, 196, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[433033, 8409, 207, 6, 156, "Subsubsection"],
Cell[433243, 8417, 257, 5, 120, "Text"],
Cell[433503, 8424, 517, 13, 210, "Input"],
Cell[434023, 8439, 958, 25, 291, "Input"],
Cell[434984, 8466, 1699, 45, 372, "Input"],
Cell[436686, 8513, 315, 7, 120, "Text"],
Cell[437004, 8522, 51, 0, 124, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[437092, 8527, 118, 1, 156, "Subsubsection"],
Cell[437213, 8530, 790, 20, 275, "Text"],
Cell[438006, 8552, 1463, 38, 423, "Text"],
Cell[439472, 8592, 719, 17, 275, "Text"],
Cell[440194, 8611, 1412, 36, 428, "Text"],
Cell[441609, 8649, 764, 19, 275, "Text"],
Cell[442376, 8670, 630, 16, 275, "Text"],
Cell[443009, 8688, 884, 21, 275, "Text"],
Cell[443896, 8711, 1010, 22, 275, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[444955, 8739, 118, 1, 69, "Subsection"],
Cell[CellGroupData[{
Cell[445098, 8744, 113, 1, 104, "Subsubsection"],
Cell[445214, 8747, 683, 15, 120, "Text"],
Cell[445900, 8764, 817, 18, 201, "Text"],
Cell[446720, 8784, 1724, 50, 124, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[448481, 8839, 296, 4, 84, "Subsubsection"],
Cell[448780, 8845, 415, 7, 196, "Text"],
Cell[449198, 8854, 1770, 49, 205, "Text"],
Cell[450971, 8905, 194, 4, 120, "Text"],
Cell[451168, 8911, 8763, 213, 2343, "InputOnly"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[459980, 9130, 239, 3, 69, "Subsection"],
Cell[CellGroupData[{
Cell[460244, 9137, 141, 2, 104, "Subsubsection"],
Cell[460388, 9141, 256, 5, 133, "Text"],
Cell[460647, 9148, 512, 11, 286, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[461196, 9164, 220, 3, 84, "Subsubsection"],
Cell[461419, 9169, 404, 7, 133, "Text"],
Cell[461826, 9178, 362, 6, 183, "Text"],
Cell[462191, 9186, 333, 8, 135, "Input"],
Cell[462527, 9196, 437, 7, 183, "Text"],
Cell[462967, 9205, 380, 7, 183, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[463384, 9217, 210, 3, 84, "Subsubsection"],
Cell[463597, 9222, 433, 8, 196, "Text"],
Cell[464033, 9232, 511, 8, 120, "Text"],
Cell[464547, 9242, 362, 6, 196, "Text"],
Cell[464912, 9250, 571, 13, 124, "Input"],
Cell[465486, 9265, 626, 13, 212, "Text"],
Cell[466115, 9280, 433, 7, 196, "Text"],
Cell[466551, 9289, 746, 19, 212, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[467346, 9314, 152, 2, 69, "Subsection"],
Cell[467501, 9318, 363, 9, 183, "Text"],
Cell[CellGroupData[{
Cell[467889, 9331, 340, 7, 122, "Item"],
Cell[468232, 9340, 399, 9, 122, "Item"],
Cell[468634, 9351, 300, 6, 77, "Item"],
Cell[468937, 9359, 301, 5, 122, "Item"],
Cell[469241, 9366, 306, 6, 122, "Item"]
}, Open  ]],
Cell[469562, 9375, 292, 4, 500, "Input"],
Cell[CellGroupData[{
Cell[469879, 9383, 1066, 28, 207, "Input"],
Cell[470948, 9413, 5280, 99, 653, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[476289, 9519, 105, 2, 124, "Section",
 InitializationGroup->True],
Cell[476397, 9523, 2535, 61, 429, "Input"],
Cell[478935, 9586, 10638, 266, 1279, "Input"]
}, Closed]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
